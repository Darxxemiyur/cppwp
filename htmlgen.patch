From 947b8908cd47f313f82141222f2572637c899100 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Wed, 5 Dec 2018 01:09:09 +0100
Subject: [PATCH 01/20] Use \range where appropriate.

---
 source/strings.tex    | 20 ++++++++++----------
 source/containers.tex | 34 +++++++++++++++++-----------------
 source/algorithms.tex |  6 +++---
 source/regex.tex      |  2 +-
 4 files changed, 31 insertions(+), 31 deletions(-)

diff --git a/source/strings.tex b/source/strings.tex
index 4bab3cdf..64e8af6a 100644
--- a/source/strings.tex
+++ b/source/strings.tex
@@ -137,31 +137,31 @@ [char.traits.require]
 whether \tcode{c} is to be treated as less than \tcode{d}.  &   constant    \\ \rowsep
 \tcode{X::compare(p,q,n)}   &   \tcode{int}     &
 \returns
-\tcode{0} if for each \tcode{i} in \tcode{[0,n)}, \tcode{X::eq(p[i],q[i])}
-is \tcode{true}; else, a negative value if, for some \tcode{j} in \tcode{[0,n)},
-\tcode{X::lt(p[j],q[j])} is \tcode{true} and for each \tcode{i} in \tcode{[0,j)}
+\tcode{0} if for each \tcode{i} in \range{0}{n}, \tcode{X::eq(p[i],q[i])}
+is \tcode{true}; else, a negative value if, for some \tcode{j} in \range{0}{n},
+\tcode{X::lt(p[j],q[j])} is \tcode{true} and for each \tcode{i} in \range{0}{j}
 \tcode{X::eq(p[i],q[i])} is \tcode{true}; else a positive value.            &   linear      \\ \rowsep
 \tcode{X::length(p)}    &   \tcode{size_t}     &
 \returns
 the smallest \tcode{i} such that \tcode{X::eq(p[i],charT())} is \tcode{true}.  &   linear  \\ \rowsep
 \tcode{X::find(p,n,c)}  &   \tcode{const X::char_type*} &
 \returns
-the smallest \tcode{q} in \tcode{[p,p+n)} such that
+the smallest \tcode{q} in \range{p}{p+n} such that
 \tcode{X::eq(*q,c)} is \tcode{true}, zero otherwise.                        &   linear      \\ \rowsep
 \tcode{X::move(s,p,n)}  &   \tcode{X::char_type*}   &
-for each \tcode{i} in \tcode{[0,n)}, performs \tcode{X::assign(s[i],p[i])}.
-Copies correctly even where the ranges \tcode{[p,p+n)} and \tcode{[s,s+n)} overlap.\br \returns \tcode{s}.    &   linear  \\ \rowsep
+for each \tcode{i} in \range{0}{n}, performs \tcode{X::assign(s[i],p[i])}.
+Copies correctly even where the ranges \range{p}{p+n} and \range{s}{s+n} overlap.\br \returns \tcode{s}.    &   linear  \\ \rowsep
 \tcode{X::copy(s,p,n)}  &   \tcode{X::char_type*}   &
 \expects
-\tcode{p} not in \tcode{[s,s+n)}. \br
+\tcode{p} not in \range{s}{s+n}. \br
 \returns
 \tcode{s}.\br
 for each \tcode{i} in
-\tcode{[0,n)}, performs \tcode{X::assign(s[i],p[i])}.               &   linear      \\ \rowsep
+\range{0}{n}, performs \tcode{X::assign(s[i],p[i])}.               &   linear      \\ \rowsep
 \tcode{X::assign(r,d)}  &   (not used)          &
 assigns \tcode{r=d}.                            &   constant        \\ \rowsep
 \tcode{X::assign\-(s,n,c)}  &   \tcode{X::char_type*}   &
-for each \tcode{i} in \tcode{[0,n)}, performs
+for each \tcode{i} in \range{0}{n}, performs
 \tcode{X::assign(s[i],c)}.\br
 \returns
 \tcode{s}.                       &   linear      \\ \rowsep
@@ -2479,7 +2479,7 @@ [string.erase]
 \pnum
 \effects
 Removes the characters in the range
-\tcode{[first, last)}.
+\range{first}{last}.
 
 \pnum
 \returns
diff --git a/source/containers.tex b/source/containers.tex
index e2150e73..c1585792 100644
--- a/source/containers.tex
+++ b/source/containers.tex
@@ -800,7 +800,7 @@ [sequence.reqmts]
 \tcode{i} and \tcode{j}
 denote iterators that meet the \oldconcept{InputIterator} requirements
 and refer to elements implicitly convertible to \tcode{value_type},
-\tcode{[i, j)}
+\range{i}{j}
 denotes a valid range,
 \tcode{il} designates an object of type \tcode{initializer_list<value_type>},
 \tcode{n}
@@ -808,7 +808,7 @@ [sequence.reqmts]
 \tcode{p} denotes a valid constant iterator to
 \tcode{a}, \tcode{q}
 denotes a valid dereferenceable constant iterator to
-\tcode{a}, \tcode{[q1, q2)}
+\tcode{a}, \range{q1}{q2}
 denotes a valid range of constant iterators in
 \tcode{a}, \tcode{t}
 denotes an lvalue or a const rvalue of
@@ -1647,7 +1647,7 @@ [associative.reqmts]
 \tcode{p} denotes a valid constant iterator to \tcode{a},
 \tcode{q} denotes a valid dereferenceable constant iterator to \tcode{a},
 \tcode{r} denotes a valid dereferenceable iterator to \tcode{a},
-\tcode{[q1, q2)} denotes a valid range of constant iterators in \tcode{a},
+\range{q1}{q2} denotes a valid range of constant iterators in \tcode{a},
 \tcode{il} designates an object of type \tcode{initializer_list<value_type>},
 \tcode{t} denotes a value of type \tcode{X::value_type},
 \tcode{k} denotes a value of type \tcode{X::key_type}
@@ -1754,9 +1754,9 @@ [associative.reqmts]
                         &
   \expects \tcode{value_type} is \oldconcept{EmplaceConstructible} into \tcode{X} from \tcode{*i}.\br
   \effects\ Constructs an empty container and inserts elements from the
-  range \tcode{[i, j)} into it; uses \tcode{c} as a comparison object. &
+  range \range{i}{j} into it; uses \tcode{c} as a comparison object. &
   $N \log N$ in general, where $N$ has the value \tcode{distance(i, j)};
-  linear if \tcode{[i, j)} is sorted with \tcode{value_comp()} \\ \rowsep
+  linear if \range{i}{j} is sorted with \tcode{value_comp()} \\ \rowsep
 
 \tcode{X(i,j)}\br\tcode{X~u(i,j);}    &
                                     &
@@ -2324,12 +2324,12 @@ [unord.req]
   are both valid and denote types\iref{temp.deduct},
 \item \tcode{i} and \tcode{j} denote input iterators
   that refer to \tcode{value_type},
-\item \tcode{[i, j)} denotes a valid range,
+\item \range{i}{j} denotes a valid range,
 \item \tcode{p} and \tcode{q2} denote valid constant iterators to \tcode{a},
 \item \tcode{q} and \tcode{q1} denote
   valid dereferenceable constant iterators to \tcode{a},
 \item \tcode{r} denotes a valid dereferenceable iterator to \tcode{a},
-\item \tcode{[q1, q2)} denotes a valid range in \tcode{a},
+\item \range{q1}{q2} denotes a valid range in \tcode{a},
 \item \tcode{il} denotes a value of type \tcode{initializer_list<value_type>},
 \item \tcode{t} denotes a value of type \tcode{X::value_type},
 \item \tcode{k} denotes a value of type \tcode{key_type},
@@ -2483,7 +2483,7 @@ [unord.req]
 &   \expects \tcode{value_type} is \oldconcept{EmplaceConstructible} into \tcode{X} from \tcode{*i}.\br
     \effects\ Constructs an empty container with at least \tcode{n} buckets,
 using \tcode{hf} as the hash function and \tcode{eq} as the key
-equality predicate, and inserts elements from \tcode{[i, j)} into it.
+equality predicate, and inserts elements from \range{i}{j} into it.
 &   Average case \bigoh{N} ($N$ is \tcode{distance(i, j)}), worst case
 \bigoh{N^2}
 \\ \rowsep
@@ -2494,7 +2494,7 @@ [unord.req]
     \tcode{value_type} is \oldconcept{EmplaceConstructible} into \tcode{X} from \tcode{*i}.\br
     \effects\ Constructs an empty container with at least \tcode{n} buckets,
 using \tcode{hf} as the hash function and \tcode{key_equal()} as the key
-equality predicate, and inserts elements from \tcode{[i, j)} into it.
+equality predicate, and inserts elements from \range{i}{j} into it.
 &   Average case \bigoh{N} ($N$ is \tcode{distance(i, j)}), worst case
 \bigoh{N^2}
 \\ \rowsep
@@ -2505,7 +2505,7 @@ [unord.req]
     \tcode{value_type} is \oldconcept{EmplaceConstructible} into \tcode{X} from \tcode{*i}.\br
     \effects\ Constructs an empty container with at least \tcode{n} buckets,
 using \tcode{hasher()} as the hash function and \tcode{key_equal()}
-as the key equality predicate, and inserts elements from \tcode{[i, j)}
+as the key equality predicate, and inserts elements from \range{i}{j}
 into it.
 &   Average case \bigoh{N} ($N$ is \tcode{distance(i, j)}), worst case
 \bigoh{N^2}
@@ -2518,7 +2518,7 @@ [unord.req]
     \effects\ Constructs an empty container with an unspecified number of
 buckets, using \tcode{hasher()} as the hash function and
 \tcode{key_equal()} as the key equality predicate, and inserts elements
-from \tcode{[i, j)} into it.
+from \range{i}{j} into it.
 &   Average case \bigoh{N} ($N$ is \tcode{distance(i, j)}), worst case
 \bigoh{N^2}
 \\ \rowsep
@@ -4746,8 +4746,8 @@ [forwardlist.ops]
 
 \pnum
 \effects
-Merges the two sorted ranges \tcode{[begin(), end())} and
-\tcode{[x.begin(), x.end())}. \tcode{x} is empty after the merge. If an
+Merges the two sorted ranges \range{begin()}{end()} and
+\range{x.begin()}{x.end()}. \tcode{x} is empty after the merge. If an
 exception is thrown other than by a comparison there are no effects.
 Pointers and references to the moved elements of \tcode{x} now refer to those same elements
 but as members of \tcode{*this}. Iterators referring to the moved elements will continue to
@@ -5416,7 +5416,7 @@ [list.ops]
 \pnum
 \complexity
 If the range
-\tcode{[first, last)}
+\range{first}{last}
 is not empty, exactly
 \tcode{(last - first) - 1}
 applications of the corresponding predicate,
@@ -5442,8 +5442,8 @@ [list.ops]
 
 \pnum
 \effects
-If \tcode{addressof(x) == this}, does nothing; otherwise, merges the two sorted ranges \tcode{[begin(),
-end())} and \tcode{[x.\brk{}begin(), x.end())}. The result is a range in which the elements
+If \tcode{addressof(x) == this}, does nothing; otherwise, merges the two sorted ranges \range{begin()}{end()}
+and \range{x.\brk{}begin()}{x.end()}. The result is a range in which the elements
 will be sorted in non-decreasing order according to the ordering defined by \tcode{comp}; that
 is, for every iterator \tcode{i}, in the range other than the first, the condition
 \tcode{comp(*i, *(i - 1))} will be \tcode{false}.
@@ -5454,7 +5454,7 @@ [list.ops]
 
 \pnum
 \remarks
-Stable\iref{algorithm.stable}. If \tcode{addressof(x) != this}, the range \tcode{[x.begin(), x.end())}
+Stable\iref{algorithm.stable}. If \tcode{addressof(x) != this}, the range \range{x.begin()}{x.end()}
 is empty after the merge.
 No elements are copied by this operation.
 
diff --git a/source/algorithms.tex b/source/algorithms.tex
index 20d2b5fc..ceeb6a3e 100644
--- a/source/algorithms.tex
+++ b/source/algorithms.tex
@@ -6713,7 +6713,7 @@ [equal.range]
 are partitioned with respect to the expressions
 \tcode{bool(invoke(comp, invoke(proj, e), value))} and
 \tcode{!bool(invoke(comp, value, invoke(proj, e)))}.
-Also, for all elements \tcode{e} of \tcode{[first, last)},
+Also, for all elements \tcode{e} of \range{first}{last},
 \tcode{bool(comp(e, value))} implies \tcode{!bool(comp(\brk{}value, e))}
 for the overloads in namespace \tcode{std}.
 
@@ -6777,7 +6777,7 @@ [binary.search]
 are partitioned with respect to the expressions
 \tcode{bool(invoke(comp, invoke(proj, e), value))} and
 \tcode{!bool(invoke(comp, value, invoke(proj, e)))}.
-Also, for all elements \tcode{e} of \tcode{[first, last)},
+Also, for all elements \tcode{e} of \range{first}{last},
 \tcode{bool(comp(e, value))} implies \tcode{!bool(comp(\brk{}value, e))}
 for the overloads in namespace \tcode{std}.
 
@@ -9921,7 +9921,7 @@ [adjacent.difference]
 \pnum
 For the overloads with an \tcode{ExecutionPolicy} and a non-empty range,
 performs \tcode{*result = *first}.
-Then, for every \tcode{d} in \tcode{[1, last - first - 1]},
+Then, for every \tcode{d} in \crange{1}{last - first - 1},
 performs \tcode{*(result + d) = binary_op(*(first + d), *(first + (d - 1)))}.
 
 \pnum
diff --git a/source/regex.tex b/source/regex.tex
index e47b609b..4b1c53e3 100644
--- a/source/regex.tex
+++ b/source/regex.tex
@@ -3256,7 +3256,7 @@ [re.regiter.incr]
 In all cases in which the call to \tcode{regex_search} returns \tcode{true},
 \tcode{match.prefix().first} shall be equal to the previous value of
 \tcode{match[0].second}, and for each index \tcode{i} in the half-open range
-\tcode{[0, match.size())} for which \tcode{match[i].matched} is \tcode{true},
+\range{0}{match.size()} for which \tcode{match[i].matched} is \tcode{true},
 \tcode{match.position(i)}
 shall return \tcode{distance(begin, match[i].\brk{}first)}.
 
-- 
2.17.1


From f9af90c258226366350aca28de1a6f937956f9ed Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Fri, 10 Mar 2017 14:45:02 +0100
Subject: [PATCH 02/20] [expr.mptr.oper] Add missing indentation in example
 code. [rejected upstream: 1529]

---
 source/expressions.tex | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/source/expressions.tex b/source/expressions.tex
index 5780eb7a..d2462b4b 100644
--- a/source/expressions.tex
+++ b/source/expressions.tex
@@ -5627,9 +5627,9 @@ [expr.mptr.oper]
 };
 void f()
 {
-const S cs;
-int S::* pm = &S::i;            // \tcode{pm} refers to \tcode{mutable} member \tcode{S::i}
-cs.*pm = 88;                    // error: \tcode{cs} is a const object
+  const S cs;
+  int S::* pm = &S::i;          // \tcode{pm} refers to \tcode{mutable} member \tcode{S::i}
+  cs.*pm = 88;                  // error: \tcode{cs} is a const object
 }
 \end{codeblock}
 \end{note}
-- 
2.17.1


From f299dc784a53906aa5f700c0540759fbaf60529f Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Sun, 26 Feb 2017 14:24:19 +0100
Subject: [PATCH 03/20] [some.where] Replace \term with \placeholder.

---
 source/expressions.tex | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/source/expressions.tex b/source/expressions.tex
index d2462b4b..a1b922de 100644
--- a/source/expressions.tex
+++ b/source/expressions.tex
@@ -3515,7 +3515,7 @@ [expr.typeid]
 \indextext{\idxcode{type_info}}%
 \indexlibraryglobal{type_info}%
 \tcode{const} \tcode{std::type_info}\iref{type.info} and dynamic type \tcode{const}
-\tcode{std::type_info} or \tcode{const} \term{name} where \term{name} is an
+\tcode{std::type_info} or \tcode{const} \placeholder{name} where \placeholder{name} is an
 \impldef{derived type for \tcode{typeid}} class publicly derived from
 \tcode{std::type_info} which preserves the behavior described
 in~\ref{type.info}.\footnote{The recommended name for such a class is
-- 
2.17.1


From f02ec86d7db824ca68c43ef43c41e0562f9e16cc Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Wed, 1 Feb 2017 03:39:27 +0100
Subject: [PATCH 04/20] Make references more precise.

---
 source/basic.tex        | 2 +-
 source/statements.tex   | 2 +-
 source/declarations.tex | 2 +-
 source/strings.tex      | 2 +-
 4 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/source/basic.tex b/source/basic.tex
index 07ec7cd8..ceffbee7 100644
--- a/source/basic.tex
+++ b/source/basic.tex
@@ -5110,7 +5110,7 @@ [basic.fundamental]
 called \defnx{arithmetic}{type!arithmetic} types.
 \indextext{\idxcode{numeric_limits}!specializations for arithmetic types}%
 Specializations of the standard library template
-\tcode{std::numeric_limits}\iref{support.limits} shall specify the
+\tcode{std::numeric_limits}\iref{numeric.limits} shall specify the
 maximum and minimum values of each arithmetic type for an
 implementation.
 
diff --git a/source/statements.tex b/source/statements.tex
index 98266a4d..d26ffd79 100644
--- a/source/statements.tex
+++ b/source/statements.tex
@@ -1043,7 +1043,7 @@ [stmt.ambig]
 of many examples.
 \begin{example}
 Assuming \tcode{T} is a
-\grammarterm{simple-type-specifier}\iref{dcl.type},
+\grammarterm{simple-type-specifier}\iref{dcl.type.simple},
 
 \begin{codeblock}
 T(a)->m = 7;        // expression-statement
diff --git a/source/declarations.tex b/source/declarations.tex
index 22e0824e..aaf732b9 100644
--- a/source/declarations.tex
+++ b/source/declarations.tex
@@ -8225,7 +8225,7 @@ [dcl.link]
 Linkage specifications nest. When linkage specifications nest, the
 innermost one determines the language linkage. A linkage specification
 does not establish a scope. A \grammarterm{linkage-specification} shall
-occur only in namespace scope\iref{basic.scope}. In a
+occur only in namespace scope\iref{basic.scope.namespace}. In a
 \grammarterm{linkage-specification}, the specified language linkage applies
 to the function types of all function declarators, function names with
 external linkage, and variable names with external linkage declared
diff --git a/source/strings.tex b/source/strings.tex
index 64e8af6a..d31d181c 100644
--- a/source/strings.tex
+++ b/source/strings.tex
@@ -1385,7 +1385,7 @@ [string.cons]
 \begin{itemdescr}
 \pnum
 \effects
-Move assigns as a sequence container\iref{container.requirements},
+Move assigns as a sequence container\iref{sequence.reqmts},
 except that iterators, pointers and references may be invalidated.
 
 \pnum
-- 
2.17.1


From 5d1a1bcb681e319432dbbdc56e3716a4e799a564 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Sat, 7 Jan 2017 01:59:05 +0100
Subject: [PATCH 05/20] [rand.req.eng] Omit superfluous dollar-math wrapping
 inside \bigoh. [rejected upstream: 1340]

---
 source/numerics.tex | 14 +++++++-------
 1 file changed, 7 insertions(+), 7 deletions(-)

diff --git a/source/numerics.tex b/source/numerics.tex
index 22ff2390..b0a0a98a 100644
--- a/source/numerics.tex
+++ b/source/numerics.tex
@@ -2290,21 +2290,21 @@ [rand.req.eng]
     with the same initial state
     as all other default-constructed engines
     of type \tcode{E}.
-  & \bigoh{$\text{size of state}$}
+  & \bigoh{\text{size of state}}
   \\ \rowsep
 \tcode{E(x)}
 \indextext{copy constructor!random number engine requirement}
   &
   & Creates an engine
     that compares equal to \tcode{x}.
-  & \bigoh{$\text{size of state}$}
+  & \bigoh{\text{size of state}}
   \\ \rowsep
 \tcode{E(s)}%
 \indextext{constructor!random number engine requirement}
   &
   & Creates an engine
       with initial state determined by \tcode{s}.
-  & \bigoh{$\text{size of state}$}
+  & \bigoh{\text{size of state}}
   \\ \rowsep
 \tcode{E(q)}%
 \indextext{constructor!random number engine requirement}\footnote{  This constructor
@@ -2383,13 +2383,13 @@ [rand.req.eng]
     returns \tcode{true}
       if $S_x = S_y$;
     else returns \tcode{false}.
-  & \bigoh{$\text{size of state}$}
+  & \bigoh{\text{size of state}}
   \\ \rowsep
 \tcode{x != y}%
 \indextext{\idxcode{operator"!=}!random number engine requirement}
   & \tcode{bool}
   & \tcode{!(x == y)}.
-  & \bigoh{$\text{size of state}$}
+  & \bigoh{\text{size of state}}
   \\ \rowsep
 \tcode{os << x}%
 \indextext{\idxcode{operator<<}!random number engine requirement}
@@ -2405,7 +2405,7 @@ [rand.req.eng]
     by one or more space characters.
 
     \ensures The \tcode{os.}\textit{fmtflags} and fill character are unchanged.
-  & \bigoh{$\text{size of state}$}
+  & \bigoh{\text{size of state}}
   \\ \rowsep
 \tcode{is >> v}%
 \indextext{\idxcode{operator>>}!random number engine requirement}
@@ -2436,7 +2436,7 @@ [rand.req.eng]
     were respectively the same as those of \tcode{is}.
 
     \ensures The \tcode{is.}\textit{fmtflags} are unchanged.
-  & \bigoh{$\text{size of state}$}
+  & \bigoh{\text{size of state}}
   \\
 \end{libreqtab4d}
 
-- 
2.17.1


From 912cb4db90d4d9b24f82aa9f13f6fa3d3f122525 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Mon, 23 Jan 2017 06:58:26 +0100
Subject: [PATCH 06/20] Reduce excessive indentation of comments. Helps layout
 on smaller (e.g. half-screen) window sizes.

---
 source/basic.tex       | 30 +++++++++++++++---------------
 source/expressions.tex | 18 +++++++++---------
 source/templates.tex   | 16 ++++++++--------
 3 files changed, 32 insertions(+), 32 deletions(-)

diff --git a/source/basic.tex b/source/basic.tex
index ceffbee7..ec488ece 100644
--- a/source/basic.tex
+++ b/source/basic.tex
@@ -241,7 +241,7 @@ [basic.def]
 #include <string>
 
 struct C {
-  std::string s;                // \tcode{std::string} is the standard library class\iref{string.classes}
+  std::string s;    // \tcode{std::string} is the standard library class\iref{string.classes}
 };
 
 int main() {
@@ -1793,8 +1793,8 @@ [basic.lookup.argdep]
 
 void g() {
   N::S s;
-  f(s);             // OK: calls \tcode{N::f}
-  (f)(s);           // error: \tcode{N::f} not considered; parentheses prevent argument-dependent lookup
+  f(s);     // OK: calls \tcode{N::f}
+  (f)(s);   // error: \tcode{N::f} not considered; parentheses prevent argument-dependent lookup
 }
 \end{codeblock}
 \end{example}
@@ -2253,23 +2253,23 @@ [namespace.qual]
 
 void h()
 {
-  AB::g();          // \tcode{g} is declared directly in \tcode{AB}, therefore \tcode{S} is $\{ \tcode{AB::g()} \}$ and \tcode{AB::g()} is chosen
+  AB::g();      // \tcode{g} is declared directly in \tcode{AB}, therefore \tcode{S} is $\{ \tcode{AB::g()} \}$ and \tcode{AB::g()} is chosen
 
-  AB::f(1);         // \tcode{f} is not declared directly in \tcode{AB} so the rules are applied recursively to \tcode{A} and \tcode{B};
-                    // namespace \tcode{Y} is not searched and \tcode{Y::f(float)} is not considered;
-                    // \tcode{S} is $\{ \tcode{A::f(int)}, \tcode{B::f(char)} \}$ and overload resolution chooses \tcode{A::f(int)}
+  AB::f(1);     // \tcode{f} is not declared directly in \tcode{AB} so the rules are applied recursively to \tcode{A} and \tcode{B};
+                // namespace \tcode{Y} is not searched and \tcode{Y::f(float)} is not considered;
+                // \tcode{S} is $\{ \tcode{A::f(int)}, \tcode{B::f(char)} \}$ and overload resolution chooses \tcode{A::f(int)}
 
-  AB::f('c');       // as above but resolution chooses \tcode{B::f(char)}
+  AB::f('c');   // as above but resolution chooses \tcode{B::f(char)}
 
-  AB::x++;          // \tcode{x} is not declared directly in \tcode{AB}, and is not declared in \tcode{A} or \tcode{B}, so the rules
-                    // are applied recursively to \tcode{Y} and \tcode{Z}, \tcode{S} is $\{ \}$ so the program is ill-formed
+  AB::x++;      // \tcode{x} is not declared directly in \tcode{AB}, and is not declared in \tcode{A} or \tcode{B}, so the rules
+                // are applied recursively to \tcode{Y} and \tcode{Z}, \tcode{S} is $\{ \}$ so the program is ill-formed
 
-  AB::i++;          // \tcode{i} is not declared directly in \tcode{AB} so the rules are applied recursively to \tcode{A} and \tcode{B},
-                    // \tcode{S} is $\{ \tcode{A::i}, \tcode{B::i} \}$ so the use is ambiguous and the program is ill-formed
+  AB::i++;      // \tcode{i} is not declared directly in \tcode{AB} so the rules are applied recursively to \tcode{A} and \tcode{B},
+                // \tcode{S} is $\{ \tcode{A::i}, \tcode{B::i} \}$ so the use is ambiguous and the program is ill-formed
 
-  AB::h(16.8);      // \tcode{h} is not declared directly in \tcode{AB} and not declared directly in \tcode{A} or \tcode{B} so the rules
-                    // are applied recursively to \tcode{Y} and \tcode{Z}, \tcode{S} is $\{ \tcode{Y::h(int)}, \tcode{Z::h(double)} \}$ and
-                    // overload resolution chooses \tcode{Z::h(double)}
+  AB::h(16.8);  // \tcode{h} is not declared directly in \tcode{AB} and not declared directly in \tcode{A} or \tcode{B} so the rules
+                // are applied recursively to \tcode{Y} and \tcode{Z}, \tcode{S} is $\{ \tcode{Y::h(int)}, \tcode{Z::h(double)} \}$ and
+                // overload resolution chooses \tcode{Z::h(double)}
 }
 \end{codeblock}
 \end{example}
diff --git a/source/expressions.tex b/source/expressions.tex
index a1b922de..a5df85d9 100644
--- a/source/expressions.tex
+++ b/source/expressions.tex
@@ -2171,8 +2171,8 @@ [expr.prim.lambda.capture]
   auto m1 = [=]{
     int const M = 30;
     auto m2 = [i]{
-      int x[N][M];              // OK: \tcode{N} and \tcode{M} are not odr-used
-      x[0][0] = i;              // OK: \tcode{i} is explicitly captured by \tcode{m2} and implicitly captured by \tcode{m1}
+      int x[N][M];          // OK: \tcode{N} and \tcode{M} are not odr-used
+      x[0][0] = i;          // OK: \tcode{i} is explicitly captured by \tcode{m2} and implicitly captured by \tcode{m1}
     };
   };
   struct s1 {
@@ -2181,12 +2181,12 @@ [expr.prim.lambda.capture]
       int m = n*n;
       int j = 40;
       auto m3 = [this,m] {
-        auto m4 = [&,j] {       // error: \tcode{j} not odr-usable due to intervening lambda \tcode{m3}
-          int x = n;            // error: \tcode{n} is odr-used but not odr-usable due to intervening lambda \tcode{m3}
-          x += m;               // OK: \tcode{m} implicitly captured by \tcode{m4} and explicitly captured by \tcode{m3}
-          x += i;               // error: \tcode{i} is odr-used but not odr-usable
-                                // due to intervening function and class scopes
-          x += f;               // OK: \tcode{this} captured implicitly by \tcode{m4} and explicitly by \tcode{m3}
+        auto m4 = [&,j] {   // error: \tcode{j} not odr-usable due to intervening lambda \tcode{m3}
+          int x = n;        // error: \tcode{n} is odr-used but not odr-usable due to intervening lambda \tcode{m3}
+          x += m;           // OK: \tcode{m} implicitly captured by \tcode{m4} and explicitly captured by \tcode{m3}
+          x += i;           // error: \tcode{i} is odr-used but not odr-usable
+                            // due to intervening function and class scopes
+          x += f;           // OK: \tcode{this} captured implicitly by \tcode{m4} and explicitly by \tcode{m3}
         };
       };
     }
@@ -2204,7 +2204,7 @@ [expr.prim.lambda.capture]
   }
   auto g() {
     return [] {
-      return [*this] { };       // error: \tcode{*this} not captured by outer \grammarterm{lambda-expression}
+      return [*this] { };   // error: \tcode{*this} not captured by outer \grammarterm{lambda-expression}
     }();
   }
 };
diff --git a/source/templates.tex b/source/templates.tex
index 8db57d63..520a44d3 100644
--- a/source/templates.tex
+++ b/source/templates.tex
@@ -1403,11 +1403,11 @@ [temp.arg.template]
 template <class T1, int N> struct D;
 template <class T1, class T2, int N = 17> struct E;
 
-eval<A<int>> eA;                // OK: matches partial specialization of \tcode{eval}
-eval<B<int, float>> eB;         // OK: matches partial specialization of \tcode{eval}
-eval<C<17>> eC;                 // error: \tcode{C} does not match \tcode{TT} in partial specialization
-eval<D<int, 17>> eD;            // error: \tcode{D} does not match \tcode{TT} in partial specialization
-eval<E<int, float>> eE;         // error: \tcode{E} does not match \tcode{TT} in partial specialization
+eval<A<int>> eA;            // OK: matches partial specialization of \tcode{eval}
+eval<B<int, float>> eB;     // OK: matches partial specialization of \tcode{eval}
+eval<C<17>> eC;             // error: \tcode{C} does not match \tcode{TT} in partial specialization
+eval<D<int, 17>> eD;        // error: \tcode{D} does not match \tcode{TT} in partial specialization
+eval<E<int, float>> eE;     // error: \tcode{E} does not match \tcode{TT} in partial specialization
 \end{codeblock}
 \end{example}
 \begin{example}
@@ -5301,9 +5301,9 @@ [temp.dep.type]
   int g() { return m; }         // finds \tcode{A::m} in the template definition context
 };
 
-template int C<B>::f();         // error: finds both \tcode{A::m} and \tcode{B::m}
-template int C<B>::g();         // OK: transformation to class member access syntax
-                                // does not occur in the template definition context; see~\ref{class.mfct.non-static}
+template int C<B>::f();     // error: finds both \tcode{A::m} and \tcode{B::m}
+template int C<B>::g();     // OK: transformation to class member access syntax
+                            // does not occur in the template definition context; see~\ref{class.mfct.non-static}
 \end{codeblock}
 \end{example}
 
-- 
2.17.1


From 2501dfa4392ed78b99929d60c1b727ecabcb7a4e Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Wed, 1 Feb 2017 03:24:29 +0100
Subject: [PATCH 07/20] Add and use new link macros.

---
 source/macros.tex        |  48 ++++
 source/intro.tex         |  23 +-
 source/lex.tex           |  40 +--
 source/basic.tex         | 278 ++++++++++----------
 source/expressions.tex   | 555 ++++++++++++++++++++-------------------
 source/statements.tex    |  68 ++---
 source/declarations.tex  | 168 ++++++------
 source/classes.tex       |  93 ++++---
 source/overloading.tex   |  98 +++----
 source/templates.tex     | 223 ++++++++--------
 source/exceptions.tex    |  82 +++---
 source/preprocessor.tex  |  18 +-
 source/lib-intro.tex     | 123 ++++-----
 source/support.tex       | 111 ++++----
 source/diagnostics.tex   |   8 +-
 source/utilities.tex     | 346 +++++++++++++++---------
 source/strings.tex       |  44 ++--
 source/containers.tex    |  68 ++---
 source/iterators.tex     |  30 ++-
 source/ranges.tex        |   2 +-
 source/algorithms.tex    |   4 +-
 source/numerics.tex      | 173 +++++++-----
 source/locales.tex       |  19 +-
 source/iostreams.tex     | 196 ++++++++------
 source/regex.tex         |  63 +++--
 source/atomics.tex       |   8 +-
 source/threads.tex       |  63 ++---
 source/grammar.tex       |   8 +-
 source/limits.tex        |   2 +-
 source/compatibility.tex |  14 +-
 source/future.tex        |   8 +-
 31 files changed, 1618 insertions(+), 1366 deletions(-)

diff --git a/source/macros.tex b/source/macros.tex
index 08653422..fdf8ad6a 100644
--- a/source/macros.tex
+++ b/source/macros.tex
@@ -634,3 +634,51 @@ [temp.arg.type]
 }
 \newcommand{\defncontext}[1]{\textlangle#1\textrangle}
 \newenvironment{defnote}{\addtocounter{termnote}{1}\noteintro{Note \thetermnote{} to entry}}{\noteoutro{note}\space}
+
+
+%%-------------------------------------------------
+%% cxxdraft-htmlgen macros
+
+\newcommand{\link}[2]{#1~(#2)}
+	% Link to section.
+	%   arg 0: link text
+	%   arg 1: section abbreviation
+
+\newcommand{\linkx}[3]{#1~(#3)}
+	% Link to indexed position.
+	%   arg 0: link text
+	%   arg 1: generalindex key
+	%   arg 2: section abbreviation
+
+\newcommand{\liblinkx}[3]{#1~(#3)}
+	% Link to indexed position.
+	%   arg 0: link text
+	%   arg 1: libraryindex key
+	%   arg 2: section abbreviation
+
+\newcommand{\deflinkx}[3]{#1~(#3)}
+	% Link to definition.
+	%   arg 0: link text
+	%   arg 1: definition key
+	%   arg 2: section abbreviation
+
+\newcommand{\deflink}[2]{\deflinkx{#1}{#1}{#2}}
+	% Convenience macro for when the link
+	% text is also the definition key.
+
+\newcommand{\weblink}[2]{#1}
+	%   arg 0: link text
+	%   arg 1: URL
+
+\newcommand{\indexedspan}[2]{#1#2}
+	%   arg 0: text
+	%   arg 1: indices (zero or more \index commands)
+
+\newcommand{\libentity}[1]{\indexedspan{\tcode{#1}}{\indexlibrary{\idxcode{#1}}}}
+	%   arg 0: entity name
+
+\newcommand{\libmember}[2]{\indexedspan{\tcode{#1}}{\indexlibrarymember{#1}{#2}}}
+	%   arg 0: member name
+	%   arg 1: parent name
+
+\newenvironment{indexed}[1]{}{}
diff --git a/source/intro.tex b/source/intro.tex
index 60bee58c..28275f25 100644
--- a/source/intro.tex
+++ b/source/intro.tex
@@ -122,8 +122,8 @@ [intro.defs]
 \begin{defnote}
 Only objects of scalar type can be accessed.
 Attempts to read or modify an object of class type
-typically invoke a constructor\iref{class.ctor}
-or assignment operator\iref{class.copy.assign};
+typically invoke a \deflink{constructor}{class.ctor}
+or \link{assignment operator}{class.copy.assign};
 such invocations do not themselves constitute accesses,
 although they may involve accesses of scalar subobjects.
 \end{defnote}
@@ -143,7 +143,7 @@ [intro.defs]
 \indexdefn{argument}%
 \indexdefn{argument!throw expression}%
 \definition{argument}{defns.argument.throw}
-\defncontext{throw expression} operand of \tcode{throw}\iref{expr.throw}
+\defncontext{throw expression} operand of \link{\tcode{throw}}{expr.throw}
 
 \indexdefn{argument}%
 \indexdefn{argument!template instantiation}%
@@ -186,10 +186,11 @@ [intro.defs]
 glvalue refers
 
 \begin{example}
-If a pointer\iref{dcl.ptr} \tcode{p} whose static type is ``pointer to
-class \tcode{B}'' is pointing to an object of class \tcode{D}, derived
-from \tcode{B}\iref{class.derived}, the dynamic type of the
-expression \tcode{*p} is ``\tcode{D}''. References\iref{dcl.ref} are
+If a \link{pointer}{dcl.ptr} \tcode{p} whose static type is ``pointer to
+class \tcode{B}'' is pointing to an object of class \tcode{D},
+\link{derived}{class.derived}
+from \tcode{B}, the dynamic type of the
+expression \tcode{*p} is ``\tcode{D}''. \link{References}{dcl.ref} are
 treated similarly.
 \end{example}
 
@@ -199,7 +200,7 @@ [intro.defs]
 
 \indexdefn{program!ill-formed}%
 \definition{ill-formed program}{defns.ill.formed}
-program that is not well-formed\iref{defns.well.formed}
+program that is not \link{well-formed}{defns.well.formed}
 
 \indexdefn{behavior!implementation-defined}%
 \definition{implementation-defined behavior}{defns.impl.defined}
@@ -371,7 +372,7 @@ [intro.defs]
 \indexdefn{program!well-formed}%
 \definition{well-formed program}{defns.well.formed}
 \Cpp{}  program constructed according to the syntax rules, diagnosable
-semantic rules, and the one-definition rule\iref{basic.def.odr}%
+semantic rules, and the \link{one-definition rule}{basic.def.odr}%
 \indextext{definitions|)}
 
 \rSec0[intro]{General principles}
@@ -446,7 +447,7 @@ [intro.compliance]
 \indextext{conformance requirements!classes}%
 \indextext{conformance requirements!class templates}%
 For classes and class templates, the library Clauses specify partial
-definitions. Private members\iref{class.access} are not
+definitions. \link{Private members}{class.access} are not
 specified, but each implementation shall supply them to complete the
 definitions according to the description in the library Clauses.
 
@@ -464,7 +465,7 @@ [intro.compliance]
 
 \pnum
 The templates, classes, functions, and objects in the library have
-external linkage\iref{basic.link}. The implementation provides
+external \link{linkage}{basic.link}. The implementation provides
 definitions for standard library entities, as necessary, while combining
 translation units to form a complete \Cpp{}  program\iref{lex.phases}.%
 \indextext{conformance requirements!library|)}
diff --git a/source/lex.tex b/source/lex.tex
index 6fa15f85..203d37a1 100644
--- a/source/lex.tex
+++ b/source/lex.tex
@@ -29,10 +29,10 @@ [lex.separate]
 \indextext{compilation!separate|(}%
 The text of the program is kept in units called
 \defnx{source files}{source file} in this document.
-A source file together with all the headers\iref{headers}
-and source files included\iref{cpp.include} via the preprocessing
+A source file together with all the \link{headers}{headers}
+and source files \link{included}{cpp.include} via the preprocessing
 directive \tcode{\#include}, less any source lines skipped by any of the
-conditional inclusion\iref{cpp.cond} preprocessing directives, is
+\link{conditional inclusion}{cpp.cond} preprocessing directives, is
 called a \defn{translation unit}.
 \begin{note}
 A \Cpp{} program need not all be translated at the same time.
@@ -47,8 +47,8 @@ [lex.separate]
 calls to functions whose identifiers have external or module linkage,
 manipulation of objects whose identifiers have external or module linkage, or
 manipulation of data files. Translation units can be separately
-translated and then later linked to produce an executable
-program\iref{basic.link}.
+translated and then later \link{linked}{basic.link} to produce an executable
+program.
 \end{note}
 \indextext{compilation!separate|)}
 
@@ -71,8 +71,8 @@ [lex.phases]
 The set of physical source file characters accepted is \impldef{physical source file
 characters}.
 Any
-source file character not in the basic source character
-set\iref{lex.charset} is replaced by the
+source file character not in the
+\deflink{basic source character set}{lex.charset} is replaced by the
 \indextext{universal character name}\grammarterm{universal-character-name} that
 designates that character. An implementation may use any internal
 encoding, so long as an actual extended character encountered in the
@@ -97,8 +97,8 @@ [lex.phases]
 shall be processed as if an additional new-line character were appended
 to the file.
 
-\item The source file is decomposed into preprocessing
-tokens\iref{lex.pptoken} and sequences of white-space characters
+\item The source file is decomposed into \link{preprocessing
+tokens}{lex.pptoken} and sequences of white-space characters
 (including comments). A source file shall not end in a partial
 preprocessing token or in a partial comment.\footnote{A partial preprocessing
 token would arise from a source file
@@ -121,8 +121,8 @@ [lex.phases]
 \item Preprocessing directives are executed, macro invocations are
 expanded, and \tcode{_Pragma} unary operator expressions are executed.
 If a character sequence that matches the syntax of a
-\grammarterm{universal-character-name} is produced by token
-concatenation\iref{cpp.concat}, the behavior is undefined. A
+\grammarterm{universal-character-name} is produced by \link{token
+concatenation}{cpp.concat}, the behavior is undefined. A
 \tcode{\#include} preprocessing directive causes the named header or
 source file to be processed from phase 1 through phase 4, recursively.
 All preprocessing directives are then deleted.
@@ -311,7 +311,7 @@ [lex.pptoken]
 \end{bnf}
 
 \pnum
-Each preprocessing token that is converted to a token\iref{lex.token}
+Each preprocessing token that is converted to a \link{token}{lex.token}
 shall have the lexical form of a keyword, an identifier, a literal,
 or an operator or punctuator.
 
@@ -329,7 +329,7 @@ [lex.pptoken]
 \indextext{space!white}%
 white space;
 \indextext{comment}%
-this consists of comments\iref{lex.comment}, or white-space
+this consists of \link{comments}{lex.comment}, or white-space
 characters (space, horizontal tab, new-line, vertical tab, and
 form-feed), or both. As described in \ref{cpp}, in certain
 circumstances during translation phase 4, white space (or the absence
@@ -432,7 +432,7 @@ [lex.digraph]
 
 \pnum
 In all respects of the language, each alternative token behaves the
-same, respectively, as its primary token, except for its spelling.\footnote{Thus the ``stringized'' values\iref{cpp.stringize} of
+same, respectively, as its primary token, except for its spelling.\footnote{Thus the \link{``stringized''}{cpp.stringize} values of
 \tcode{[} and \tcode{<:} will be different, maintaining the source
 spelling, but the tokens can otherwise be freely interchanged. }
 The set of alternative tokens is defined in
@@ -914,7 +914,7 @@ [lex.operators]
 \end{bnf}
 
 Each \grammarterm{operator-or-punctuator} is converted to a single token
-in translation phase 7\iref{lex.phases}.%
+in \link{translation phase 7}{lex.phases}.%
 \indextext{punctuator|)}%
 \indextext{operator|)}
 
@@ -1894,12 +1894,12 @@ [lex.ext]
 characters that could match that non-terminal.
 
 \pnum
-A \grammarterm{user-defined-literal} is treated as a call to a literal operator or
-literal operator template\iref{over.literal}. To determine the form of this call for a
+A \grammarterm{user-defined-literal} is treated as a call to a \deflinkx{literal operator}{literal!operator}{over.literal} or
+\deflinkx{literal operator template}{literal!operator!template}{over.literal}. To determine the form of this call for a
 given \grammarterm{user-defined-literal} \placeholder{L} with \grammarterm{ud-suffix} \placeholder{X},
 the \grammarterm{literal-operator-id} whose literal suffix identifier is \placeholder{X} is
-looked up in the context of \placeholder{L} using the rules for unqualified name
-lookup\iref{basic.lookup.unqual}. Let \placeholder{S} be the set of declarations found by
+looked up in the context of \placeholder{L} using the rules for \link{unqualified name
+lookup}{basic.lookup.unqual}. Let \placeholder{S} be the set of declarations found by
 this lookup. \placeholder{S} shall not be empty.
 
 \pnum
@@ -1974,7 +1974,7 @@ [lex.ext]
 \pnum
 If \placeholder{L} is a \grammarterm{user-defined-character-literal}, let \placeholder{ch} be the
 literal without its \grammarterm{ud-suffix}.
-\placeholder{S} shall contain a literal operator\iref{over.literal} whose only parameter has
+\placeholder{S} shall contain a \deflink{literal operator}{over.literal} whose only parameter has
 the type of \placeholder{ch} and the
 literal \placeholder{L} is treated as a call
 of the form
diff --git a/source/basic.tex b/source/basic.tex
index ec488ece..eb44d8db 100644
--- a/source/basic.tex
+++ b/source/basic.tex
@@ -50,7 +50,7 @@ [basic.pre]
 \pnum
 Every name that denotes an entity is introduced by a
 \defn{declaration}. Every name that denotes a label is introduced
-either by a \tcode{goto} statement\iref{stmt.goto} or a
+either by a \link{\tcode{goto} statement}{stmt.goto} or a
 \grammarterm{labeled-statement}\iref{stmt.label}.
 
 \pnum
@@ -61,10 +61,10 @@ [basic.pre]
 
 \pnum
 A \defnadj{local}{entity} is a variable with
-automatic storage duration\iref{basic.stc.auto},
-a structured binding\iref{dcl.struct.bind}
+\link{automatic storage duration}{basic.stc.auto},
+a \link{structured binding}{dcl.struct.bind}
 whose corresponding variable is such an entity,
-or the \tcode{*this} object\iref{expr.prim.this}.
+or the \link{\tcode{*this} object}{expr.prim.this}.
 
 \pnum
 Some names denote types or templates. In general,
@@ -92,7 +92,7 @@ [basic.pre]
 \indextext{linkage}%
 A name used in more than one translation unit can potentially
 refer to the same entity in these translation units depending on the
-linkage\iref{basic.link} of the name specified in each
+\link{linkage}{basic.link} of the name specified in each
 translation unit.
 
 \rSec1[basic.def]{Declarations and definitions}
@@ -101,7 +101,7 @@ [basic.def]
 \indextext{declaration!definition versus}%
 \indextext{declaration}%
 \indextext{declaration!name}%
-A declaration\iref{dcl.dcl} may introduce
+A \link{declaration}{dcl.dcl} may introduce
 one or more names into a translation
 unit or redeclare names introduced by previous declarations.
 If so, the
@@ -111,7 +111,7 @@ [basic.def]
 \item a static assertion\iref{dcl.pre},
 \item controlling template instantiation\iref{temp.explicit},
 \item guiding template argument deduction for constructors\iref{temp.deduct.guide},
-\item use of attributes\iref{dcl.attr}, and
+\item use of \link{attributes}{dcl.attr}, and
 \item nothing (in the case of an \grammarterm{empty-declaration}).
 \end{itemize}
 
@@ -128,7 +128,7 @@ [basic.def]
 it contains
 the
 \indextext{declaration!\idxcode{extern}}%
-\tcode{extern} specifier\iref{dcl.stc} or a
+\linkx{\tcode{extern}}{\idxcode{extern}}{dcl.stc} specifier or a
 \grammarterm{linkage-specification}\footnote{Appearing inside the brace-enclosed
 \grammarterm{declaration-seq} in a \grammarterm{linkage-specification} does
 not affect whether a declaration is a definition.}\iref{dcl.link}
@@ -163,7 +163,7 @@ [basic.def]
 \item
 it is a
 \indextext{declaration!\idxcode{typedef}}%
-\tcode{typedef} declaration\iref{dcl.typedef},
+\link{\tcode{typedef}}{dcl.typedef} declaration,
 \item it is
 an \grammarterm{alias-declaration}\iref{dcl.typedef},
 \item it is
@@ -191,7 +191,7 @@ [basic.def]
 \item it is
 an explicit instantiation declaration\iref{temp.explicit}, or
 \item it is
-an explicit specialization\iref{temp.expl.spec} whose
+an \link{explicit specialization}{temp.expl.spec} whose
 \grammarterm{declaration} is not a definition.
 \end{itemize}
 A declaration is said to be a \defn{definition} of each entity that it defines.
@@ -233,7 +233,7 @@ [basic.def]
 default constructor\iref{class.default.ctor},
 copy constructor, move constructor\iref{class.copy.ctor},
 copy assignment operator, move assignment operator\iref{class.copy.assign},
-or destructor\iref{class.dtor} member functions.
+or \link{destructor}{class.dtor} member functions.
 \end{note}
 \begin{example}
 Given
@@ -278,7 +278,7 @@ [basic.def]
 In the definition of an object,
 the type of that object shall not be
 an incomplete type\iref{basic.types},
-an abstract class type\iref{class.abstract}, or
+an \link{abstract class type}{class.abstract}, or
 a (possibly multi-dimensional) array thereof.
 
 \indextext{object!definition}%
@@ -306,26 +306,24 @@ [basic.def.odr]
 \item If $E$ is an
 \grammarterm{id-expression}\iref{expr.prim.id}, the set
 contains only $E$.
-\item If $E$ is a subscripting operation\iref{expr.sub} with
+\item If $E$ is a \link{subscripting}{expr.sub} operation with
 an array operand, the set contains the potential results of that operand.
-\item If $E$ is a class member access
-expression\iref{expr.ref} of the form
+\item If $E$ is a \link{class member access}{expr.ref} expression of the form
 $E_1$ \tcode{.} \opt{\tcode{template}} $E_2$
 naming a non-static data member,
 the set contains the potential results of $E_1$.
 \item If $E$ is a class member access expression
 naming a static data member,
 the set contains the \grammarterm{id-expression} designating the data member.
-\item If $E$ is a pointer-to-member
-expression\iref{expr.mptr.oper} of the form
+\item If $E$ is a \link{pointer-to-member expression}{expr.mptr.oper} of the form
 $E_1$ \tcode{.*} $E_2$,
 the set contains the potential results of $E_1$.
 \item If $E$ has the form \tcode{($E_1$)}, the set contains the
 potential results of $E_1$.
-\item If $E$ is a glvalue conditional
-expression\iref{expr.cond}, the set is the union of the sets of
+\item If $E$ is a glvalue \link{conditional expression}{expr.cond},
+the set is the union of the sets of
 potential results of the second and third operands.
-\item If $E$ is a comma expression\iref{expr.comma}, the set
+\item If $E$ is a \link{comma expression}{expr.comma}, the set
 contains the potential results of the right operand.
 \item Otherwise, the set is empty.
 \end{itemize}
@@ -434,12 +432,12 @@ [basic.def.odr]
 copy-assignment or move-assignment function for another class as specified
 in~\ref{class.copy.assign}.
 A constructor for a class is odr-used as specified
-in~\ref{dcl.init}. A destructor for a class is odr-used if it is potentially
-invoked\iref{class.dtor}.
+in~\ref{dcl.init}. A destructor for a class is odr-used if it is
+\deflink{potentially invoked}{class.dtor}.
 
 \pnum
-A local entity\iref{basic.pre}
-is \defn{odr-usable} in a declarative region\iref{basic.scope.declarative} if:
+A \deflinkx{local entity}{entity!local}{basic.pre}
+is \defn{odr-usable} in a \deflink{declarative region}{basic.scope.declarative} if:
 \begin{itemize}
 \item either the local entity is not \tcode{*this}, or
 an enclosing class or non-lambda function parameter scope exists and,
@@ -482,7 +480,7 @@ [basic.def.odr]
 \pnum
 Every program shall contain exactly one definition of every non-inline
 function or variable that is odr-used in that program
-outside of a discarded statement\iref{stmt.if}; no diagnostic required.
+outside of a \deflink{discarded statement}{stmt.if}; no diagnostic required.
 The definition can appear explicitly in the program, it can be found in
 the standard or a user-defined library, or (when appropriate) it is
 implicitly defined (see~\ref{class.default.ctor}, \ref{class.copy.ctor},
@@ -530,9 +528,9 @@ [basic.def.odr]
 describe in which contexts complete class types are required. A class
 type \tcode{T} must be complete if:
 \begin{itemize}
-\item an object of type \tcode{T} is defined\iref{basic.def}, or
-\item a non-static class data member of type \tcode{T} is
-declared\iref{class.mem}, or
+\item an object of type \tcode{T} is \link{defined}{basic.def}, or
+\item a non-static class \deflink{data member}{class.mem} of
+type \tcode{T} is declared, or
 \item \tcode{T} is used as the allocated type or array element type in a
 \grammarterm{new-expression}\iref{expr.new}, or
 \item an lvalue-to-rvalue conversion is applied to
@@ -543,21 +541,21 @@ [basic.def.odr]
 \ref{expr.dynamic.cast}, \ref{expr.static.cast}, \ref{expr.cast}), or
 \item an expression that is not a null pointer constant, and has type
 other than \cv{}~\tcode{void*}, is converted to the type pointer to \tcode{T}
-or reference to \tcode{T} using a standard conversion\iref{conv},
-a \tcode{dynamic_cast}\iref{expr.dynamic.cast} or
-a \tcode{static_cast}\iref{expr.static.cast}, or
-\item a class member access operator is applied to an expression of type
-\tcode{T}\iref{expr.ref}, or
-\item the \tcode{typeid} operator\iref{expr.typeid} or the
-\tcode{sizeof} operator\iref{expr.sizeof} is applied to an operand of
+or reference to \tcode{T} using a \link{standard conversion}{conv},
+a \link{\tcode{dynamic_cast}}{expr.dynamic.cast} or
+a \link{\tcode{static_cast}}{expr.static.cast}, or
+\item a \link{class member access}{expr.ref} operator is applied to an expression of type
+\tcode{T}, or
+\item the \link{\tcode{typeid} operator}{expr.typeid} or the
+\link{\tcode{sizeof} operator}{expr.sizeof} is applied to an operand of
 type \tcode{T}, or
 \item a function with a return type or argument type of type \tcode{T}
-is defined\iref{basic.def} or called\iref{expr.call}, or
+is defined\iref{basic.def} or \link{called}{expr.call}, or
 \item a class with a base class of type \tcode{T} is
 defined\iref{class.derived}, or
-\item an lvalue of type \tcode{T} is assigned to\iref{expr.ass}, or
+\item an lvalue of type \tcode{T} is \link{assigned to}{expr.ass}, or
 \item the type \tcode{T} is the subject of an
-\tcode{alignof} expression\iref{expr.alignof}, or
+\link{\tcode{alignof} expression}{expr.alignof}, or
 \item an \grammarterm{exception-declaration} has type \tcode{T}, reference to
 \tcode{T}, or pointer to \tcode{T}\iref{except.handle}.
 \end{itemize}
@@ -599,7 +597,7 @@ [basic.def.odr]
 a non-volatile const object with internal or no linkage if the object
 \begin{itemize}
 \item has the same literal type in all definitions of \tcode{D},
-\item is initialized with a constant expression\iref{expr.const},
+\item is initialized with a \link{constant expression}{expr.const},
 \item is not odr-used in any definition of \tcode{D}, and
 \item has the same value in all definitions of \tcode{D},
 \end{itemize}
@@ -793,7 +791,7 @@ [basic.scope.declarative]
 \pnum
 The names declared by a declaration are introduced into the scope in
 which the declaration occurs, except that the presence of a
-\tcode{friend} specifier\iref{class.friend}, certain uses of the
+\link{\tcode{friend} specifier}{class.friend}, certain uses of the
 \grammarterm{elaborated-type-specifier}\iref{dcl.type.elab}, and
 \grammarterm{using-directive}{s}\iref{namespace.udir} alter this general
 behavior.
@@ -822,7 +820,7 @@ [basic.scope.declarative]
 a name is introduced, which is not necessarily the same as the region in
 which the declaration occurs. In particular,
 \grammarterm{elaborated-type-specifier}{s}\iref{dcl.type.elab} and
-friend declarations\iref{class.friend} may introduce a (possibly not
+\link{friend declarations}{class.friend} may introduce a (possibly not
 visible) name into an enclosing namespace; these restrictions apply to
 that region. Local extern declarations\iref{basic.link} may introduce
 a name into the declarative region where the declaration appears and
@@ -1073,7 +1071,7 @@ [basic.funscope]
 
 \pnum
 \indextext{label!scope of}%
-Labels\iref{stmt.label} have \defnx{function scope}{scope!function} and
+\link{Labels}{stmt.label} have \defnx{function scope}{scope!function} and
 may be used anywhere in the function in which they are declared. Only
 labels have function scope.
 
@@ -1087,8 +1085,8 @@ [basic.scope.namespace]
 namespace, and names introduced by these declarations into the
 declarative region of the namespace are said to be \defn{member
 names} of the namespace. A namespace member name has namespace scope.
-Its potential scope includes its namespace from the name's point of
-declaration\iref{basic.scope.pdecl} onwards; and for each
+Its potential scope includes its namespace from the name's \link{point of
+declaration}{basic.scope.pdecl} onwards; and for each
 \grammarterm{using-directive}\iref{namespace.udir} that nominates the
 member's namespace, the member's potential scope includes that portion
 of the potential scope of the \grammarterm{using-directive} that follows
@@ -1121,7 +1119,7 @@ [basic.scope.namespace]
 \end{example}
 
 \pnum
-If a translation unit $Q$ is imported into a translation unit $R$\iref{module.import},
+If a translation unit $Q$ is \link{imported}{module.import} into a translation unit $R$,
 the potential scope of a name $X$ declared with namespace scope in $Q$
 is extended to include the portion of the corresponding namespace
 scope in $R$ following the first \grammarterm{module-import-declaration}
@@ -1199,8 +1197,8 @@ [basic.scope.class]
 definitions, and member function definitions, including the member function
 body and any portion of the
 declarator part of such definitions which follows the \grammarterm{declarator-id},
-including a \grammarterm{parameter-declaration-clause} and any default
-arguments\iref{dcl.fct.default}).
+including a \grammarterm{parameter-declaration-clause} and any \link{default
+arguments}{dcl.fct.default}).
 
 \pnum
 \begin{example}
@@ -1232,8 +1230,8 @@ [basic.scope.class]
 \pnum
 The name of a class member shall only be used as follows:
 \begin{itemize}
-\item in the scope of its class (as described above) or a class derived\iref{class.derived}
-from its class,
+\item in the scope of its class (as described above) or a class
+\link{derived}{class.derived} from its class,
 \item after the \tcode{.} operator applied to an expression of the type
 of its class\iref{expr.ref} or a class derived from its class,
 \item after the \tcode{->} operator applied to a pointer to an object of
@@ -1247,7 +1245,7 @@ [basic.scope.enum]
 \indextext{scope!enumeration}
 
 \pnum
-The name of a scoped enumerator\iref{dcl.enum} has
+The name of a \deflinkx{scoped enumerator}{scoped enumerators}{dcl.enum} has
 \defn{enumeration scope}. Its potential scope begins at
 its point of declaration and terminates at the end of the
 \grammarterm{enum-specifier}.
@@ -1287,8 +1285,8 @@ [basic.scope.temp]
 \end{example}
 
 \pnum
-The potential scope of a template parameter name begins at its point of
-declaration\iref{basic.scope.pdecl} and ends at the end of its declarative region.
+The potential scope of a template parameter name begins at its \deflink{point of
+declaration}{basic.scope.pdecl} and ends at the end of its declarative region.
 \begin{note}
 This implies that a \grammarterm{template-parameter} can be used in the
 declaration of subsequent \grammarterm{template-parameter}{s} and their default
@@ -1360,8 +1358,8 @@ [basic.scope.hiding]
 at block scope
 hides
 the declaration of a member of the class with the same name;
-see~\ref{basic.scope.class}. The declaration of a member in a derived
-class\iref{class.derived} hides the declaration of a member of
+see~\ref{basic.scope.class}. The declaration of a member in a \link{derived
+class}{class.derived} hides the declaration of a member of
 a base class of the same name; see~\ref{class.member.lookup}.
 
 \pnum
@@ -1536,8 +1534,8 @@ [basic.lookup.unqual]
 \begin{itemize}
 \item before its use in class \tcode{X} or be a member of a base class
 of \tcode{X}\iref{class.member.lookup}, or
-\item if \tcode{X} is a nested class of class
-\tcode{Y}\iref{class.nest}, before the definition of \tcode{X} in
+\item if \tcode{X} is a \deflink{nested class}{class.nest} of class
+\tcode{Y}, before the definition of \tcode{X} in
 \tcode{Y}, or shall be a member of a base class of \tcode{Y} (this
 lookup applies in turn to \tcode{Y}'s enclosing classes, starting with
 the innermost enclosing class),\footnote{This lookup applies whether the
@@ -1546,7 +1544,7 @@ [basic.lookup.unqual]
 appears in a namespace scope enclosing \tcode{Y}'s
 definition\iref{class.nest}.}
 or
-\item if \tcode{X} is a local class\iref{class.local} or is a nested
+\item if \tcode{X} is a \link{local class}{class.local} or is a nested
 class of a local class, before the definition of class \tcode{X} in a
 block enclosing the definition of class \tcode{X}, or
 \item if \tcode{X} is a member of namespace \tcode{N}, or is a nested
@@ -1613,7 +1611,7 @@ [basic.lookup.unqual]
 class of \tcode{X}\iref{class.member.lookup}, or
 
 \item if \tcode{X}
-is a nested class of class \tcode{Y}\iref{class.nest}, shall be a
+is a \deflink{nested class}{class.nest} of class \tcode{Y}, shall be a
 member of \tcode{Y}, or shall be a member of a base class of \tcode{Y}
 (this lookup applies in turn to \tcode{Y}'s enclosing classes, starting
 with the innermost enclosing class),\footnote{This lookup applies whether
@@ -1622,7 +1620,7 @@ [basic.lookup.unqual]
 is defined in a namespace scope enclosing \tcode{X}'s definition.}
 or
 
-\item if \tcode{X} is a local class\iref{class.local} or is a nested
+\item if \tcode{X} is a \link{local class}{class.local} or is a nested
 class of a local class, before the definition of class \tcode{X} in a
 block enclosing the definition of class \tcode{X}, or
 
@@ -1665,8 +1663,8 @@ [basic.lookup.unqual]
 \end{note}
 
 \pnum
-Name lookup for a name used in the definition of a friend
-function\iref{class.friend} defined inline in the class granting
+Name lookup for a name used in the definition of a \link{friend
+function}{class.friend} defined inline in the class granting
 friendship shall proceed as described for lookup in member function
 definitions. If the friend function is not defined in the class
 granting friendship, name lookup in the friend function
@@ -1702,8 +1700,8 @@ [basic.lookup.unqual]
 \end{example}
 
 \pnum
-During the lookup for a name used as a default
-argument\iref{dcl.fct.default} in a function
+During the lookup for a name used as a \link{default
+argument}{dcl.fct.default} in a function
 \grammarterm{parameter-declaration-clause} or used in the
 \grammarterm{expression} of a \grammarterm{mem-initializer} for a
 constructor\iref{class.base.init}, the function parameter names are
@@ -1723,8 +1721,8 @@ [basic.lookup.unqual]
 scopes containing the \grammarterm{enum-specifier}.
 
 \pnum
-A name used in the definition of a \tcode{static} data member of class
-\tcode{X}\iref{class.static.data} (after the \grammarterm{qualified-id}
+A name used in the definition of a \link{\tcode{static} data member}{class.static.data}
+of class \tcode{X} (after the \grammarterm{qualified-id}
 of the static member) is looked up as if the name was used in a member
 function of \tcode{X}.
 \begin{note}
@@ -1776,8 +1774,8 @@ [basic.lookup.argdep]
 
 \pnum
 When the \grammarterm{postfix-expression} in
-a function call\iref{expr.call} is an \grammarterm{unqualified-id}, other namespaces not considered
-during the usual unqualified lookup\iref{basic.lookup.unqual} may be
+a \link{function call}{expr.call} is an \grammarterm{unqualified-id}, other namespaces not considered
+during the usual \link{unqualified lookup}{basic.lookup.unqual} may be
 searched, and in those namespaces, namespace-scope friend function or
 function template declarations\iref{class.friend} not otherwise
 visible may be found.
@@ -1865,7 +1863,7 @@ [basic.lookup.argdep]
 associated namespaces and entities are those associated with the member
 type together with those associated with \tcode{X}.
 \end{itemize}
-If an associated namespace is an inline namespace\iref{namespace.def}, its
+If an associated namespace is an \deflink{inline namespace}{namespace.def}, its
 enclosing namespace is also included in the set. If an associated namespace
 directly contains inline namespaces, those inline namespaces are also included
 in the set.
@@ -1880,8 +1878,8 @@ [basic.lookup.argdep]
 \grammarterm{template-argument}{s}.
 
 \pnum
-Let \placeholder{X} be the lookup set produced by unqualified
-lookup\iref{basic.lookup.unqual} and let \placeholder{Y} be the lookup set produced
+Let \placeholder{X} be the lookup set produced by \link{unqualified
+lookup}{basic.lookup.unqual} and let \placeholder{Y} be the lookup set produced
 by argument dependent lookup (defined as follows). If \placeholder{X} contains
 \begin{itemize}
 \item a declaration of a class member, or
@@ -2061,7 +2059,7 @@ [basic.lookup.qual]
 whose declaration is visible in global scope because of a
 \grammarterm{using-directive}\iref{namespace.qual}. The use of \tcode{::}
 allows a global name to be referred to even if its identifier has been
-hidden\iref{basic.scope.hiding}.
+\link{hidden}{basic.scope.hiding}.
 
 \pnum
 A name prefixed by a \grammarterm{nested-name-specifier} that
@@ -2133,8 +2131,8 @@ [class.qual]
 
 \item the lookup for a name specified in a
 \grammarterm{using-declaration}\iref{namespace.udecl} also finds class or
-enumeration names hidden within the same
-scope\iref{basic.scope.hiding}.
+enumeration names \link{hidden}{basic.scope.hiding} within the same
+scope.
 \end{itemize}
 
 \pnum
@@ -2386,7 +2384,7 @@ [namespace.qual]
 the
 \grammarterm{unqualified-id} shall name a member of the namespace
 designated by the \grammarterm{nested-name-specifier}
-or of an element of the inline namespace set\iref{namespace.def} of that namespace.
+or of an element of the \deflink{inline namespace set}{namespace.def} of that namespace.
 \begin{example}
 \begin{codeblock}
 namespace A {
@@ -2430,8 +2428,9 @@ [basic.lookup.elab]
 \pnum
 An \grammarterm{elaborated-type-specifier}\iref{dcl.type.elab} may be
 used to refer to a previously declared \grammarterm{class-name} or
-\grammarterm{enum-name} even though the name has been hidden by a non-type
-declaration\iref{basic.scope.hiding}.
+\grammarterm{enum-name} even though the name has been
+\link{hidden}{basic.scope.hiding} by a non-type
+declaration.
 
 \pnum
 If the \grammarterm{elaborated-type-specifier} has no
@@ -2503,7 +2502,7 @@ [basic.lookup.classref]
 
 \pnum
 \indextext{lookup!class member}%
-In a class member access expression\iref{expr.ref}, if the \tcode{.}
+In a \link{class member access}{expr.ref} expression, if the \tcode{.}
 or \tcode{->} token is immediately followed by an \grammarterm{identifier}
 followed by a \tcode{<}, the identifier must be looked up to determine
 whether the \tcode{<} is the beginning of a template argument
@@ -2515,8 +2514,8 @@ [basic.lookup.classref]
 whose specializations are types.
 
 \pnum
-If the \grammarterm{id-expression} in a class member
-access\iref{expr.ref} is an \grammarterm{unqualified-id}, and the type of
+If the \grammarterm{id-expression} in a \link{class member
+access}{expr.ref} is an \grammarterm{unqualified-id}, and the type of
 the object expression is of a class type \tcode{C}, the
 \grammarterm{unqualified-id} is looked up
 in the scope of class \tcode{C}\iref{class.member.lookup}.
@@ -2619,7 +2618,7 @@ [basic.link]
 
 \pnum
 \indextext{program}%
-A \defn{program} consists of one or more translation units\iref{lex.separate}
+A \defn{program} consists of one or more \deflinkx{translation units}{translation unit}{lex.separate}
 linked together. A translation unit consists
 of a sequence of declarations.
 
@@ -2645,7 +2644,7 @@ [basic.link]
 
 \item When a name has \defnx{module linkage}{linkage!module},
 the entity it denotes
-can be referred to by names from other scopes of the same module unit\iref{module.unit} or
+can be referred to by names from other scopes of the same \deflink{module unit}{module.unit} or
 from scopes of other module units of that same module.
 
 \item When a name has \indextext{linkage!internal}\defn{internal linkage},
@@ -2664,7 +2663,7 @@ [basic.link]
 \indextext{\idxcode{const}!linkage of}%
 \indextext{linkage!\idxcode{inline} and}%
 \indextext{\idxcode{inline}!linkage of}%
-A name having namespace scope\iref{basic.scope.namespace} has internal
+A name having \link{namespace scope}{basic.scope.namespace} has internal
 linkage if it is the name of
 \begin{itemize}
 \item
@@ -2702,7 +2701,7 @@ [basic.link]
 purposes\iref{dcl.typedef}; or
 \item
 \indextext{enumeration!linkage of}%
-a named enumeration\iref{dcl.enum}, or an unnamed enumeration defined
+a named \link{enumeration}{dcl.enum}, or an unnamed enumeration defined
 in a typedef declaration in which the enumeration has the typedef name
 for linkage purposes\iref{dcl.typedef}; or
 \item an unnamed enumeration
@@ -2799,7 +2798,7 @@ [basic.link]
 \pnum
 \indextext{linkage!no}%
 Names not covered by these rules have no linkage. Moreover, except as
-noted, a name declared at block scope\iref{basic.scope.block} has no
+noted, a name declared at \deflink{block scope}{basic.scope.block} has no
 linkage.
 
 \pnum
@@ -2869,7 +2868,7 @@ [basic.link]
 \indextext{consistency!type declaration}%
 \indextext{declaration!multiple}%
 After all adjustments of types (during which
-typedefs\iref{dcl.typedef} are replaced by their definitions), the
+\link{typedefs}{dcl.typedef} are replaced by their definitions), the
 types specified by all declarations referring to a given variable or
 function shall be identical, except that declarations for an array
 object can specify array types that differ by the presence or absence of
@@ -3049,9 +3048,9 @@ [intro.memory]
 \indextext{memory model|(}%
 The fundamental storage unit in the \Cpp{} memory model is the
 \defn{byte}.
-A byte is at least large enough to contain any member of the basic
+A byte is at least large enough to contain any member of the
 \indextext{character set!basic execution}%
-execution character set\iref{lex.charset}
+\deflinkx{basic execution character set}{character set!basic execution}{lex.charset}
 and the eight-bit code units of the Unicode UTF-8 encoding form
 and is composed of a contiguous sequence of
 bits,\footnote{The number of bits in a byte is reported by the macro
@@ -3077,8 +3076,8 @@ [intro.memory]
 involve additional memory locations that are not accessible to programs but are
 managed by the implementation.
 \end{note}
-Two or more threads of
-execution\iref{intro.multithread} can access separate memory
+Two or more \deflinkx{threads of
+execution}{thread of execution}{intro.multithread} can access separate memory
 locations without interfering with each other.
 
 \pnum
@@ -3122,15 +3121,15 @@ [intro.object]
 The constructs in a \Cpp{} program create, destroy, refer to, access, and
 manipulate objects.
 An \defn{object} is created
-by a definition\iref{basic.def},
+by a \link{definition}{basic.def},
 by a \grammarterm{new-expression}\iref{expr.new},
 by an operation that implicitly creates objects (see below),
-when implicitly changing the active member of a union\iref{class.union},
+when implicitly changing the active member of a \link{union}{class.union},
 or
 when a temporary object is created~(\ref{conv.rval}, \ref{class.temporary}).
 An object occupies a region of storage
 in its period of construction\iref{class.cdtor},
-throughout its lifetime\iref{basic.life},
+throughout its \link{lifetime}{basic.life},
 and
 in its period of destruction\iref{class.cdtor}.
 \begin{note}
@@ -3248,7 +3247,7 @@ [intro.object]
 \end{itemize}
 
 \pnum
-If a complete object, a data member\iref{class.mem}, or an array element is of
+If a complete object, a \deflink{data member}{class.mem}, or an array element is of
 class type, its type is considered the \defn{most derived
 class}, to distinguish it from the class type of any base class subobject;
 an object of a most derived class type or of a non-class type is called a
@@ -3259,7 +3258,7 @@ [intro.object]
 \begin{itemize}
 \item a base class subobject, or
 \item a non-static data member
-declared with the \tcode{no_unique_address} attribute\iref{dcl.attr.nouniqueaddr}.
+declared with the \link{\tcode{no_unique_address}}{dcl.attr.nouniqueaddr} attribute.
 \end{itemize}
 
 \pnum
@@ -3280,7 +3279,7 @@ [intro.object]
 are \impldef{which non-standard-layout objects
 containing no data are considered empty}.
 \indextext{most derived object!bit-field}%
-Unless it is a bit-field\iref{class.bit},
+Unless it is a \link{bit-field}{class.bit},
 an object with nonzero size
 shall occupy one or more bytes of storage,
 including every byte that is occupied in full or in part
@@ -3603,9 +3602,9 @@ [basic.life]
 
 \pnum
 If a program ends the lifetime of an object of type \tcode{T} with
-static\iref{basic.stc.static}, thread\iref{basic.stc.thread},
-or automatic\iref{basic.stc.auto}
-storage duration and if \tcode{T} has a non-trivial destructor,\footnote{That
+\link{static}{basic.stc.static}, \link{thread}{basic.stc.thread},
+or \link{automatic storage duration}{basic.stc.auto}
+and if \tcode{T} has a non-trivial destructor,\footnote{That
 is, an object for which a destructor will be called
 implicitly---upon exit from the block for an object with
 automatic storage duration, upon exit from the thread for an object with
@@ -3685,16 +3684,16 @@ [basic.indet]
   is produced by the evaluation of:
   \begin{itemize}
   \item
-    the second or third operand of a conditional expression\iref{expr.cond},
+    the second or third operand of a \link{conditional expression}{expr.cond},
   \item
-    the right operand of a comma expression\iref{expr.comma},
+    the right operand of a \link{comma expression}{expr.comma},
   \item
     the operand of a cast or conversion~(\ref{conv.integral},
     \ref{expr.type.conv}, \ref{expr.static.cast}, \ref{expr.cast})
     to an unsigned ordinary character type
     or \tcode{std::byte} type\iref{cstddef.syn}, or
   \item
-    a discarded-value expression\iref{expr.context},
+    a \deflink{discarded-value expression}{expr.context},
   \end{itemize}
   then the result of the operation is an indeterminate value.
 \item
@@ -3751,8 +3750,8 @@ [basic.stc]
 \indextext{storage duration!automatic}%
 \indextext{storage duration!dynamic}%
 Static, thread, and automatic storage durations are associated with objects
-introduced by declarations\iref{basic.def} and implicitly created by
-the implementation\iref{class.temporary}. The dynamic storage duration
+introduced by declarations\iref{basic.def} and \link{implicitly created by
+the implementation}{class.temporary}. The dynamic storage duration
 is associated with objects created by a
 \grammarterm{new-expression}\iref{expr.new}.
 
@@ -3763,7 +3762,7 @@ [basic.stc]
 When the end of the duration of a region of storage is reached,
 the values of all pointers
 representing the address of any part of that region of storage
-become invalid pointer values\iref{basic.compound}.
+become \deflinkx{invalid pointer values}{value!invalid pointer}{basic.compound}.
 Indirection through an invalid pointer value and
 passing an invalid pointer value to a deallocation function
 have undefined behavior.
@@ -3846,8 +3845,8 @@ [basic.stc.dynamic]
 \indextext{storage duration!dynamic|(}
 
 \pnum
-Objects can be created dynamically during program
-execution\iref{intro.execution}, using
+Objects can be created dynamically during \link{program
+execution}{intro.execution}, using
 \indextext{\idxcode{new}}%
 \grammarterm{new-expression}{s}\iref{expr.new}, and destroyed using
 \indextext{\idxcode{delete}}%
@@ -4004,19 +4003,19 @@ [basic.stc.dynamic.allocation]
 \tcode{std::bad_alloc}\iref{bad.alloc}.
 
 \pnum
-A global allocation function is only called as the result of a new
-expression\iref{expr.new}, or called directly using the function call
-syntax\iref{expr.call}, or called indirectly to allocate storage for
+A global allocation function is only called as the result of a \link{new
+expression}{expr.new}, or called directly using the \link{function call}{expr.call}
+syntax, or called indirectly to allocate storage for
 a coroutine state\iref{dcl.fct.def.coroutine},
 or called indirectly through calls to the
 functions in the \Cpp{} standard library.
 \begin{note}
 In particular, a
 global allocation function is not called to allocate storage for objects
-with static storage duration\iref{basic.stc.static}, for objects or references
-with thread storage duration\iref{basic.stc.thread}, for objects of
-type \tcode{std::type_info}\iref{expr.typeid}, or for an
-exception object\iref{except.throw}.
+with \link{static storage duration}{basic.stc.static}, for objects or references
+with \link{thread storage duration}{basic.stc.thread}, for objects of
+type \link{\tcode{std::type_info}}{expr.typeid}, or for an
+\link{exception object}{except.throw}.
 \end{note}
 
 \rSec4[basic.stc.dynamic.deallocation]{Deallocation functions}
@@ -4092,12 +4091,11 @@ [basic.stc.dynamic.safety]
 \indextext{pointer!to traceable object}%
 A \defn{traceable pointer object} is
 \begin{itemize}
-\item an object of an object pointer
-type\iref{basic.compound}, or
+\item an object of an \deflink{object pointer type}{basic.compound}, or
 \item an object of an integral type that is at least as large as \tcode{std::intptr_t},
 or
-\item a sequence of elements in an array of narrow character
-type\iref{basic.fundamental}, where the size and alignment of the sequence
+\item a sequence of elements in an array of
+\deflinkx{narrow character type}{type!narrow character}{basic.fundamental}, where the size and alignment of the sequence
 match those of some object pointer type.
 \end{itemize}
 
@@ -4196,7 +4194,7 @@ [basic.align]
 integer value representing the number of bytes between successive addresses
 at which a given object can be allocated. An object type imposes an alignment
 requirement on every object of that type; stricter alignment can be requested
-using the alignment specifier\iref{dcl.align}.
+using the \link{alignment specifier}{dcl.align}.
 
 \pnum
 \indextext{alignment!fundamental}%
@@ -4253,8 +4251,8 @@ [basic.align]
 
 \pnum
 The alignment requirement of a complete type can be queried using an
-\tcode{alignof} expression\iref{expr.alignof}. Furthermore,
-the narrow character types\iref{basic.fundamental} shall have the weakest
+\link{\tcode{alignof} expression}{expr.alignof}. Furthermore,
+the \deflinkx{narrow character types}{type!narrow character}{basic.fundamental} shall have the weakest
 alignment requirement.
 \begin{note}
 This enables the ordinary character types to be used as the
@@ -4661,9 +4659,9 @@ [basic.types]
 impose requirements on implementations regarding the representation
 of types.
 There are two kinds of types: fundamental types and compound types.
-Types describe objects\iref{intro.object},
-references\iref{dcl.ref},
-or functions\iref{dcl.fct}.
+Types describe \link{objects}{intro.object},
+\link{references}{dcl.ref},
+or \link{functions}{dcl.fct}.
 \end{note}
 
 \pnum
@@ -4804,7 +4802,7 @@ [basic.types]
 pointer types, pointer-to-member types\iref{basic.compound},
 \tcode{std::nullptr_t},
 and
-cv-qualified\iref{basic.type.qualifier} versions of these
+\link{cv-qualified}{basic.type.qualifier} versions of these
 types are collectively called
 \defnadjx{scalar}{types}{type}.
 Scalar types, trivially copyable class types\iref{class.prop},
@@ -4828,14 +4826,14 @@ [basic.types]
 \item a scalar type; or
 \item a reference type; or
 \item an array of literal type; or
-\item a possibly cv-qualified class type\iref{class} that
+\item a possibly cv-qualified \link{class type}{class} that
 has all of the following properties:
 \begin{itemize}
 \item it has a constexpr destructor\iref{dcl.constexpr},
 \item it is either a closure type\iref{expr.prim.lambda.closure},
 an aggregate type\iref{dcl.init.aggr}, or
 has at least one constexpr constructor or constructor template
-(possibly inherited\iref{namespace.udecl} from a base class)
+(possibly \deflinkx{inherited}{inherits}{namespace.udecl} from a base class)
 that is not a copy or move constructor,
 \item if it is a union, at least one of its non-static data members is
 of non-volatile literal type, and
@@ -4857,8 +4855,8 @@ [basic.types]
 Two types \cvqual{cv1} \tcode{T1} and \cvqual{cv2} \tcode{T2} are
 \defn{layout-compatible} types
 if \tcode{T1} and \tcode{T2} are the same type,
-layout-compatible enumerations\iref{dcl.enum}, or
-layout-compatible standard-layout class types\iref{class.mem}.
+\deflinkx{layout-compatible enumerations}{layout-compatible!enumeration}{dcl.enum}, or
+\deflinkx{layout-compatible standard-layout class types}{layout-compatible!class}{class.mem}.
 
 \rSec2[basic.fundamental]{Fundamental types}
 
@@ -5110,7 +5108,7 @@ [basic.fundamental]
 called \defnx{arithmetic}{type!arithmetic} types.
 \indextext{\idxcode{numeric_limits}!specializations for arithmetic types}%
 Specializations of the standard library template
-\tcode{std::numeric_limits}\iref{numeric.limits} shall specify the
+\link{\tcode{std::numeric_limits}}{numeric.limits} shall specify the
 maximum and minimum values of each arithmetic type for an
 implementation.
 
@@ -5123,17 +5121,17 @@ [basic.fundamental]
 explicitly converted to type \cv{}~\tcode{void}~(\ref{expr.type.conv},
 \ref{expr.static.cast}, \ref{expr.cast}).
 An expression of type \cv{}~\tcode{void} shall
-be used only as an expression statement\iref{stmt.expr}, as an operand
-of a comma expression\iref{expr.comma}, as a second or third operand
+be used only as an \link{expression statement}{stmt.expr}, as an operand
+of a \link{comma expression}{expr.comma}, as a second or third operand
 of \tcode{?:}\iref{expr.cond}, as the operand of
 \tcode{typeid}, \tcode{noexcept}, or \tcode{decltype}, as
-the expression in a \tcode{return} statement\iref{stmt.return} for a function
+the expression in a \link{\tcode{return} statement}{stmt.return} for a function
 with the return type \cv{}~\tcode{void}, or as the operand of an explicit conversion
 to type \cv{}~\tcode{void}.
 
 \pnum
-A value of type \tcode{std::nullptr_t} is a null pointer
-constant\iref{conv.ptr}. Such values participate in the pointer and the
+A value of type \tcode{std::nullptr_t} is a \deflink{null pointer
+constant}{conv.ptr}. Such values participate in the pointer and the
 pointer-to-member conversions~(\ref{conv.ptr}, \ref{conv.mem}).
 \tcode{sizeof(std::nullptr_t)} shall be equal to \tcode{sizeof(void*)}.
 
@@ -5273,7 +5271,7 @@ [basic.compound]
 have the same value representation and alignment
 requirements\iref{basic.align}.
 \begin{note}
-Pointers to over-aligned types\iref{basic.align} have no special
+Pointers to \deflinkx{over-aligned types}{type!over-aligned}{basic.align} have no special
 representation, but their range of valid values is restricted by the extended
 alignment requirement.
 \end{note}
@@ -5300,7 +5298,7 @@ [basic.compound]
 then they have the same address,
 and it is possible to obtain a pointer to one
 from a pointer to the other
-via a \tcode{reinterpret_cast}\iref{expr.reinterpret.cast}.
+via a \link{\tcode{reinterpret_cast}}{expr.reinterpret.cast}.
 \begin{note}
 An array object and its first element are not pointer-interconvertible,
 even though they have the same address.
@@ -5487,8 +5485,8 @@ [basic.exec]
 \rSec2[intro.execution]{Sequential execution}
 
 \pnum
-An instance of each object with automatic storage
-duration\iref{basic.stc.auto} is associated with each entry into its
+An instance of each object with \link{automatic storage
+duration}{basic.stc.auto} is associated with each entry into its
 block. Such an object exists and retains its last-stored value during
 the execution of the block and while the block is suspended (by a call
 of a function, suspension of a coroutine\iref{expr.await}, or receipt of a signal).
@@ -5529,7 +5527,7 @@ [intro.execution]
 the initialization of the entities captured by copy and
 the constituent expressions of the \grammarterm{initializer} of the \grammarterm{init-capture}{s},
 \item
-if $E$ is a function call\iref{expr.call} or implicitly invokes a function,
+if $E$ is a \link{function call}{expr.call} or implicitly invokes a function,
 the constituent expressions of each default argument\iref{dcl.fct.default}
 used in the call, or
 \item
@@ -5551,7 +5549,7 @@ [intro.execution]
 A \defn{full-expression} is
 \begin{itemize}
 \item
-an unevaluated operand\iref{expr.prop},
+an \deflink{unevaluated operand}{expr.prop},
 \item
 a \grammarterm{constant-expression}\iref{expr.const},
 \item
diff --git a/source/expressions.tex b/source/expressions.tex
index a5df85d9..e05a4c91 100644
--- a/source/expressions.tex
+++ b/source/expressions.tex
@@ -30,14 +30,14 @@ [expr.pre]
 \indextext{operator!overloaded}%
 \begin{note}
 Operators can be overloaded, that is, given meaning when applied to
-expressions of class type\iref{class} or enumeration
-type\iref{dcl.enum}. Uses of overloaded operators are transformed into
+expressions of \link{class}{class} type or
+\link{enumeration}{dcl.enum} type. Uses of overloaded operators are transformed into
 function calls as described in~\ref{over.oper}. Overloaded operators
 obey the rules for syntax and evaluation order specified in \ref{expr.compound},
 but the requirements of operand type and value category are replaced
 by the rules for function call. Relations between operators, such as
-\tcode{++a} meaning \tcode{a+=1}, are not guaranteed for overloaded
-operators\iref{over.oper}.
+\tcode{++a} meaning \tcode{a+=1}, are not guaranteed for \link{overloaded
+operators}{over.oper}.
 \end{note}
 
 \pnum
@@ -201,7 +201,7 @@ [basic.lval]
 \begin{example}
 \begin{codeblock}
 struct A {
-  int m;
+int m;
 };
 A&& operator+(A, A);
 A&& f();
@@ -236,8 +236,8 @@ [basic.lval]
 \pnum
 Whenever a glvalue appears as an operand of an operator that
 expects a prvalue for that operand, the
-lvalue-to-rvalue\iref{conv.lval}, array-to-pointer\iref{conv.array},
-or function-to-pointer\iref{conv.func} standard conversions are
+\link{lvalue-to-rvalue}{conv.lval}, \link{array-to-pointer}{conv.array},
+or \link{function-to-pointer}{conv.func} standard conversions are
 applied to convert the expression to a prvalue.
 \begin{note}
 An attempt to bind an rvalue reference to an lvalue is not such a context; see~\ref{dcl.init.ref}.
@@ -257,7 +257,7 @@ [basic.lval]
 \pnum
 Whenever a prvalue appears as an operand of an operator that
 expects a glvalue for that operand, the
-temporary materialization conversion\iref{conv.rval} is
+\link{temporary materialization conversion}{conv.rval} is
 applied to convert the expression to an xvalue.
 
 \pnum
@@ -287,9 +287,9 @@ [basic.lval]
 \end{note}
 
 \pnum
-If a program attempts to access\iref{defns.access}
+If a program attempts to \link{access}{defns.access}
 the stored value of an object through a glvalue
-whose type is not similar\iref{conv.qual} to
+whose type is not \deflinkx{similar}{similar types}{conv.qual} to
 one of the following types the behavior is
 undefined:\footnote{The intent of this list is to specify those circumstances in which an
 object may or may not be aliased.}
@@ -359,9 +359,9 @@ [expr.type]
 
 \item
 if \tcode{T1} is ``pointer to \cvqual{cv1} \tcode{C1}'' and \tcode{T2} is ``pointer to
-\cvqual{cv2} \tcode{C2}'', where \tcode{C1} is reference-related to \tcode{C2} or \tcode{C2} is
-reference-related to \tcode{C1}\iref{dcl.init.ref},
-the cv-combined type\iref{conv.qual}
+\cvqual{cv2} \tcode{C2}'', where \tcode{C1} is \deflink{reference-related}{dcl.init.ref} to \tcode{C2} or \tcode{C2} is
+reference-related to \tcode{C1},
+the \deflinkx{cv-combined type}{type!cv-combined}{conv.qual}
 of \tcode{T1} and \tcode{T2} or the cv-combined type of \tcode{T2} and \tcode{T1},
 respectively;
 
@@ -370,8 +370,8 @@ [expr.type]
 ``pointer to member of \tcode{C1} of type function'',
 the other type is
 ``pointer to member of \tcode{C2} of type \tcode{noexcept} function'', and
-\tcode{C1} is reference-related to \tcode{C2} or
-\tcode{C2} is reference-related to \tcode{C1}\iref{dcl.init.ref},
+\tcode{C1} is \deflink{reference-related}{dcl.init.ref} to \tcode{C2} or
+\tcode{C2} is reference-related to \tcode{C1},
 where the function types are otherwise the same,
 ``pointer to member of \tcode{C2} of type function'' or
 ``pointer to member of \tcode{C1} of type function'', respectively;
@@ -383,12 +383,12 @@ [expr.type]
 ``pointer to member of \tcode{C2} of type \cvqual{cv2} \tcode{U}'',
 for some non-function type \tcode{U},
 where \tcode{C1} is
-reference-related to \tcode{C2} or \tcode{C2} is reference-related to
-\tcode{C1}\iref{dcl.init.ref}, the cv-combined type of \tcode{T2} and \tcode{T1} or the cv-combined type
+\deflink{reference-related}{dcl.init.ref} to \tcode{C2} or \tcode{C2} is reference-related to
+\tcode{C1}, the cv-combined type of \tcode{T2} and \tcode{T1} or the cv-combined type
 of \tcode{T1} and \tcode{T2}, respectively;
 
 \item
-if \tcode{T1} and \tcode{T2} are similar types\iref{conv.qual}, the cv-combined type of \tcode{T1} and
+if \tcode{T1} and \tcode{T2} are \deflink{similar types}{conv.qual}, the cv-combined type of \tcode{T1} and
 \tcode{T2};
 
 \item
@@ -425,31 +425,31 @@ [expr.context]
 In an unevaluated operand, a non-static class member may be
 named\iref{expr.prim.id} and naming of objects or functions does not, by
 itself, require that a definition be provided\iref{basic.def.odr}.
-An unevaluated operand is considered a full-expression\iref{intro.execution}.
+An unevaluated operand is considered a \deflink{full-expression}{intro.execution}.
 \end{note}
 
 \pnum
 In some contexts, an expression only appears for its side effects. Such an
 expression is called a \defn{discarded-value expression}.
-The array-to-pointer\iref{conv.array}
-and function-to-pointer\iref{conv.func} standard conversions are not
-applied. The lvalue-to-rvalue conversion\iref{conv.lval} is applied
+The \link{array-to-pointer}{conv.array}
+and \link{function-to-pointer}{conv.func} standard conversions are not
+applied. The \link{lvalue-to-rvalue}{conv.lval} conversion is applied
 if and only if
 the expression is a glvalue of volatile-qualified type and it is one of the
 following:
 
 \begin{itemize}
 \item \tcode{(} \grammarterm{expression} \tcode{)}, where
-  \grammarterm{expression} is one of these expressions,
+\grammarterm{expression} is one of these expressions,
 \item \grammarterm{id-expression}\iref{expr.prim.id},
-\item subscripting\iref{expr.sub},
-\item class member access\iref{expr.ref},
-\item indirection\iref{expr.unary.op},
-\item pointer-to-member operation\iref{expr.mptr.oper},
-\item conditional expression\iref{expr.cond} where both the second and the
-      third operands are one of these expressions, or
-\item comma expression\iref{expr.comma} where the right operand is one of
-      these expressions.
+\item \link{subscripting}{expr.sub},
+\item \link{class member access}{expr.ref},
+\item \deflink{indirection}{expr.unary.op},
+\item \link{pointer-to-member operation}{expr.mptr.oper},
+\item \link{conditional expression}{expr.cond} where both the second and the
+  third operands are one of these expressions, or
+\item \link{comma expression}{expr.comma} where the right operand is one of
+  these expressions.
 \end{itemize}
 
 \begin{note}
@@ -457,7 +457,7 @@ [expr.context]
 above covers only operators with built-in meaning.
 \end{note}
 If the (possibly converted) expression is a prvalue,
-the temporary materialization conversion\iref{conv.rval} is applied.
+the \link{temporary materialization conversion}{conv.rval} is applied.
 \begin{note}
 If the expression is an lvalue of
 class type, it must have a volatile copy constructor to initialize the
@@ -585,7 +585,7 @@ [conv.lval]
 \pnum
 \indextext{conversion!lvalue-to-rvalue}%
 \indextext{type!incomplete}%
-A glvalue\iref{basic.lval} of a non-function, non-array type \tcode{T}
+A \deflink{glvalue}{basic.lval} of a non-function, non-array type \tcode{T}
 can be converted to
 a prvalue.\footnote{For historical reasons, this conversion is called the ``lvalue-to-rvalue''
 conversion, even though that name does not accurately reflect the taxonomy
@@ -605,18 +605,18 @@ [conv.lval]
 \begin{itemize}
 \item $E$ is not potentially evaluated, or
 \item the evaluation of $E$ results in the evaluation of a member
-      $E_\tcode{x}$ of the set of potential results of $E$, and $E_\tcode{x}$
-      names a variable \tcode{x} that is not odr-used by
-      $E_\tcode{x}$\iref{basic.def.odr},
+  $E_\tcode{x}$ of the set of potential results of $E$, and $E_\tcode{x}$
+  names a variable \tcode{x} that is not odr-used by
+  $E_\tcode{x}$\iref{basic.def.odr},
 \end{itemize}
 the value contained in the referenced object is not accessed.
 \begin{example}
 \begin{codeblock}
 struct S { int n; };
 auto f() {
-  S x { 1 };
-  constexpr S y { 2 };
-  return [&](bool b) { return (b ? y : x).n; };
+S x { 1 };
+constexpr S y { 2 };
+return [&](bool b) { return (b ? y : x).n; };
 }
 auto g = f();
 int m = g(false);   // undefined behavior: access of \tcode{x.n} outside its lifetime
@@ -768,11 +768,11 @@ [conv.qual]
 (as it is done on line \#2). For example,
 \begin{codeblock}
 int main() {
-  const char c = 'c';
-  char* pc;
-  const char** pcc = &pc;       // \#1: not allowed
-  *pcc = &c;
-  *pc = 'C';                    // \#2: modifies a const object
+const char c = 'c';
+char* pc;
+const char** pcc = &pc;       // \#1: not allowed
+*pcc = &c;
+*pc = 'C';                    // \#2: modifies a const object
 }
 \end{codeblock}
 \end{note}
@@ -998,7 +998,7 @@ [conv.mem]
 \indextext{conversion!pointer-to-member}%
 \indextext{null member pointer conversion|see{conversion, null member pointer}}%
 \indextext{constant!null pointer}%
-A null pointer constant\iref{conv.ptr} can be converted to a
+A \deflinkx{null pointer constant}{constant!null pointer}{conv.ptr} can be converted to a
 pointer-to-member
 type; the result is the \defnx{null member pointer value}{value!null member pointer}
 of that type and is distinguishable from any pointer to member not
@@ -1083,7 +1083,7 @@ [expr.arith.conv]
 which are defined as follows:
 
 \begin{itemize}
-\item If either operand is of scoped enumeration type\iref{dcl.enum}, no conversions
+\item If either operand is of \deflinkx{scoped enumeration type}{enumeration!scoped}{dcl.enum}, no conversions
 are performed; if the other operand does not have the same type, the expression is
 ill-formed.
 
@@ -1140,13 +1140,13 @@ [expr.prim]
 
 \begin{bnf}
 \nontermdef{primary-expression}\br
-    literal\br
-    \keyword{this}\br
-    \terminal{(} expression \terminal{)}\br
-    id-expression\br
-    lambda-expression\br
-    fold-expression\br
-    requires-expression
+literal\br
+\keyword{this}\br
+\terminal{(} expression \terminal{)}\br
+id-expression\br
+lambda-expression\br
+fold-expression\br
+requires-expression
 \end{bnf}
 
 \rSec2[expr.prim.literal]{Literals}
@@ -1167,8 +1167,8 @@ [expr.prim.this]
 
 \pnum
 \indextext{\idxcode{this}}%
-The keyword \tcode{this} names a pointer to the object for which a non-static member
-function\iref{class.this} is invoked or a non-static data member's
+The keyword \link{\tcode{this}}{class.this} names a pointer to the object for which a non-static member
+function is invoked or a non-static data member's
 initializer\iref{class.mem} is evaluated.
 
 \pnum
@@ -1188,7 +1188,7 @@ [expr.prim.this]
 \begin{note}
 In a \grammarterm{trailing-return-type},
 the class being defined is not required to be complete
-for purposes of class member access\iref{expr.ref}.
+for purposes of \link{class member access}{expr.ref}.
 Class members declared later are not visible.
 \begin{example}
 \begin{codeblock}
@@ -1203,10 +1203,10 @@ [expr.prim.this]
 \end{note}
 
 \pnum
-Otherwise, if a \grammarterm{member-declarator} declares a non-static data
-member\iref{class.mem} of a class \tcode{X}, the expression \tcode{this} is
+Otherwise, if a \grammarterm{member-declarator} declares a non-static \link{data
+member}{class.mem} of a class \tcode{X}, the expression \tcode{this} is
 a prvalue of type ``pointer to \tcode{X}'' within the
-optional default member initializer\iref{class.mem}. It shall not appear elsewhere
+optional \deflink{default member initializer}{class.mem}. It shall not appear elsewhere
 in the \grammarterm{member-declarator}.
 
 \pnum
@@ -1252,15 +1252,15 @@ [expr.prim.id]
 An \grammarterm{id-expression} is a restricted form of a
 \grammarterm{primary-expression}.
 \begin{note}
-An \grammarterm{id-expression} can appear after \tcode{.} and \tcode{->}
-operators\iref{expr.ref}.
+An \grammarterm{id-expression} can appear after
+\link{\tcode{.} and \tcode{->} operators}{expr.ref}.
 \end{note}
 
 \pnum
 An \grammarterm{id-expression} that denotes a non-static data member or
 non-static member function of a class can only be used:
 \begin{itemize}
-\item as part of a class member access\iref{expr.ref} in which the
+\item as part of a \link{class member access}{expr.ref} in which the
 object expression
 refers to the member's class\footnote{This also applies when the object expression
 is an implicit \tcode{(*this)}~(\ref{class.mfct.non-static}).} or a class derived from
@@ -1283,11 +1283,11 @@ [expr.prim.id]
 
 \pnum
 A potentially-evaluated \grammarterm{id-expression}
-that denotes an immediate function\iref{dcl.constexpr}
+that denotes an \deflink{immediate function}{dcl.constexpr}
 shall appear only
 \begin{itemize}
 \item as a subexpression of an immediate invocation, or
-\item in an immediate function context\iref{expr.const}.
+\item in an \deflink{immediate function context}{expr.const}.
 \end{itemize}
 
 \pnum
@@ -1315,7 +1315,7 @@ [expr.prim.id]
 In the declaration of \tcode{p2},
 those constraints are required to be satisfied
 even though
-\tcode{f} is an unevaluated operand\iref{expr.prop}.
+\tcode{f} is an \deflink{unevaluated operand}{expr.prop}.
 \end{example}
 \end{note}
 
@@ -1381,7 +1381,7 @@ [expr.prim.id.unqual]
 if it is cv-qualified or is a reference type.
 \end{note}
 The expression is an lvalue
-if the entity is a function, variable, structured binding\iref{dcl.struct.bind}, data member, or
+if the entity is a function, variable, \link{structured binding}{dcl.struct.bind}, data member, or
 template parameter object
 and a prvalue otherwise\iref{basic.lval};
 it is a bit-field if the identifier designates a bit-field.
@@ -1432,7 +1432,7 @@ [expr.prim.id.qual]
 A \grammarterm{nested-name-specifier} that denotes a class, optionally
 followed by the keyword \tcode{template}\iref{temp.names}, and then
 followed by the name of a member of either that class\iref{class.mem}
-or one of its base classes\iref{class.derived}, is a
+or one of its \link{base classes}{class.derived}, is a
 \indextext{id!qualified}%
 \grammarterm{qualified-id};~\ref{class.qual} describes name lookup for
 class members that appear in \grammarterm{qualified-id}{s}. The result is the
@@ -1454,7 +1454,7 @@ [expr.prim.id.qual]
 \pnum
 The \grammarterm{nested-name-specifier} \tcode{::} names the global namespace.
 A \grammarterm{nested-name-specifier} that names a
-namespace\iref{basic.namespace}, optionally followed by the keyword
+\link{namespace}{basic.namespace}, optionally followed by the keyword
 \tcode{template}\iref{temp.names}, and then followed by the name of a member
 of that namespace (or the name of a member of a namespace made visible by a
 \grammarterm{using-directive}), is a
@@ -1466,7 +1466,7 @@ [expr.prim.id.qual]
 
 \pnum
 A \grammarterm{nested-name-specifier} that denotes an
-enumeration\iref{dcl.enum}, followed by the name of an
+\link{enumeration}{dcl.enum}, followed by the name of an
 enumerator of that enumeration, is a \grammarterm{qualified-id}
 that refers to the enumerator. The result is the enumerator. The type
 of the result is the type of the enumeration. The result is a prvalue.
@@ -1558,8 +1558,8 @@ [expr.prim.lambda]
 A \grammarterm{lambda-expression} is a prvalue
 whose result object is called the \defn{closure object}.
 \begin{note}
-A closure object behaves like a function
-object\iref{function.objects}.
+A closure object behaves like a \link{function
+object}{function.objects}.
 \end{note}
 
 \pnum
@@ -1617,7 +1617,7 @@ [expr.prim.lambda.closure]
 types of a \grammarterm{lambda-declarator} do not affect these associated namespaces and
 classes.
 \end{note}
-The closure type is not an aggregate type\iref{dcl.init.aggr}.
+The closure type is not an \deflink{aggregate}{dcl.init.aggr} type.
 An implementation may define the closure type differently from what
 is described below provided this does not alter the observable behavior of the program
 other than by changing:
@@ -1764,7 +1764,7 @@ [expr.prim.lambda.closure]
 \grammarterm{lambda-capture}
 whose constraints (if any) are satisfied
 has a conversion function to pointer to
-function with \Cpp{} language linkage\iref{dcl.link} having
+function with \Cpp{} language \link{linkage}{dcl.link} having
 the same parameter and return types as the closure type's function call operator.
 The conversion is to ``pointer to \tcode{noexcept} function''
 if the function call operator
@@ -1863,8 +1863,8 @@ [expr.prim.lambda.closure]
 
 \pnum
 The conversion function or conversion function template is public,
-constexpr, non-virtual, non-explicit, const, and has a non-throwing exception
-specification\iref{except.spec}.
+constexpr, non-virtual, non-explicit, const, and has a non-throwing \link{exception
+specification}{except.spec}.
 \begin{example}
 \begin{codeblock}
 auto Fwd = [](int (*fp)(int), auto a) { return fp(a); };
@@ -1881,8 +1881,8 @@ [expr.prim.lambda.closure]
 \pnum
 The \grammarterm{lambda-expression}'s \grammarterm{compound-statement} yields the
 \grammarterm{function-body}\iref{dcl.fct.def} of the function call operator, but for
-purposes of name lookup\iref{basic.lookup}, determining the type and value of
-\tcode{this}\iref{class.this} and transforming \grammarterm{id-expression}{s}
+purposes of \link{name lookup}{basic.lookup}, determining the type and value of
+\link{\tcode{this}}{class.this} and transforming \grammarterm{id-expression}{s}
 referring to non-static class members into class member access expressions using
 \tcode{(*this)}~(\ref{class.mfct.non-static}), the \grammarterm{compound-statement} is
 considered in the context of the \grammarterm{lambda-expression}.
@@ -1924,9 +1924,9 @@ [expr.prim.lambda.closure]
 
 \pnum
 A member of a closure type shall not be
-explicitly instantiated\iref{temp.explicit},
-explicitly specialized\iref{temp.expl.spec}, or
-named in a friend declaration\iref{class.friend}.
+\link{explicitly instantiated}{temp.explicit},
+\link{explicitly specialized}{temp.expl.spec}, or
+named in a \link{friend declaration}{class.friend}.
 
 \rSec3[expr.prim.lambda.capture]{Captures}%
 
@@ -2020,7 +2020,7 @@ [expr.prim.lambda.capture]
 
 \pnum
 The \grammarterm{identifier} in a \grammarterm{simple-capture} is looked up using the
-usual rules for unqualified name lookup\iref{basic.lookup.unqual}; each such lookup
+usual rules for \link{unqualified name lookup}{basic.lookup.unqual}; each such lookup
 shall find a local entity.
 The \grammarterm{simple-capture}{s} \tcode{this} and \tcode{* this}
 denote the local entity \tcode{*this}.
@@ -2261,7 +2261,7 @@ [expr.prim.lambda.capture]
 
 \pnum
 Every \grammarterm{id-expression} within the \grammarterm{compound-statement} of a
-\grammarterm{lambda-expression} that is an odr-use\iref{basic.def.odr} of an
+\grammarterm{lambda-expression} that is an \link{odr-use}{basic.def.odr} of an
 entity captured by copy is transformed into an access to the corresponding unnamed data
 member of the closure type.
 \begin{note}
@@ -2476,7 +2476,7 @@ [expr.prim.req]
 \pnum
 A \grammarterm{requires-expression} provides a concise way to express
 requirements on template arguments
-that can be checked by name lookup\iref{basic.lookup}
+that can be checked by \link{name lookup}{basic.lookup}
 or by checking properties of types and expressions.
 
 \begin{bnf}
@@ -2512,7 +2512,7 @@ [expr.prim.req]
 A \grammarterm{requires-expression} is a prvalue of type \tcode{bool}
 whose value is described below.
 Expressions appearing within a \grammarterm{requirement-body}
-are unevaluated operands\iref{expr.prop}.
+are \deflinkx{unevaluated operands}{unevaluated operand}{expr.prop}.
 
 \pnum
 \begin{example}
@@ -2610,7 +2610,7 @@ [expr.prim.req.simple]
 \begin{note}
 The enclosing \grammarterm{requires-expression} will evaluate to \tcode{false}
 if substitution of template arguments into the \grammarterm{expression} fails.
-The \grammarterm{expression} is an unevaluated operand\iref{expr.prop}.
+The \grammarterm{expression} is an \deflink{unevaluated operand}{expr.prop}.
 \end{note}
 \begin{example}
 \begin{codeblock}
@@ -2784,7 +2784,7 @@ [expr.prim.req.nested]
 \end{example}
 
 \pnum
-A local parameter shall only appear as an unevaluated operand\iref{expr.prop}
+A local parameter shall only appear as an \deflink{unevaluated operand}{expr.prop}
 within the \grammarterm{constraint-expression}.
 \begin{example}
 \begin{codeblock}
@@ -2863,7 +2863,7 @@ [expr.sub]
 
 \pnum
 \begin{note}
-A comma expression\iref{expr.comma}
+A \link{comma expression}{expr.comma}
 appearing as the \grammarterm{expr-or-braced-init-list}
 of a subscripting expression is deprecated;
 see \ref{depr.comma.subscript}.
@@ -2907,9 +2907,9 @@ [expr.call]
 For a call to a non-static member function,
 the postfix expression shall be an
 implicit~(\ref{class.mfct.non-static}, \ref{class.static}) or explicit
-class member access\iref{expr.ref} whose \grammarterm{id-expression} is a
-function member name, or a pointer-to-member
-expression\iref{expr.mptr.oper} selecting a function member; the call is as a member of
+\link{class member access}{expr.ref} whose \grammarterm{id-expression} is a
+function member name, or a \link{pointer-to-member
+expression}{expr.mptr.oper} selecting a function member; the call is as a member of
 the class object referred to by the
 object expression. In the case of an implicit class
 member access, the implied object is the one pointed to by \tcode{this}.
@@ -2922,7 +2922,7 @@ [expr.call]
 If the selected
 function is non-virtual, or if the \grammarterm{id-expression} in the class
 member access expression is a \grammarterm{qualified-id}, that function is
-called. Otherwise, its final overrider\iref{class.virtual} in the dynamic type
+called. Otherwise, its \deflink{final overrider}{class.virtual} in the dynamic type
 of the object expression is called; such a call is referred to as a
 \defnx{virtual function call}{function!virtual function call}.
 \begin{note}
@@ -2935,8 +2935,8 @@ [expr.call]
 
 \pnum
 \begin{note}
-If a function or member function name is used, and name
-lookup\iref{basic.lookup} does not find a declaration of that name,
+If a function or member function name is used, and \link{name
+lookup}{basic.lookup} does not find a declaration of that name,
 the program is ill-formed. No function is implicitly declared by such a
 call.
 \end{note}
@@ -2980,9 +2980,9 @@ [expr.call]
 \end{codeblock}
 \end{example}
 If the function is a non-static member
-function, the \tcode{this} parameter of the function\iref{class.this}
+function, the \link{\tcode{this} parameter}{class.this} of the function
 is initialized with a pointer to the object of the call, converted
-as if by an explicit type conversion\iref{expr.cast}.
+as if by an \link{explicit type conversion}{expr.cast}.
 \begin{note}
 There is no access or ambiguity checking on this conversion; the access
 checking and disambiguation are done as part of the (possibly implicit)
@@ -3061,7 +3061,7 @@ [expr.call]
 
 \pnum
 The result of a function call is the result of the possibly-converted operand
-of the \tcode{return} statement\iref{stmt.return}
+of the \link{\tcode{return} statement}{stmt.return}
 that transferred control out of the called function (if any),
 except in a virtual function call if the return type of the
 final overrider is different from the return type of the statically
@@ -3091,10 +3091,10 @@ [expr.call]
 \pnum
 \indextext{declaration!ellipsis in function}%
 \indextext{parameter list!variable}%
-A function can be declared to accept fewer arguments (by declaring default
-arguments\iref{dcl.fct.default}) or more arguments (by using the ellipsis,
+A function can be declared to accept fewer arguments (by declaring \link{default
+arguments}{dcl.fct.default}) or more arguments (by using the ellipsis,
 \tcode{...}, or a function parameter pack\iref{dcl.fct}) than the number of
-parameters in the function definition\iref{dcl.fct.def}.
+parameters in the \link{function definition}{dcl.fct.def}.
 \begin{note}
 This implies that, except where the ellipsis (\tcode{...}) or a function
 parameter pack is used, a parameter is available for each argument.
@@ -3104,7 +3104,7 @@ [expr.call]
 \indextext{ellipsis!conversion sequence}%
 When there is no parameter for a given argument, the argument is passed
 in such a way that the receiving function can obtain the value of the
-argument by invoking \tcode{va_arg}\iref{support.runtime}.
+argument by invoking \liblinkx{\tcode{va_arg}}{va_arg}{support.runtime}.
 \begin{note}
 This paragraph does not apply to arguments passed to a function parameter pack.
 Function parameter packs are expanded during template instantiation\iref{temp.variadic},
@@ -3112,11 +3112,11 @@ [expr.call]
 specialization is actually called.
 \end{note}
 The
-lvalue-to-rvalue\iref{conv.lval}, array-to-pointer\iref{conv.array},
-and function-to-pointer\iref{conv.func} standard conversions are
+\link{lvalue-to-rvalue}{conv.lval}, \link{array-to-pointer}{conv.array},
+and \link{function-to-pointer}{conv.func} standard conversions are
 performed on the argument expression.
-An argument that has type \cv{}~\tcode{std::nullptr_t} is converted
-to type \tcode{void*}\iref{conv.ptr}.
+An argument that has type \cv{}~\tcode{std::nullptr_t} is \link{converted}{conv.ptr}
+to type \tcode{void*}.
 After these conversions, if the
 argument does not have arithmetic, enumeration, pointer, pointer-to-member,
 or class type, the program is ill-formed. Passing a potentially-evaluated
@@ -3128,16 +3128,16 @@ [expr.call]
 non-trivial destructor\iref{special},
 with no corresponding parameter, is conditionally-supported with
 \impldef{passing argument of class type through ellipsis} semantics. If the argument has
-integral or enumeration type that is subject to the integral
-promotions\iref{conv.prom}, or a floating-point type that is subject to the
-floating-point promotion\iref{conv.fpprom}, the value of the argument is converted to the
+integral or enumeration type that is subject to the \link{integral
+promotions}{conv.prom}, or a floating-point type that is subject to the
+\link{floating-point promotion}{conv.fpprom}, the value of the argument is converted to the
 promoted type before the call. These promotions are referred to as
 the \defnx{default argument promotions}{promotion!default argument promotion}.
 
 \pnum
 \indextext{function call!recursive}%
-Recursive calls are permitted, except to the \tcode{main}
-function\iref{basic.start.main}.
+Recursive calls are permitted, except to the \link{\tcode{main}
+function}{basic.start.main}.
 
 \pnum
 A function call is an lvalue
@@ -3153,8 +3153,8 @@ [expr.type.conv]
 \indextext{type conversion, explicit|see{casting}}%
 \indextext{conversion explicit type|see{casting}}%
 \indextext{casting}%
-A \grammarterm{simple-type-specifier}\iref{dcl.type.simple} or
-\grammarterm{typename-specifier}\iref{temp.res} followed
+A \link{\grammarterm{simple-type-specifier}}{dcl.type.simple} or
+\link{\grammarterm{typename-specifier}}{temp.res} followed
 by a parenthesized optional \grammarterm{expression-list} or
 by a \grammarterm{braced-init-list}
 (the initializer)
@@ -3165,14 +3165,13 @@ [expr.type.conv]
 for a deduced class type,
 it is replaced by the return type
 of the function selected by overload resolution
-for class template deduction\iref{over.match.class.deduct}
+for \link{class template deduction}{over.match.class.deduct}
 for the remainder of this subclause.
 
 \pnum
 If the initializer is a parenthesized single expression,
 the type conversion expression is equivalent
-to the corresponding cast
-expression\iref{expr.cast}.
+to the corresponding \link{cast expression}{expr.cast}.
 \indextext{type!incomplete}%
 Otherwise, if the type is \cv{}~\tcode{void}
 and the initializer is \tcode{()} or \tcode{\{\}}
@@ -3181,7 +3180,7 @@ [expr.type.conv]
 that performs no initialization.
 Otherwise,
 the expression is a prvalue of the specified type
-whose result object is direct-initialized\iref{dcl.init}
+whose result object is \deflinkx{direct-initialized}{direct-initialization}{dcl.init}
 with the initializer.
 If the initializer is a parenthesized optional \grammarterm{expression-list},
 the specified type shall not be an array type.
@@ -3415,8 +3414,8 @@ [expr.dynamic.cast]
 \tcode{T} is ``reference to \cvqual{cv1} \tcode{B}'' and \tcode{v} has
 type \cvqual{cv2} \tcode{D} such that \tcode{B} is a base class of
 \tcode{D}, the result is the unique \tcode{B} subobject of the \tcode{D}
-object referred to by \tcode{v}.\footnote{The most derived
-object\iref{intro.object} pointed or referred to by
+object referred to by \tcode{v}.\footnote{The \deflink{most derived
+object}{intro.object} pointed or referred to by
 \tcode{v} can contain other \tcode{B} objects as base classes, but these
 are ignored.}
 In both the pointer and
@@ -3433,8 +3432,8 @@ [expr.dynamic.cast]
 \end{example}
 
 \pnum
-Otherwise, \tcode{v} shall be a pointer to or a glvalue of a polymorphic
-type\iref{class.virtual}.
+Otherwise, \tcode{v} shall be a pointer to or a glvalue of a
+\deflinkx{polymorphic type}{polymorphic class}{class.virtual}.
 
 \pnum
 If \tcode{v} is a null pointer value, the result is a null pointer value.
@@ -3468,9 +3467,9 @@ [expr.dynamic.cast]
 
 \pnum
 The value of a failed cast to pointer type is the null pointer value of
-the required result type. A failed cast to reference type throws
-an exception\iref{except.throw} of a type that would match a
-handler\iref{except.handle} of type \tcode{std::bad_cast}\iref{bad.cast}.
+the required result type. A failed cast to reference type \link{throws
+an exception}{except.throw} of a type that would match a
+\link{handler}{except.handle} of type \link{\tcode{std::bad_cast}}{bad.cast}.
 
 \indextext{\idxcode{bad_cast}}%
 \indexlibraryglobal{bad_cast}%
@@ -3546,13 +3545,13 @@ [expr.typeid]
 When \tcode{typeid} is applied to an expression other than a glvalue of
 a polymorphic class type, the result refers to a \tcode{std::type_info}
 object representing the static type of the expression.
-Lvalue-to-rvalue\iref{conv.lval}, array-to-pointer\iref{conv.array},
-and function-to-pointer\iref{conv.func} conversions are not applied to
+\link{Lvalue-to-rvalue}{conv.lval}, \link{array-to-pointer}{conv.array},
+and \link{function-to-pointer}{conv.func} conversions are not applied to
 the expression.
 If the expression is a prvalue,
-the temporary materialization conversion\iref{conv.rval}
+the \link{temporary materialization conversion}{conv.rval}
 is applied.
-The expression is an unevaluated operand\iref{expr.prop}.
+The expression is an \deflink{unevaluated operand}{expr.prop}.
 
 \pnum
 When \tcode{typeid} is applied to a \grammarterm{type-id}, the result
@@ -3609,15 +3608,15 @@ [expr.static.cast]
 If \tcode{T} is an lvalue reference type
 or an rvalue reference to function type, the result is an lvalue;
 if \tcode{T} is an rvalue reference to object type, the result is an xvalue;
-otherwise, the result is a prvalue. The \tcode{static_cast} operator shall not cast
-away constness\iref{expr.const.cast}.
+otherwise, the result is a prvalue. The \tcode{static_cast} operator shall not
+\deflinkx{cast away constness}{casting away constness}{expr.const.cast}.
 
 \pnum
 \indextext{cast!static!reference}%
 \indextext{cast!reference}%
 An lvalue of type ``\cvqual{cv1} \tcode{B}'', where \tcode{B} is a class
 type, can be cast to type ``reference to \cvqual{cv2} \tcode{D}'', where
-\tcode{D} is a class derived\iref{class.derived} from \tcode{B},
+\tcode{D} is a class \link{derived}{class.derived} from \tcode{B},
 if \cvqual{cv2} is the
 same cv-qualification as, or greater cv-qualification than,
 \cvqual{cv1}. If \tcode{B} is a virtual base class of \tcode{D}
@@ -3646,14 +3645,14 @@ [expr.static.cast]
 An lvalue
 of type ``\cvqual{cv1} \tcode{T1}'' can be cast to type ``rvalue
 reference to \cvqual{cv2} \tcode{T2}'' if ``\cvqual{cv2} \tcode{T2}'' is
-reference-compatible with ``\cvqual{cv1}
-\tcode{T1}''\iref{dcl.init.ref}. If the value is not a bit-field,
+\deflink{reference-compatible}{dcl.init.ref} with ``\cvqual{cv1}
+\tcode{T1}''. If the value is not a bit-field,
 the result refers to the object or the specified base class subobject
-thereof; otherwise, the lvalue-to-rvalue conversion\iref{conv.lval}
+thereof; otherwise, the \link{lvalue-to-rvalue conversion}{conv.lval}
 is applied to the bit-field and the resulting prvalue is used as the
 \grammarterm{expression} of the \tcode{static_cast} for the remainder of this subclause.
-If \tcode{T2} is an inaccessible\iref{class.access} or
-ambiguous\iref{class.member.lookup} base class of \tcode{T1},
+If \tcode{T2} is an \link{inaccessible}{class.access} or
+\link{ambiguous}{class.member.lookup} base class of \tcode{T1},
 a program that necessitates such a cast is ill-formed.
 
 \pnum
@@ -3691,11 +3690,10 @@ [expr.static.cast]
 
 \pnum
 Any expression can be explicitly converted to type \cv{}~\tcode{void},
-in which case it becomes a discarded-value
-expression\iref{expr.prop}.
+in which case it becomes a \deflink{discarded-value expression}{expr.prop}.
 \begin{note}
-However, if the value is in a temporary
-object\iref{class.temporary}, the destructor for that
+However, if the value is in a \link{temporary
+object}{class.temporary}, the destructor for that
 object is
 not executed until the usual time, and the value of the object is
 preserved for the purpose of executing the destructor.
@@ -3703,13 +3701,13 @@ [expr.static.cast]
 
 
 \pnum
-The inverse of any standard conversion sequence\iref{conv} not containing an
-lvalue-to-rvalue\iref{conv.lval},
-array-to-pointer\iref{conv.array},
-function-to-pointer\iref{conv.func},
-null pointer\iref{conv.ptr}, null member pointer\iref{conv.mem},
-boolean\iref{conv.bool}, or
-function pointer\iref{conv.fctptr}
+The inverse of any \link{standard conversion sequence}{conv} not containing an
+\link{lvalue-to-rvalue}{conv.lval},
+\link{array-to-pointer}{conv.array},
+\link{function-to-pointer}{conv.func},
+\link{null pointer}{conv.ptr}, \link{null member pointer}{conv.mem},
+\link{boolean}{conv.bool}, or
+\link{function pointer}{conv.fctptr}
 conversion, can be performed explicitly using \tcode{static_cast}. A
 program is ill-formed if it uses \tcode{static_cast} to perform the
 inverse of an ill-formed standard conversion sequence.
@@ -3725,12 +3723,12 @@ [expr.static.cast]
 \end{example}
 
 \pnum
-The lvalue-to-rvalue\iref{conv.lval},
-array-to-pointer\iref{conv.array}, and
-function-to-pointer\iref{conv.func} conversions are applied to the
+The \link{lvalue-to-rvalue}{conv.lval},
+\link{array-to-pointer}{conv.array}, and
+\link{function-to-pointer}{conv.func} conversions are applied to the
 operand. Such a \tcode{static_cast} is subject to the restriction that
-the explicit conversion does not cast away
-constness\iref{expr.const.cast}, and the following additional rules
+the explicit conversion does not \deflinkx{cast away
+constness}{casting away constness}{expr.const.cast}, and the following additional rules
 for specific cases:
 
 \pnum
@@ -3768,7 +3766,8 @@ [expr.static.cast]
 A prvalue of type ``pointer to \cvqual{cv1} \tcode{B}'', where \tcode{B}
 is a class type, can be converted to a prvalue of type ``pointer to
 \cvqual{cv2} \tcode{D}'',
-where \tcode{D} is a complete class derived\iref{class.derived}
+where \tcode{D} is a complete class
+\link{derived}{class.derived}
 from \tcode{B},
 if \cvqual{cv2} is the same cv-qualification as,
 or greater cv-qualification than, \cvqual{cv1}.
@@ -3789,7 +3788,7 @@ [expr.static.cast]
 \tcode{T}'' can be converted to a prvalue of type ``pointer to member of
 \tcode{B} of type \cvqual{cv2} \tcode{T}'', where
 \tcode{D} is a complete class type and
-\tcode{B} is a base class\iref{class.derived} of \tcode{D},
+\tcode{B} is a \link{base class}{class.derived} of \tcode{D},
 if \cvqual{cv2} is the same cv-qualification
 as, or greater cv-qualification than, \cvqual{cv1}.
 \begin{note}
@@ -3800,7 +3799,7 @@ [expr.static.cast]
 from ``pointer to member of \tcode{B} of type \tcode{T}''
 to ``pointer to member of \tcode{D} of type \tcode{T}''
 exists\iref{conv.mem}, the program is ill-formed.
-The null member pointer value\iref{conv.mem} is converted to the null
+The \deflink{null member pointer value}{conv.mem} is converted to the null
 member pointer value of the destination type. If class \tcode{B}
 contains the original member, or is a base or derived class of the class
 containing the original member, the resulting pointer to member points
@@ -3823,7 +3822,7 @@ [expr.static.cast]
 then the resulting pointer value is unspecified.
 Otherwise, if the original pointer value points to an object \placeholder{a},
 and there is an object \placeholder{b} of type \tcode{T} (ignoring cv-qualification)
-that is pointer-interconvertible\iref{basic.compound} with \placeholder{a},
+that is \deflink{pointer-interconvertible}{basic.compound} with \placeholder{a},
 the result is a pointer to \placeholder{b}.
 Otherwise, the pointer value is unchanged by the conversion.
 \begin{example}
@@ -3846,14 +3845,14 @@ [expr.reinterpret.cast]
 If \tcode{T} is an lvalue reference type or an rvalue reference to function type, the result is an lvalue;
 if \tcode{T} is an rvalue reference to object type, the result is an xvalue;
 otherwise, the result is a prvalue and the
-lvalue-to-rvalue\iref{conv.lval}, array-to-pointer\iref{conv.array},
-and function-to-pointer\iref{conv.func} standard conversions are
+\link{lvalue-to-rvalue}{conv.lval}, \link{array-to-pointer}{conv.array},
+and \link{function-to-pointer}{conv.func} standard conversions are
 performed on the expression \tcode{v}. Conversions that can be performed explicitly
 using \tcode{reinterpret_cast} are listed below. No other conversion can
 be performed explicitly using \tcode{reinterpret_cast}.
 
 \pnum
-The \tcode{reinterpret_cast} operator shall not cast away constness\iref{expr.const.cast}.
+The \tcode{reinterpret_cast} operator shall not \deflinkx{cast away constness}{casting away constness}{expr.const.cast}.
 An expression of integral, enumeration, pointer, or pointer-to-member type
 can be explicitly converted to its own type; such a cast yields the value of
 its operand.
@@ -3964,7 +3963,7 @@ [expr.reinterpret.cast]
 function types or both object types.\footnote{\tcode{T1} and \tcode{T2} may have
 different \cv-qualifiers, subject to
 the overall restriction that a \tcode{reinterpret_cast} cannot cast away
-constness.} The null member pointer value\iref{conv.mem} is converted to the
+constness.} The \deflink{null member pointer value}{conv.mem} is converted to the
 null member pointer value of the destination type. The result of this
 conversion is unspecified, except in the following cases:
 
@@ -4008,8 +4007,8 @@ [expr.const.cast]
 lvalue;
 if \tcode{T} is an rvalue reference to object type, the result is an xvalue;
 otherwise, the result is a prvalue and the
-lvalue-to-rvalue\iref{conv.lval}, array-to-pointer\iref{conv.array},
-and function-to-pointer\iref{conv.func} standard conversions are
+\link{lvalue-to-rvalue}{conv.lval}, \link{array-to-pointer}{conv.array},
+and \link{function-to-pointer}{conv.func} standard conversions are
 performed on the expression \tcode{v}. Conversions that can be performed explicitly using
 \tcode{const_cast} are listed below. No other conversion shall be
 performed explicitly using \tcode{const_cast}.
@@ -4021,7 +4020,7 @@ [expr.const.cast]
 \end{note}
 
 \pnum
-For two similar types \tcode{T1} and \tcode{T2}\iref{conv.qual},
+For two \deflink{similar types}{conv.qual} \tcode{T1} and \tcode{T2},
 a prvalue of type \tcode{T1} may be explicitly
 converted to the type \tcode{T2} using a \tcode{const_cast}
 if, considering the cv-decompositions of both types,
@@ -4057,7 +4056,7 @@ [expr.const.cast]
 
 The result of a reference \tcode{const_cast} refers
 to the original object if the operand is a glvalue and
-to the result of applying the temporary materialization conversion\iref{conv.rval} otherwise.
+to the result of applying the \link{temporary materialization conversion}{conv.rval} otherwise.
 
 \pnum
 A null pointer value\iref{basic.compound} is converted to the null pointer
@@ -4080,7 +4079,7 @@ [expr.const.cast]
 A conversion from a type \tcode{T1} to a type \tcode{T2}
 \defnx{casts away constness}{casting away constness}
 if \tcode{T1} and \tcode{T2} are different,
-there is a cv-decomposition\iref{conv.qual} of \tcode{T1}
+there is a \deflink{cv-decomposition}{conv.qual} of \tcode{T1}
 yielding \placeholder{n} such that
 \tcode{T2} has a cv-decomposition of the form
 \begin{indented}
@@ -4243,7 +4242,7 @@ [expr.unary.op]
 \pnum
 \indextext{overloaded function!address of}%
 \begin{note}
-The address of an overloaded function\iref{over} can be taken
+The address of an \link{overloaded function}{over} can be taken
 only in a context that uniquely determines which version of the
 overloaded function is referred to (see~\ref{over.over}).
 Since the context might determine whether the operand is a static or
@@ -4270,8 +4269,9 @@ [expr.unary.op]
 
 \pnum
 \indextext{operator!logical negation}%
-The operand of the logical negation operator \tcode{!} is contextually
-converted to \tcode{bool}\iref{conv};
+The operand of the logical negation operator \tcode{!} is
+\deflinkx{contextually converted to \tcode{bool}}
+{conversion!contextual to \tcode{bool}}{conv};
 its value is \tcode{true}
 if the converted operand is \tcode{false} and \tcode{false} otherwise.
 The type of the result is \tcode{bool}.
@@ -4316,8 +4316,8 @@ [expr.pre.incr]
 The expression \tcode{++x} is equivalent to \tcode{x+=1}.
 \indextext{operator!\idxcode{+=}}%
 \begin{note}
-See the discussions of addition\iref{expr.add} and assignment
-operators\iref{expr.ass} for information on conversions.
+See the discussions of \link{addition}{expr.add} and \link{assignment
+operators}{expr.ass} for information on conversions.
 \end{note}
 
 \pnum
@@ -4572,7 +4572,7 @@ [expr.sizeof]
 function-to-pointer\iref{conv.func} standard conversions are not
 applied to the operand of \tcode{sizeof}.
 If the operand is a prvalue,
-the temporary materialization conversion\iref{conv.rval}
+the \link{temporary materialization conversion}{conv.rval}
 is applied.
 
 \pnum
@@ -4713,7 +4713,7 @@ [expr.new]
 \end{bnf}
 
 \pnum
-If a placeholder type\iref{dcl.spec.auto} appears in the
+If a \link{placeholder type}{dcl.spec.auto} appears in the
 \grammarterm{type-specifier-seq} of a \grammarterm{new-type-id} or
 \grammarterm{type-id} of a \grammarterm{new-expression},
 the allocated type is deduced as follows:
@@ -4769,9 +4769,8 @@ [expr.new]
 \end{codeblock}
 
 Instead, the explicitly parenthesized version of the \tcode{new}
-operator can be used to create objects of compound
-types\iref{basic.compound}:
-
+operator can be used to create objects of \link{compound
+types}{basic.compound}:
 \begin{codeblock}
 new (int (*[10])());
 \end{codeblock}
@@ -4848,7 +4847,7 @@ [expr.new]
 
 \item
 its value is such that the size of the allocated object would exceed the
-\impldef{maximum size of an allocated object} limit\iref{implimits}; or
+\impldef{maximum size of an allocated object} \link{limit}{implimits}; or
 
 \item
 the \grammarterm{new-initializer} is a \grammarterm{braced-init-list} and the
@@ -4873,7 +4872,7 @@ [expr.new]
 \item
 otherwise, the \grammarterm{new-expression} terminates by throwing an
 exception of a type that would match a handler\iref{except.handle} of type
-\tcode{std::bad_array_new_length}\iref{new.badlength}.
+\link{\tcode{std::bad_array_new_length}}{new.badlength}.
 \end{itemize}
 \end{itemize}
 When the value of the \grammarterm{expression} is zero, the allocation
@@ -4883,8 +4882,8 @@ [expr.new]
 A \grammarterm{new-expression} may obtain storage for the object by calling an
 allocation function\iref{basic.stc.dynamic.allocation}. If
 the \grammarterm{new-expression} terminates by throwing an exception, it
-may release storage by calling a deallocation
-function\iref{basic.stc.dynamic.deallocation}. If the allocated type
+may release storage by calling a \link{deallocation
+function}{basic.stc.dynamic.deallocation}. If the allocated type
 is a non-array type, the allocation function's name is
 \indextext{\idxcode{operator new}}%
 \indextext{\idxcode{operator delete}}%
@@ -4999,7 +4998,7 @@ [expr.new]
 result of the \grammarterm{new-expression} and the address returned by the
 allocation function shall be an integral multiple of the
 strictest fundamental
-alignment requirement\iref{basic.align} of any object type whose size
+\link{alignment requirement}{basic.align} of any object type whose size
 is no greater than the size of the array being created.
 \begin{note}
 \indextext{allocation!alignment storage}%
@@ -5090,7 +5089,7 @@ [expr.new]
 \pnum
 \begin{note}
 Unless an allocation function has a non-throwing
-exception specification\iref{except.spec},
+\link{exception specification}{except.spec},
 it indicates failure to allocate storage by throwing a
 \indextext{\idxcode{bad_alloc}}%
 \indexlibraryglobal{bad_alloc}%
@@ -5232,8 +5231,8 @@ [expr.delete]
 \pnum
 \indextext{expression!\idxcode{delete}}%
 \indextext{\idxcode{delete}}%
-The \grammarterm{delete-expression} operator destroys a most derived
-object\iref{intro.object} or array created by a
+The \grammarterm{delete-expression} operator destroys a
+\deflink{most derived object}{intro.object} or array created by a
 \grammarterm{new-expression}.
 
 \begin{bnf}
@@ -5251,7 +5250,7 @@ [expr.delete]
 that consists of empty square brackets can follow the \tcode{delete} keyword
 if the \grammarterm{lambda-expression} is enclosed in parentheses.}
 The operand shall be of pointer to object type or of class type. If of
-class type, the operand is contextually implicitly converted\iref{conv}
+class type, the operand is \deflink{contextually implicitly converted}{conv}
 to a pointer to object
 type.\footnote{This implies that an object
 cannot be deleted using a pointer of type
@@ -5269,8 +5268,9 @@ [expr.delete]
 \tcode{delete} may be a null pointer value, a pointer to a non-array object
 created by a previous \grammarterm{new-expression},
 or a pointer to a
-subobject\iref{intro.object} representing a base class of such an
-object\iref{class.derived}. If not, the behavior is undefined.
+\deflink{subobject}{intro.object} representing a
+\link{base class}{class.derived} of such an
+object. If not, the behavior is undefined.
 \indextext{array!\idxcode{delete}}%
 In an array delete expression, the value of the operand of \tcode{delete}
 may be a null pointer value or a pointer value that resulted from
@@ -5286,8 +5286,9 @@ [expr.delete]
 \end{note}
 \begin{note}
 A pointer to a \tcode{const} type can be the operand of a
-\grammarterm{delete-expression}; it is not necessary to cast away the
-constness\iref{expr.const.cast} of the pointer expression before it is
+\grammarterm{delete-expression}; it is not necessary to
+\deflinkx{cast away the constness}{casting away constness}{expr.const.cast}
+of the pointer expression before it is
 used as the operand of the \grammarterm{delete-expression}.
 \end{note}
 
@@ -5333,8 +5334,8 @@ [expr.delete]
 \item
 If the allocation call for the \grammarterm{new-expression} for the object to
 be deleted was not omitted and the allocation was not extended\iref{expr.new}, the
-\grammarterm{delete-expression} shall call a deallocation
-function\iref{basic.stc.dynamic.deallocation}. The value returned from the
+\grammarterm{delete-expression} shall call a \link{deallocation
+function}{basic.stc.dynamic.deallocation}. The value returned from the
 allocation call of the \grammarterm{new-expression} shall be passed as the
 first argument to the deallocation function.
 
@@ -5483,8 +5484,8 @@ [expr.cast]
 \end{note}
 
 \pnum
-An explicit type conversion can be expressed using functional
-notation\iref{expr.type.conv}, a type conversion operator
+An explicit type conversion can be expressed using \link{functional
+notation}{expr.type.conv}, a type conversion operator
 (\tcode{dynamic_cast}, \tcode{static_cast}, \tcode{reinterpret_cast},
 \tcode{const_cast}), or the \term{cast} notation.
 
@@ -5504,10 +5505,10 @@ [expr.cast]
 \indextext{cast!const}%
 \indextext{cast!static}%
 \indextext{cast!reinterpret}%
-\item a \tcode{const_cast}\iref{expr.const.cast},
-\item a \tcode{static_cast}\iref{expr.static.cast},
+\item a \link{\tcode{const_cast}}{expr.const.cast},
+\item a \link{\tcode{static_cast}}{expr.static.cast},
 \item a \tcode{static_cast} followed by a \tcode{const_cast},
-\item a \tcode{reinterpret_cast}\iref{expr.reinterpret.cast}, or
+\item a \link{\tcode{reinterpret_cast}}{expr.reinterpret.cast}, or
 \item a \tcode{reinterpret_cast} followed by a \tcode{const_cast},
 \end{itemize}
 can be performed using the cast notation of explicit type conversion.
@@ -5659,8 +5660,8 @@ [expr.mptr.oper]
 whose second operand is a pointer to a data member is an lvalue if the first
 operand is an lvalue and an xvalue otherwise. The result of a \tcode{.*} expression whose
 second operand is a pointer to a member function is a prvalue.
-If the second operand is the null
-member pointer value\iref{conv.mem}, the behavior is undefined.
+If the second operand is the \deflink{null member pointer value}{conv.mem},
+the behavior is undefined.
 
 \rSec2[expr.mul]{Multiplicative operators}%
 \indextext{expression!multiplicative operators}%
@@ -5689,7 +5690,7 @@ [expr.mul]
 \pnum
 The operands of \tcode{*} and \tcode{/} shall have arithmetic or unscoped
 enumeration type; the operands of \tcode{\%} shall have integral or unscoped
-enumeration type. The usual arithmetic conversions\iref{expr.arith.conv} are performed on the
+enumeration type. The \link{usual arithmetic conversions}{expr.arith.conv} are performed on the
 operands and determine the type of the result.
 
 \pnum
@@ -5714,7 +5715,7 @@ [expr.add]
 
 \pnum
 The additive operators \tcode{+} and \tcode{-} group left-to-right. The
-usual arithmetic conversions\iref{expr.arith.conv} are performed for operands of arithmetic or
+\link{usual arithmetic conversions}{expr.arith.conv} are performed for operands of arithmetic or
 enumeration type.
 
 \indextext{operator!addition}%
@@ -5810,7 +5811,7 @@ [expr.add]
 \pnum
 For addition or subtraction, if the expressions \tcode{P} or \tcode{Q} have
 type ``pointer to \cv{}~\tcode{T}'', where \tcode{T} and the array element type
-are not similar\iref{conv.qual}, the behavior is undefined.
+are not \deflinkx{similar}{similar types}{conv.qual}, the behavior is undefined.
 \begin{note}
 In particular, a pointer to a base class cannot be used for
 pointer arithmetic when the array contains objects of a derived class type.
@@ -5896,12 +5897,12 @@ [expr.spaceship]
 If both operands have arithmetic types,
 or one operand has integral type and
 the other operand has unscoped enumeration type,
-the usual arithmetic conversions\iref{expr.arith.conv} are applied to the operands.
+the \link{usual arithmetic conversions}{expr.arith.conv} are applied to the operands.
 Then:
 
 \begin{itemize}
 \item
-If a narrowing conversion\iref{dcl.init.list} is required,
+If a \deflink{narrowing conversion}{dcl.init.list} is required,
 other than from an integral type to a floating-point type,
 the program is ill-formed.
 
@@ -5943,13 +5944,13 @@ [expr.spaceship]
 array-to-pointer conversions\iref{conv.array},
 pointer conversions\iref{conv.ptr},
 and
-qualification conversions\iref{conv.qual}
+\link{qualification conversions}{conv.qual}
 are performed on both operands
 to bring them to their composite pointer type\iref{expr.type}.
 After the conversions, the operands shall have the same type.
 \begin{note}
 If both of the operands are arrays,
-array-to-pointer conversions\iref{conv.array} are not applied.
+\link{array-to-pointer conversions}{conv.array} are not applied.
 \end{note}
 
 \pnum
@@ -5979,8 +5980,8 @@ [expr.spaceship]
 if the header \libheaderref{compare}
 is not imported or included prior to a use of such a class type --
 even an implicit use in which the type is not named
-(e.g., via the \tcode{auto} specifier\iref{dcl.spec.auto}
-in a defaulted three-way comparison\iref{class.spaceship}
+(e.g., via the \link{\tcode{auto} specifier}{dcl.spec.auto}
+in a defaulted \link{three-way comparison}{class.spaceship}
 or use of the built-in operator) -- the program is ill-formed.
 
 \rSec2[expr.rel]{Relational operators}%
@@ -6029,11 +6030,11 @@ [expr.rel]
 \tcode{bool}.
 
 \pnum
-The usual arithmetic conversions\iref{expr.arith.conv} are performed on operands of arithmetic
-or enumeration type. If both operands are pointers, pointer
-conversions\iref{conv.ptr} and qualification conversions\iref{conv.qual}
+The \link{usual arithmetic conversions}{expr.arith.conv} are performed on operands of arithmetic
+or enumeration type. If both operands are pointers, \link{pointer
+conversions}{conv.ptr} and \link{qualification conversions}{conv.qual}
 are performed to bring
-them to their composite pointer type\iref{expr.type}.
+them to their \deflink{composite pointer type}{expr.type}.
 After conversions, the operands shall have the same type.
 
 \pnum
@@ -6064,7 +6065,7 @@ [expr.rel]
 \end{itemize}
 
 \pnum
-If two operands \tcode{p} and \tcode{q} compare equal\iref{expr.eq},
+If two operands \tcode{p} and \tcode{q} \link{compare equal}{expr.eq},
 \tcode{p<=q} and \tcode{p>=q} both yield \tcode{true} and \tcode{p<q} and
 \tcode{p>q} both yield \tcode{false}. Otherwise, if a pointer \tcode{p}
 compares greater than a pointer \tcode{q}, \tcode{p>=q}, \tcode{p>q},
@@ -6112,10 +6113,10 @@ [expr.eq]
 \indextext{comparison!pointer}%
 \indextext{comparison!pointer to function}%
 If at least one of the operands is a pointer,
-pointer conversions\iref{conv.ptr},
-function pointer conversions\iref{conv.fctptr}, and
-qualification conversions\iref{conv.qual}
-are performed on both operands to bring them to their composite pointer type\iref{expr.type}.
+\link{pointer conversions}{conv.ptr},
+\link{function pointer conversions}{conv.fctptr}, and
+\link{qualification conversions}{conv.qual}
+are performed on both operands to bring them to their \deflink{composite pointer type}{expr.type}.
 Comparing pointers is defined as follows:
 
 \begin{itemize}
@@ -6130,7 +6131,8 @@ [expr.eq]
 \item
 Otherwise, if the pointers are both null, both point to the same
 \indextext{address}%
-function, or both represent the same address\iref{basic.compound},
+function, or both
+\deflinkx{represent the same address}{represents the address}{basic.compound},
 they compare equal.
 \item
 Otherwise, the pointers compare unequal.
@@ -6175,12 +6177,12 @@ [expr.eq]
 \end{example}
 
 \item
-If both refer to (possibly different) members of the same union\iref{class.union},
+If both refer to (possibly different) members of the same \link{union}{class.union},
 they compare equal.
 
 \item
 Otherwise, two pointers to members compare equal if they would refer to the same member of
-the same most derived object\iref{intro.object} or the same subobject if
+the same \deflink{most derived object}{intro.object} or the same subobject if
 indirection with a hypothetical object of the associated
 class type were performed, otherwise they compare unequal.
 \begin{example}
@@ -6215,8 +6217,8 @@ [expr.eq]
 operators is unspecified.
 
 \pnum
-If both operands are of arithmetic or enumeration type, the usual arithmetic
-conversions\iref{expr.arith.conv} are performed on both operands; each of the operators shall yield
+If both operands are of arithmetic or enumeration type, the \link{usual arithmetic
+conversions}{expr.arith.conv} are performed on both operands; each of the operators shall yield
 \tcode{true} if the specified relationship is true and \tcode{false} if it is
 false.
 
@@ -6310,9 +6312,9 @@ [expr.log.and]
 
 \pnum
 The \tcode{\&\&} operator groups left-to-right. The operands are both
-contextually converted to \tcode{bool}\iref{conv}.
-The
-result is \tcode{true} if both operands are \tcode{true} and
+\deflinkx{contextually converted to \tcode{bool}}
+{conversion!contextual to \tcode{bool}}{conv}.
+The result is \tcode{true} if both operands are \tcode{true} and
 \tcode{false} otherwise. Unlike \tcode{\&}, \tcode{\&\&} guarantees
 left-to-right evaluation: the second operand is not evaluated if the
 first operand is \tcode{false}.
@@ -6337,7 +6339,8 @@ [expr.log.or]
 
 \pnum
 The \tcode{||} operator groups left-to-right. The operands are both
-contextually converted to \tcode{bool}\iref{conv}.
+\deflinkx{contextually converted to \tcode{bool}}
+{conversion!contextual to \tcode{bool}}{conv}.
 The result is
 \tcode{true} if either of its operands is \tcode{true}, and
 \tcode{false} otherwise. Unlike \tcode{|}, \tcode{||} guarantees
@@ -6364,8 +6367,8 @@ [expr.cond]
 
 \pnum
 Conditional expressions group right-to-left. The first expression is
-contextually converted to \tcode{bool}\iref{conv}.
-It is
+\deflinkx{contextually converted to \tcode{bool}}
+{conversion!contextual to \tcode{bool}}{conv}. It is
 evaluated and if it is \tcode{true}, the result of the conditional
 expression is the value of the second expression, otherwise that of the
 third expression. Only one of the second and third expressions is
@@ -6406,7 +6409,7 @@ [expr.cond]
 either has (possibly cv-qualified) class type, or if both
 are glvalues of the same value category and the same type except for
 cv-qualification, an attempt is made to
-form an implicit conversion sequence\iref{over.best.ics} from
+form an \link{implicit conversion sequence}{over.best.ics} from
 each of those operands to the type of the other.
 \begin{note}
 Properties such as access, whether an operand is a bit-field, or whether
@@ -6441,9 +6444,9 @@ [expr.cond]
 
 \item otherwise, the target type is the type that \tcode{E2} would have
 after applying the
-lvalue-to-rvalue\iref{conv.lval},
-array-to-pointer\iref{conv.array}, and
-function-to-pointer\iref{conv.func}
+\link{lvalue-to-rvalue}{conv.lval},
+\link{array-to-pointer}{conv.array}, and
+\link{function-to-pointer}{conv.func}
 standard conversions.
 \end{itemize}
 \end{itemize}
@@ -6481,8 +6484,8 @@ [expr.cond]
 subclause.
 
 \pnum
-Lvalue-to-rvalue\iref{conv.lval}, array-to-pointer\iref{conv.array},
-and function-to-pointer\iref{conv.func} standard conversions are
+\link{Lvalue-to-rvalue}{conv.lval}, \link{array-to-pointer}{conv.array},
+and \link{function-to-pointer}{conv.func} standard conversions are
 performed on the second and third operands. After those conversions, one
 of the following shall hold:
 
@@ -6491,15 +6494,15 @@ [expr.cond]
 that type and the result object is initialized using the selected operand.
 
 \item The second and third operands have arithmetic or enumeration type;
-the usual arithmetic conversions\iref{expr.arith.conv} are performed to bring them to a common
+the \link{usual arithmetic conversions}{expr.arith.conv} are performed to bring them to a common
 type, and the result is of that type.
 
 \item One or both of the second and third operands have pointer type;
-pointer conversions\iref{conv.ptr},
-function pointer conversions\iref{conv.fctptr}, and
-qualification conversions\iref{conv.qual}
+\link{pointer conversions}{conv.ptr},
+\link{function pointer conversions}{conv.fctptr}, and
+\link{qualification conversions}{conv.qual}
 are performed to bring them to their
-composite pointer type\iref{expr.type}. The result is of the composite
+\deflink{composite pointer type}{expr.type}. The result is of the composite
 pointer type.
 
 \item One or both of the second and third operands have pointer-to-member type;
@@ -6584,8 +6587,8 @@ [expr.throw]
 A \grammarterm{throw-expression} is of type \tcode{void}.
 
 \pnum
-Evaluating a \grammarterm{throw-expression} with an operand throws an
-exception\iref{except.throw}; the type of the exception object is determined by removing
+Evaluating a \grammarterm{throw-expression} with an operand \link{throws an
+exception}{except.throw}; the type of the exception object is determined by removing
 any top-level \grammarterm{cv-qualifier}{s} from the static type of the
 operand and adjusting the type
 from ``array of \tcode{T}'' or function type \tcode{T}
@@ -6595,7 +6598,8 @@ [expr.throw]
 \indextext{exception handling!rethrow}%
 A
 \grammarterm{throw-expression}
-with no operand rethrows the currently handled exception\iref{except.handle}.
+with no operand rethrows the
+\deflinkx{currently handled exception}{exception handling!currently handled exception}{except.handle}.
 The exception is reactivated with the existing exception object;
 no new exception object is created.
 The exception is no longer considered to be caught.
@@ -6620,7 +6624,7 @@ [expr.throw]
 evaluating a
 \grammarterm{throw-expression}
 with no operand calls
-\tcode{std::\brk{}terminate()}\iref{except.terminate}.
+\link{\tcode{std::\brk{}terminate()}}{except.terminate}.
 
 \rSec2[expr.ass]{Assignment and compound assignment operators}%
 \indextext{expression!assignment and compound assignment}
@@ -6681,7 +6685,7 @@ [expr.ass]
 \pnum
 \indextext{assignment!conversion by}%
 If the right operand is an expression, it is implicitly
-converted\iref{conv} to the cv-unqualified type of the left
+\link{converted}{conv} to the cv-unqualified type of the left
 operand.
 
 \pnum
@@ -6761,7 +6765,7 @@ [expr.comma]
 
 A pair of expressions separated by a comma is evaluated left-to-right;
 the left expression is
-a discarded-value expression\iref{expr.prop}.
+a \deflink{discarded-value expression}{expr.prop}.
 The left expression is sequenced before
 the right expression\iref{intro.execution}.
 \indextext{operator!side effects and comma}%
@@ -6791,7 +6795,7 @@ [expr.comma]
 \begin{note}
 A comma expression
 appearing as the \grammarterm{expr-or-braced-init-list}
-of a subscripting expression\iref{expr.sub} is deprecated;
+of a \link{subscripting}{expr.sub} expression is deprecated;
 see \ref{depr.comma.subscript}.
 \end{note}
 
@@ -6803,7 +6807,7 @@ [expr.const]
 requirements as detailed in this subclause; other contexts have different
 semantics depending on whether or not an expression satisfies these requirements.
 Expressions that satisfy these requirements,
-assuming that copy elision\iref{class.copy.elision} is not performed,
+assuming that \link{copy elision}{class.copy.elision} is not performed,
 are called
 \indexdefn{expression!constant}%
 \defnx{constant expressions}{constant expression}.
@@ -6856,8 +6860,8 @@ [expr.const]
 An object or reference is \defn{usable in constant expressions} if it is
 \begin{itemize}
 \item a variable that is usable in constant expressions, or
-\item a template parameter object\iref{temp.param}, or
-\item a string literal object\iref{lex.string}, or
+\item a \link{template parameter}{temp.param} object, or
+\item a \link{string literal}{lex.string} object, or
 \item a temporary object of non-volatile const-qualified literal type
   whose lifetime is extended\iref{class.temporary}
   to that of a variable that is usable in constant expressions, or
@@ -6870,14 +6874,14 @@ [expr.const]
 machine\iref{intro.execution}, would evaluate one of the following:
 \begin{itemize}
 \item
-\tcode{this}\iref{expr.prim.this}, except in a constexpr
-function\iref{dcl.constexpr} that is being evaluated as part
+\link{\tcode{this}}{expr.prim.this}, except in a
+\deflinkx{constexpr function}{specifier!constexpr!function}{dcl.constexpr} that is being evaluated as part
 of $E$;
 
 \item
 an invocation of a non-constexpr function
 \begin{note}
-Overload resolution\iref{over.match}
+\link{Overload resolution}{over.match}
 is applied as usual.
 \end{note}%
 ;
@@ -6891,7 +6895,7 @@ [expr.const]
 for a constexpr function;
 
 \item
-an invocation of a virtual function\iref{class.virtual}
+an invocation of a \deflinkx{virtual function}{function!virtual}{class.virtual}
 for an object unless
   \begin{itemize}
   \item the object is usable in constant expressions or
@@ -6909,13 +6913,13 @@ [expr.const]
 \begin{note}
 including,
 for example, signed integer overflow\iref{expr.prop}, certain
-pointer arithmetic\iref{expr.add}, division by
-zero\iref{expr.mul}, or certain shift operations\iref{expr.shift}
+pointer arithmetic\iref{expr.add}, \link{division by
+zero}{expr.mul}, or certain \link{shift operations}{expr.shift}
 \end{note}%
 ;
 
 \item
-an lvalue-to-rvalue conversion\iref{conv.lval} unless
+an \link{lvalue-to-rvalue conversion}{conv.lval} unless
 it is applied to
 \begin{itemize}
   \item
@@ -6928,13 +6932,13 @@ [expr.const]
 \end{itemize}
 
 \item
-an lvalue-to-rvalue conversion\iref{conv.lval}
+an \link{lvalue-to-rvalue conversion}{conv.lval}
 that is applied to a glvalue
 that refers to a non-active member of a union or a subobject thereof;
 
 \item
 an lvalue-to-rvalue conversion that is applied to
-an object with an indeterminate value\iref{basic.indet};
+an object with an \deflinkx{indeterminate value}{value!indeterminate}{basic.indet};
 
 \item
 an invocation of an implicitly-defined copy/move constructor or
@@ -6959,7 +6963,7 @@ [expr.const]
 a reference to \tcode{this} or to a variable with
 automatic storage duration defined outside that
 \grammarterm{lambda-expression}, where
-the reference would be an odr-use~(\ref{basic.def.odr}, \ref{expr.prim.lambda});
+the reference would be an \link{odr-use}{basic.def.odr};
 \begin{example}
 \begin{codeblock}
 void g() {
@@ -7153,9 +7157,9 @@ [expr.const]
 unscoped enumeration type, implicitly converted to a prvalue, where the converted expression is a core constant expression.
 \begin{note}
 Such expressions may be
-used as bit-field lengths\iref{class.bit}, as enumerator
+used as \link{bit-field}{class.bit} lengths, as enumerator
 initializers if the underlying type is not fixed\iref{dcl.enum},
-and as alignments\iref{dcl.align}.
+and as \link{alignments}{dcl.align}.
 \end{note}
 
 \pnum
@@ -7187,29 +7191,30 @@ [expr.const]
 implicit conversion sequence contains only
 \begin{itemize}
 \item user-defined conversions,
-\item lvalue-to-rvalue conversions\iref{conv.lval},
-\item array-to-pointer conversions\iref{conv.array},
-\item function-to-pointer conversions\iref{conv.func},
-\item qualification conversions\iref{conv.qual},
-\item integral promotions\iref{conv.prom},
-\item integral conversions\iref{conv.integral} other than narrowing conversions\iref{dcl.init.list},
-\item null pointer conversions\iref{conv.ptr} from \tcode{std::nullptr_t},
-\item null member pointer conversions\iref{conv.mem} from \tcode{std::nullptr_t}, and
-\item function pointer conversions\iref{conv.fctptr},
+\item \link{lvalue-to-rvalue conversions}{conv.lval},
+\item \link{array-to-pointer conversions}{conv.array},
+\item \link{function-to-pointer conversions}{conv.func},
+\item \link{qualification conversions}{conv.qual},
+\item \deflink{integral promotions}{conv.prom},
+\item \link{integral conversions}{conv.integral} other than
+\deflinkx{narrowing conversions}{narrowing conversion}{dcl.init.list},
+\item \deflinkx{null pointer conversions}{null pointer conversion}{conv.ptr} from \tcode{std::nullptr_t},
+\item \deflinkx{null member pointer conversions}{null member pointer conversion}{conv.mem} from \tcode{std::nullptr_t}, and
+\item \link{function pointer conversions}{conv.fctptr},
 \end{itemize}
 and where the reference binding (if any) binds directly.
 \begin{note}
-Such expressions may be used in \tcode{new}
-expressions\iref{expr.new}, as case expressions\iref{stmt.switch},
+Such expressions may be used in \link{\tcode{new}
+expressions}{expr.new}, as \link{case expressions}{stmt.switch},
 as enumerator initializers if the underlying type is
-fixed\iref{dcl.enum}, as array bounds\iref{dcl.array}, and
-as non-type template
-arguments\iref{temp.arg}.
+\deflinkx{fixed}{type!underlying!fixed}{dcl.enum}, as \link{array}{dcl.array} bounds, and
+as non-type \link{template arguments}{temp.arg}.
 \end{note}
 \indextext{contextually converted constant expression of type \tcode{bool}|see{conversion, contextual}}%
 \indextext{conversion!contextual to constant expression of type \tcode{bool}}%
 A \term{contextually converted constant expression of type \tcode{bool}} is
-an expression, contextually converted to \tcode{bool}\iref{conv},
+an expression, \deflinkx{contextually converted to \tcode{bool}}
+{conversion!contextual to \tcode{bool}}{conv},
 where the converted expression is a constant expression and
 the conversion sequence contains only the conversions above.
 
@@ -7337,7 +7342,7 @@ [expr.const]
 a manifestly constant-evaluated expression,
 
 \item
-a potentially-evaluated expression\iref{basic.def.odr},
+a \deflinkx{potentially-evaluated}{potentially evaluated}{basic.def.odr} expression,
 
 \item
 an immediate subexpression of a \grammarterm{braced-init-list},%
@@ -7361,7 +7366,9 @@ [expr.const]
 if it is:
 \begin{itemize}
 \item
-a constexpr function that is named by an expression\iref{basic.def.odr}
+a constexpr function that
+\deflinkx{is named by}{function!named by expression or conversion}{basic.def.odr}
+an expression
 that is potentially constant evaluated, or
 
 \item
diff --git a/source/statements.tex b/source/statements.tex
index d26ffd79..f681f617 100644
--- a/source/statements.tex
+++ b/source/statements.tex
@@ -99,7 +99,7 @@ [stmt.pre]
 The value of a \grammarterm{condition} that is an initialized declaration
 in a statement other than a \tcode{switch} statement is the value of the
 declared variable
-contextually converted to \tcode{bool}\iref{conv}.
+\deflinkx{contextually converted to \tcode{bool}}{conversion!contextual to bool}{conv}.
 If that
 conversion is ill-formed, the program is ill-formed. The value of a
 \grammarterm{condition} that is an initialized declaration in a
@@ -153,8 +153,8 @@ [stmt.label]
 identifiers.
 \begin{note}
 A label may have the same name as another declaration in the same scope or a
-\grammarterm{template-parameter} from an enclosing scope. Unqualified name
-lookup\iref{basic.lookup.unqual} ignores labels.
+\grammarterm{template-parameter} from an enclosing scope. \link{Unqualified name
+lookup}{basic.lookup.unqual} ignores labels.
 \end{note}
 
 \pnum
@@ -174,7 +174,7 @@ [stmt.expr]
 \end{bnf}
 
 The expression is
-a discarded-value expression\iref{expr.context}.
+a \deflink{discarded-value expression}{expr.context}.
 All
 \indextext{side effects}%
 side effects from an expression statement
@@ -187,8 +187,8 @@ [stmt.expr]
 Most statements are expression statements --- usually assignments or
 function calls. A null statement is useful to carry a label just before
 the \tcode{\}} of a compound statement and to supply a null body to an
-iteration statement such as a \tcode{while}
-statement\iref{stmt.while}.
+iteration statement such as a \link{\tcode{while}
+statement}{stmt.while}.
 \end{note}
 
 \rSec1[stmt.block]{Compound statement or block}%
@@ -211,7 +211,7 @@ [stmt.block]
     statement-seq statement
 \end{bnf}
 
-A compound statement defines a block scope\iref{basic.scope}.
+A compound statement defines a \deflink{block scope}{basic.scope}.
 \begin{note}
 A declaration is a \grammarterm{statement}\iref{stmt.dcl}.
 \end{note}
@@ -277,9 +277,9 @@ [stmt.if]
 
 \pnum
 If the \tcode{if} statement is of the form \tcode{if constexpr}, the value
-of the condition shall be a contextually
-converted constant expression of type \tcode{bool}\iref{expr.const}; this
-form is called a \defn{constexpr if} statement. If the value of the
+of the condition shall be a
+\deflink{contextually converted constant expression of type \tcode{bool}}{expr.const};
+this form is called a \defn{constexpr if} statement. If the value of the
 converted condition is \tcode{false}, the first substatement is a
 \defn{discarded statement}, otherwise the second substatement, if
 present, is a discarded statement. During the instantiation of an
@@ -287,14 +287,14 @@ [stmt.if]
 not value-dependent after its instantiation, the discarded substatement
 (if any) is not instantiated.
 \begin{note}
-Odr-uses\iref{basic.def.odr} in a discarded statement do not require
+\link{Odr-uses}{basic.def.odr} in a discarded statement do not require
 an entity to be defined.
 \end{note}
 A \tcode{case} or \tcode{default} label appearing within such an
-\tcode{if} statement shall be associated with a \tcode{switch}
-statement\iref{stmt.switch} within the same \tcode{if} statement.
-A label\iref{stmt.label} declared in a substatement of a constexpr if
-statement shall only be referred to by a statement\iref{stmt.goto} in
+\tcode{if} statement shall be associated with a \link{\tcode{switch}
+statement}{stmt.switch} within the same \tcode{if} statement.
+A \link{label}{stmt.label} declared in a substatement of a constexpr if
+statement shall only be referred to by a \link{statement}{stmt.goto} in
 the same substatement.
 \begin{example}
 \begin{codeblock}
@@ -355,10 +355,10 @@ [stmt.switch]
 \pnum
 The condition shall be of integral type, enumeration type, or class
 type. If of class type, the
-condition is contextually implicitly converted\iref{conv} to
+condition is \deflink{contextually implicitly converted}{conv} to
 an integral or enumeration type.
-If the (possibly converted) type is subject to integral
-promotions\iref{conv.prom}, the condition is converted
+If the (possibly converted) type is subject to \link{integral
+promotions}{conv.prom}, the condition is converted
 to the promoted type.
 Any
 statement within the \tcode{switch} statement can be labeled with one or
@@ -368,7 +368,7 @@ [stmt.switch]
 \keyword{case} constant-expression \terminal{:}
 \end{ncbnf}
 where the \grammarterm{constant-expression} shall be
-a converted constant expression\iref{expr.const} of the
+a converted \link{constant expression}{expr.const} of the
 adjusted type of the switch condition. No two of the case constants in
 the same switch shall have the same value after conversion.
 
@@ -399,7 +399,7 @@ [stmt.switch]
 \pnum
 \tcode{case} and \tcode{default} labels in themselves do not alter the
 flow of control, which continues unimpeded across such labels. To exit
-from a switch, see \tcode{break}, \ref{stmt.break}.
+from a switch, see \link{\tcode{break}}{stmt.break}.
 \begin{note}
 Usually, the substatement that is the subject of a switch is compound
 and \tcode{case} and \tcode{default} labels appear on the top-level
@@ -465,7 +465,7 @@ [stmt.iter]
 \pnum
 \indextext{scope!\idxgram{iteration-statement}}%
 The substatement in an \grammarterm{iteration-statement} implicitly defines
-a block scope\iref{basic.scope} which is entered and exited each time
+a block \link{scope}{basic.scope} which is entered and exited each time
 through the loop.
 If the substatement in an \grammarterm{iteration-statement} is
 a single statement and not a \grammarterm{compound-statement},
@@ -552,7 +552,7 @@ [stmt.do]
 \indextext{statement!\idxcode{do}}
 
 \pnum
-The expression is contextually converted to \tcode{bool}\iref{conv};
+The expression is \deflinkx{contextually converted to \tcode{bool}}{conversion!contextual to bool}{conv};
 if that conversion is ill-formed, the program is ill-formed.
 
 \pnum
@@ -718,8 +718,8 @@ [stmt.jump]
 \pnum
 \indextext{local variable!destruction of}%
 \indextext{scope!destructor and exit from}%
-On exit from a scope (however accomplished), objects with automatic storage
-duration\iref{basic.stc.auto} that have been constructed in that scope are destroyed
+On exit from a scope (however accomplished), objects with \link{automatic storage
+duration}{basic.stc.auto} that have been constructed in that scope are destroyed
 in the reverse order of their construction.
 \begin{note}
 For temporaries,
@@ -815,8 +815,8 @@ [stmt.return]
 The \grammarterm{expr-or-braced-init-list}
 of a \tcode{return} statement is called its operand. A \tcode{return} statement with
 no operand shall be used only in a function whose return type is
-\cv{}~\tcode{void}, a constructor\iref{class.ctor}, or a
-destructor\iref{class.dtor}.
+\cv{}~\tcode{void}, a \link{constructor}{class.ctor}, or a
+\link{destructor}{class.dtor}.
 \indextext{\idxcode{return}!constructor and}%
 \indextext{\idxcode{return}!constructor and}%
 A \tcode{return} statement with an operand of type \tcode{void} shall be used only
@@ -826,7 +826,7 @@ [stmt.return]
 \indextext{conversion!return type}%
 the \tcode{return} statement initializes the
 glvalue result or prvalue result object of the (explicit or implicit) function call
-by copy-initialization\iref{dcl.init} from the operand.
+by \deflink{copy-initialization}{dcl.init} from the operand.
 \begin{note}
 A \tcode{return} statement can involve
 an invocation of a constructor to perform a copy or move of the operand
@@ -857,7 +857,7 @@ [stmt.return]
 a non-coroutine function with a \cv{}~\tcode{void} return type is
 equivalent to a \tcode{return} with no operand.
 Otherwise, flowing off the end of a function
-other than \tcode{main}\iref{basic.start.main} or a coroutine\iref{dcl.fct.def.coroutine}
+other than \link{\tcode{main}}{basic.start.main} or a coroutine\iref{dcl.fct.def.coroutine}
 results in undefined behavior.
 
 \pnum
@@ -923,7 +923,7 @@ [stmt.goto]
 The \tcode{goto} statement unconditionally transfers control to the
 statement labeled by the identifier. The identifier shall be a
 \indextext{label}%
-label\iref{stmt.label} located in the current function.
+\link{label}{stmt.label} located in the current function.
 
 \rSec1[stmt.dcl]{Declaration statement}%
 \indextext{statement!declaration}
@@ -947,7 +947,7 @@ [stmt.dcl]
 \pnum
 \indextext{block (statement)!initialization in}%
 \indextext{initialization!automatic}%
-Variables with automatic storage duration\iref{basic.stc.auto} are
+Variables with \link{automatic storage duration}{basic.stc.auto} are
 initialized each time their \grammarterm{declaration-statement} is executed.
 \indextext{local variable!destruction of}%
 Variables with automatic storage duration declared in the block are
@@ -988,8 +988,8 @@ [stmt.dcl]
 \indextext{initialization!local \tcode{static}}%
 \indextext{initialization!local \tcode{thread_local}}%
 Dynamic initialization of a block-scope variable with
-static storage duration\iref{basic.stc.static} or
-thread storage duration\iref{basic.stc.thread} is performed
+\link{static storage duration}{basic.stc.static} or
+\link{thread storage duration}{basic.stc.thread} is performed
 the first time control passes through its declaration; such a variable is
 considered initialized upon the completion of its initialization. If the
 initialization exits by throwing an exception, the initialization is not
@@ -1027,8 +1027,8 @@ [stmt.ambig]
 \pnum
 There is an ambiguity in the grammar involving
 \grammarterm{expression-statement}{s} and \grammarterm{declaration}{s}: An
-\grammarterm{expression-statement} with a function-style explicit type
-conversion\iref{expr.type.conv} as its leftmost subexpression can be
+\grammarterm{expression-statement} with a \link{function-style explicit type
+conversion}{expr.type.conv} as its leftmost subexpression can be
 indistinguishable from a \grammarterm{declaration} where the first
 \grammarterm{declarator} starts with a \tcode{(}. In those cases the
 \grammarterm{statement} is a \grammarterm{declaration}.
diff --git a/source/declarations.tex b/source/declarations.tex
index aaf732b9..62fc80dd 100644
--- a/source/declarations.tex
+++ b/source/declarations.tex
@@ -126,7 +126,7 @@ [dcl.pre]
 \pnum
 \indextext{declaration}%
 \indextext{scope}%
-A declaration occurs in a scope\iref{basic.scope}; the scope rules are
+A declaration occurs in a \deflink{scope}{basic.scope}; the scope rules are
 summarized in~\ref{basic.lookup}. A declaration that declares a function
 or defines a class, namespace, template, or function also has one or
 more scopes nested within it. These nested scopes, in turn, can have
@@ -141,7 +141,7 @@ [dcl.pre]
 \indextext{declarator}%
 In a \grammarterm{simple-declaration}, the optional
 \grammarterm{init-declarator-list} can be omitted only when declaring a
-class\iref{class} or enumeration\iref{dcl.enum}, that is,
+\link{class}{class} or \link{enumeration}{dcl.enum}, that is,
 when the \grammarterm{decl-specifier-seq} contains either a
 \grammarterm{class-specifier}, an \grammarterm{elaborated-type-specifier} with
 a \grammarterm{class-key}\iref{class.name}, or an
@@ -165,15 +165,15 @@ [dcl.pre]
 \indextext{\idxgram{static_assert}}%
 In a \grammarterm{static_assert-declaration}, the
 \grammarterm{constant-expression} shall be
-a contextually converted constant expression
-of type \tcode{bool}\iref{expr.const}.
+a \deflinkx{contextually converted constant expression
+of type \tcode{bool}}{contextually converted constant expression of type bool}{expr.const}.
 If the value of the expression when
 so converted is \tcode{true}, the declaration has no
 effect. Otherwise, the program is ill-formed, and the resulting
 diagnostic message\iref{intro.compliance} shall include the text of
 the \grammarterm{string-literal}, if one is supplied,
-except that characters not in the basic
-source character set\iref{lex.charset} are not required to appear in
+except that characters not in the \deflinkx{basic
+source character set}{character set!basic source}{lex.charset} are not required to appear in
 the diagnostic message.
 \begin{example}
 \begin{codeblock}
@@ -328,10 +328,6 @@ [dcl.spec]
 \rSec2[dcl.stc]{Storage class specifiers}%
 \indextext{specifier!storage class}%
 \indextext{declaration!storage class}%
-\indextext{\idxcode{static}}%
-\indextext{\idxcode{thread_local}}%
-\indextext{\idxcode{extern}}%
-\indextext{\idxcode{mutable}}
 
 \pnum
 The storage class specifiers are
@@ -368,12 +364,12 @@ [dcl.stc]
 \begin{note}
 A variable declared without a \grammarterm{storage-class-specifier}
 at block scope or declared as a function parameter
-has automatic storage duration by default\iref{basic.stc.auto}.
+has \deflink{automatic storage duration}{basic.stc.auto} by default.
 \end{note}
 
 \pnum
 The \tcode{thread_local} specifier
-indicates that the named entity has thread storage duration\iref{basic.stc.thread}. It
+indicates that the named entity has \deflink{thread storage duration}{basic.stc.thread}. It
 shall be applied only
 to the declaration of a variable of namespace or block scope,
 to a structured binding declaration\iref{dcl.struct.bind}, or
@@ -392,10 +388,10 @@ [dcl.stc]
 There can be no
 \tcode{static} function declarations within a block, nor any
 \tcode{static} function parameters. A \tcode{static} specifier used in
-the declaration of a variable declares the variable to have static storage
-duration\iref{basic.stc.static}, unless accompanied by the
-\tcode{thread_local} specifier, which declares the variable to have thread
-storage duration\iref{basic.stc.thread}. A \tcode{static} specifier can be
+the declaration of a variable declares the variable to have
+\deflink{static storage duration}{basic.stc.static}, unless accompanied by the
+\tcode{thread_local} specifier, which declares the variable to have
+\deflink{thread storage duration}{basic.stc.thread}. A \tcode{static} specifier can be
 used in declarations of class members;~\ref{class.static} describes its
 effect.
 \indextext{\idxcode{static}!linkage of}%
@@ -480,7 +476,7 @@ [dcl.stc]
 
 \pnum
 The \tcode{mutable} specifier shall appear only in the declaration of
-a non-static data member\iref{class.mem}
+a \deflink{non-static data member}{class.mem}
 whose type is neither const-qualified nor a reference type.
 \begin{example}
 \begin{codeblock}
@@ -550,7 +546,7 @@ [dcl.typedef]
 \pnum
 Declarations containing the \grammarterm{decl-specifier} \tcode{typedef}
 declare identifiers that can be used later for naming
-fundamental\iref{basic.fundamental} or compound\iref{basic.compound}
+\link{fundamental}{basic.fundamental} or \link{compound}{basic.compound}
 types. The \tcode{typedef} specifier shall not be
 combined in a \grammarterm{decl-specifier-seq} with any other kind of
 specifier except a \grammarterm{defining-type-specifier}, and it shall not be used in the
@@ -692,10 +688,10 @@ [dcl.typedef]
 A \grammarterm{simple-template-id} that names a class template specialization
 is a \grammarterm{class-name}\iref{class.name}.
 If a \grammarterm{typedef-name} is used to identify the subject of an
-\grammarterm{elaborated-type-specifier}\iref{dcl.type.elab}, a class
-definition\iref{class}, a constructor
-declaration\iref{class.ctor}, or a destructor
-declaration\iref{class.dtor}, the program is ill-formed.
+\grammarterm{elaborated-type-specifier}\iref{dcl.type.elab}, a \link{class
+definition}{class}, a \link{constructor
+declaration}{class.ctor}, or a \link{destructor
+declaration}{class.dtor}, the program is ill-formed.
 \end{note}
 \begin{example}
 \begin{codeblock}
@@ -769,7 +765,7 @@ [dcl.constexpr]
 the declaration of a function or function template.
 A function or static data member
 declared with the \tcode{constexpr} or \tcode{consteval} specifier
-is implicitly an inline function or variable\iref{dcl.inline}.
+is implicitly an \link{inline}{dcl.inline} function or variable.
 If any declaration of a function or function template has
 a \tcode{constexpr} or \tcode{consteval} specifier,
 then all its declarations shall contain the same specifier.
@@ -829,17 +825,17 @@ [dcl.constexpr]
 each of its parameter types shall be a literal type;
 
 \item
-it shall not be a coroutine\iref{dcl.fct.def.coroutine};
+it shall not be a \link{coroutine}{dcl.fct.def.coroutine};
 
 \item
 if the function is a constructor or destructor,
 its class shall not have any virtual base classes;
 
 \item
-its \grammarterm{function-body} shall not enclose\iref{stmt.pre}
+its \grammarterm{function-body} shall not \deflinkx{enclose}{enclosing statement}{stmt.pre}
 \begin{itemize}
 \item a \tcode{goto} statement,
-\item an identifier label\iref{stmt.label},
+\item an \deflink{identifier label}{stmt.label},
 \item a definition of a variable
 of non-literal type or
 of static or thread storage duration.
@@ -920,8 +916,8 @@ [dcl.constexpr]
 For a constexpr function or constexpr constructor
 that is neither defaulted nor a template,
 if no argument values exist such that
-an invocation of the function or constructor could be an evaluated subexpression of a core
-constant expression\iref{expr.const}, or,
+an invocation of the function or constructor could be an evaluated subexpression of a
+\deflinkx{core constant expression}{expression!core constant}{expr.const}, or,
 for a constructor, an evaluated subexpression of
 the initialization full-expression of some constant-initialized object\iref{basic.start.static},
 the program is ill-formed, no diagnostic required.
@@ -998,7 +994,7 @@ [dcl.constexpr]
 shall be initialized.
 In any \tcode{constexpr} variable declaration,
 the full-expression of the initialization
-shall be a constant expression\iref{expr.const}.
+shall be a \link{constant expression}{expr.const}.
 A \tcode{constexpr} variable shall have constant destruction.
 \begin{example}
 \begin{codeblock}
@@ -1107,7 +1103,7 @@ [dcl.inline]
 is declared in a definition domain,
 it shall be defined in that domain.
 \begin{note}
-A constexpr function\iref{dcl.constexpr} is implicitly inline.
+A \deflinkx{constexpr function}{specifier!constexpr!function}{dcl.constexpr} is implicitly inline.
 In the global module, a function defined within a class definition
 is implicitly inline~(\ref{class.mfct}, \ref{class.friend}).
 \end{note}
@@ -1233,7 +1229,7 @@ [dcl.type.cv]
 \pnum
 \begin{note}
 Declaring a variable \tcode{const} can affect its linkage\iref{dcl.stc}
-and its usability in constant expressions\iref{expr.const}. As
+and its usability in \link{constant expressions}{expr.const}. As
 described in~\ref{dcl.init}, the definition of an object or subobject
 of const-qualified type must specify an initializer or be subject to
 default-initialization.
@@ -1247,7 +1243,7 @@ [dcl.type.cv]
 some other access path.
 \begin{note}
 Cv-qualifiers are supported by the type system so that they cannot be
-subverted without casting\iref{expr.const.cast}.
+subverted without \link{casting}{expr.const.cast}.
 \end{note}
 
 \pnum
@@ -1587,8 +1583,8 @@ [dcl.type.decltype]
 \item otherwise, \tcode{decltype($E$)} is the type of $E$.
 \end{itemize}
 
-The operand of the \tcode{decltype} specifier is an unevaluated
-operand\iref{expr.prop}.
+The operand of the \tcode{decltype} specifier is an
+\deflink{unevaluated operand}{expr.prop}.
 
 \begin{example}
 \begin{codeblock}
@@ -1756,7 +1752,7 @@ [dcl.spec.auto]
 If the \grammarterm{init-declarator-list} contains more than one
 \grammarterm{init-declarator}, they shall all form declarations of
 variables. The type of each declared variable is determined
-by placeholder type deduction\iref{dcl.type.auto.deduct},
+by \deflink{placeholder type deduction}{dcl.type.auto.deduct},
 and if the type that replaces the placeholder type is not the
 same in each deduction, the program is ill-formed.
 
@@ -1879,14 +1875,14 @@ [dcl.spec.auto]
 
 \pnum
 A function declared with a return type that uses a placeholder type shall not
-be \tcode{virtual}\iref{class.virtual}.
+be \link{\tcode{virtual}}{class.virtual}.
 
 \pnum
 A function declared with a return type that uses a placeholder type shall not
 be a coroutine\iref{dcl.fct.def.coroutine}.
 
 \pnum
-An explicit instantiation declaration\iref{temp.explicit} does not cause the
+An \link{explicit instantiation declaration}{temp.explicit} does not cause the
 instantiation of an entity declared using a placeholder type, but it also does
 not prevent that entity from being instantiated as needed to determine its
 type.
@@ -1961,7 +1957,7 @@ [dcl.type.auto.deduct]
 a new invented type template parameter \tcode{U} or,
 if the initialization is copy-list-initialization, with
 \tcode{std::initializer_list<U>}. Deduce a value for \tcode{U} using the rules
-of template argument deduction from a function call\iref{temp.deduct.call},
+of \link{template argument deduction from a function call}{temp.deduct.call},
 where \tcode{P} is a
 function template parameter type and
 the corresponding argument is $E$.
@@ -2058,7 +2054,7 @@ [dcl.type.class.deduct]
 in the \grammarterm{new-type-id} or \grammarterm{type-id}
 of a \grammarterm{new-expression}\iref{expr.new},
 as the \grammarterm{simple-type-specifier}
-in an explicit type conversion (functional notation)\iref{expr.type.conv},
+in an \link{explicit type conversion (functional notation)}{expr.type.conv},
 or
 as the \grammarterm{type-specifier} in the \grammarterm{parameter-declaration}
 of a \grammarterm{template-parameter}\iref{temp.param}.
@@ -4151,7 +4147,7 @@ [dcl.init]
 \item
 if
 \tcode{T}
-is a scalar type\iref{basic.types}, the
+is a \deflink{scalar type}{basic.types}, the
 object
 is initialized to the value obtained by converting the integer literal \tcode{0}
 (zero) to
@@ -4165,7 +4161,7 @@ [dcl.init]
 if
 \tcode{T}
 is a (possibly cv-qualified) non-union class type,
-its padding bits\iref{basic.types} are initialized to zero bits and
+its \deflink{padding bits}{basic.types} are initialized to zero bits and
 each non-static data member,
 each non-virtual base class subobject, and,
 if the object is not a base class subobject,
@@ -4176,7 +4172,7 @@ [dcl.init]
 if
 \tcode{T}
 is a (possibly cv-qualified) union type,
-its padding bits\iref{basic.types} are initialized to zero bits and
+its \deflink{padding bits}{basic.types} are initialized to zero bits and
 the
 object's first non-static named
 data member
@@ -4364,7 +4360,7 @@ [dcl.init]
 parenthesized \grammarterm{expression-list} or a \grammarterm{braced-init-list},
 \item for a \grammarterm{new-initializer}\iref{expr.new},
 \item in a \tcode{static_cast} expression\iref{expr.static.cast},
-\item in a functional notation type conversion\iref{expr.type.conv}, and
+\item in a \link{functional notation type conversion}{expr.type.conv}, and
 \item in the \grammarterm{braced-init-list} form of a \grammarterm{condition}
 \end{itemize}
 is called
@@ -5291,15 +5287,15 @@ [dcl.init.ref]
 ``\cvqual{cv3} \tcode{T3}''\footnote{This requires a conversion
 function\iref{class.conv.fct} returning a reference type.}
 (this conversion is selected by enumerating the applicable conversion
-functions\iref{over.match.ref} and choosing the best one through overload
-resolution\iref{over.match}),
+functions\iref{over.match.ref} and choosing the best one through \link{overload
+resolution}{over.match}),
 \end{itemize}
 then the reference is bound to the initializer expression lvalue in the
 first case and to the lvalue result of the conversion
 in the second case (or, in either case, to the appropriate base class subobject of the object).
 \begin{note}
-The usual lvalue-to-rvalue\iref{conv.lval}, array-to-pointer\iref{conv.array},
-and function-to-pointer\iref{conv.func} standard
+The usual \link{lvalue-to-rvalue}{conv.lval}, \link{array-to-pointer}{conv.array},
+and \link{function-to-pointer}{conv.func} standard
 conversions are not needed, and therefore are suppressed, when such
 direct bindings to lvalues are done.
 \end{note}
@@ -6560,7 +6556,7 @@ [dcl.struct.bind]
 where \tcode{get} is looked up in the associated namespaces\iref{basic.lookup.argdep}.
 In either case, \tcode{get<i>} is interpreted as a \grammarterm{template-id}.
 \begin{note}
-Ordinary unqualified lookup\iref{basic.lookup.unqual} is not performed.
+Ordinary \link{unqualified lookup}{basic.lookup.unqual} is not performed.
 \end{note}
 In either case, \exposid{e} is an lvalue if the type of the entity \exposid{e}
 is an lvalue reference and an xvalue otherwise.
@@ -6698,7 +6694,7 @@ [dcl.enum]
 \end{note}
 If the \grammarterm{enum-head-name} of an \grammarterm{opaque-enum-declaration} contains
 a \grammarterm{nested-name-specifier},
-the declaration shall be an explicit specialization\iref{temp.expl.spec}.
+the declaration shall be an \link{explicit specialization}{temp.expl.spec}.
 
 \pnum
 \indextext{constant!enumeration}%
@@ -6782,8 +6778,9 @@ [dcl.enum]
 prior to the closing brace is the underlying
 type
 and the \grammarterm{constant-expression} in the \grammarterm{enumerator-definition}
-shall be a converted constant expression of the underlying
-type\iref{expr.const}.
+shall be a
+\deflinkx{converted constant expression}{expression!converted constant}{expr.const}
+of the underlying type.
 If the underlying
 type is not fixed,
 the type of each enumerator prior to the closing brace is determined as
@@ -6792,8 +6789,9 @@ [dcl.enum]
 \begin{itemize}
 \item If an
 initializer is specified for an enumerator, the
-\grammarterm{constant-expression} shall be an integral constant
-expression\iref{expr.const}. If the expression has
+\grammarterm{constant-expression} shall be an
+\deflinkx{integral constant expression}{expression!integral constant}{expr.const}.
+If the expression has
 unscoped enumeration type, the enumerator has the underlying type of that
 enumeration type, otherwise it has the same type as the expression.
 
@@ -6810,7 +6808,7 @@ [dcl.enum]
 
 \pnum
 An enumeration whose underlying type is fixed is an incomplete type from its
-point of declaration\iref{basic.scope.pdecl} to immediately after its
+\deflink{point of declaration}{basic.scope.pdecl} to immediately after its
 \grammarterm{enum-base} (if any), at which point it becomes a complete type.
 An enumeration whose underlying type is not fixed is an incomplete type from
 its point of declaration to immediately after the closing \tcode{\}} of its
@@ -6853,7 +6851,7 @@ [dcl.enum]
 
 \pnum
 The value of an enumerator or an object of an unscoped enumeration type is
-converted to an integer by integral promotion\iref{conv.prom}.
+converted to an integer by \deflinkx{integral promotion}{integral promotions}{conv.prom}.
 \begin{example}
 \begin{codeblock}
 enum color { red, yellow, green=20, blue };
@@ -7078,7 +7076,7 @@ [namespace.def]
 \pnum
 In a \grammarterm{named-namespace-definition},
 the \grammarterm{identifier} is the name of the namespace.
-If the \grammarterm{identifier}, when looked up\iref{basic.lookup.unqual},
+If the \grammarterm{identifier}, when \link{looked up}{basic.lookup.unqual},
 refers to a \grammarterm{namespace-name} (but not a \grammarterm{namespace-alias})
 that was introduced in the namespace
 in which the \grammarterm{named-namespace-definition} appears
@@ -7148,13 +7146,13 @@ [namespace.def]
 Members of an inline namespace can be used in most respects as though they were members
 of the enclosing namespace. Specifically, the inline namespace and its enclosing
 namespace are both added to the set of associated namespaces used in
-argument-dependent lookup\iref{basic.lookup.argdep} whenever one of them is,
+\link{argument-dependent lookup}{basic.lookup.argdep} whenever one of them is,
 and a \grammarterm{using-directive}\iref{namespace.udir} that names the inline
-namespace is implicitly inserted into the enclosing namespace as for an unnamed
-namespace\iref{namespace.unnamed}. Furthermore, each
-member of the inline namespace can subsequently be partially
-specialized\iref{temp.class.spec}, explicitly
-instantiated\iref{temp.explicit}, or explicitly specialized\iref{temp.expl.spec} as
+namespace is implicitly inserted into the enclosing namespace as for an \link{unnamed
+namespace}{namespace.unnamed}. Furthermore, each
+member of the inline namespace can subsequently be \link{partially
+specialized}{temp.class.spec}, \link{explicitly
+instantiated}{temp.explicit}, or \link{explicitly specialized}{temp.expl.spec} as
 though it were a member of the enclosing namespace. Finally, looking up a name in the
 enclosing namespace via explicit qualification\iref{namespace.qual} will include
 members of the inline namespace brought in by the \grammarterm{using-directive} even if
@@ -7255,8 +7253,8 @@ [namespace.memdef]
 declares (or redeclares) its \grammarterm{unqualified-id} or
 \grammarterm{identifier} as a member of \tcode{N}.
 \begin{note}
-An explicit instantiation\iref{temp.explicit} or
-explicit specialization\iref{temp.expl.spec} of a template
+An \link{explicit instantiation}{temp.explicit} or
+\link{explicit specialization}{temp.expl.spec} of a template
 does not introduce a name and thus may be declared using an
 \grammarterm{unqualified-id} in a member of the enclosing namespace set,
 if the primary template is declared in an inline namespace.
@@ -7306,8 +7304,8 @@ [namespace.memdef]
 class, function, class template or function template\footnote{this implies that the name of the class or function is unqualified.}
 the friend is a member of the innermost enclosing
 namespace. The friend declaration does not by itself make the name
-visible to unqualified lookup\iref{basic.lookup.unqual} or qualified
-lookup\iref{basic.lookup.qual}.
+visible to \link{unqualified lookup}{basic.lookup.unqual} or \link{qualified
+lookup}{basic.lookup.qual}.
 \begin{note}
 The name of the friend will be
 visible in its namespace if a matching declaration is provided at namespace
@@ -7883,8 +7881,8 @@ [namespace.udecl]
 
 \pnum
 Since a \grammarterm{using-declaration} is a declaration, the restrictions
-on declarations of the same name in the same declarative
-region\iref{basic.scope} also apply to \grammarterm{using-declaration}{s}.
+on declarations of the same name in the same
+\deflink{declarative region}{basic.scope} also apply to \grammarterm{using-declaration}{s}.
 \begin{example}
 \begin{codeblock}
 namespace A {
@@ -7919,7 +7917,7 @@ [namespace.udecl]
 
 \pnum
 If a function declaration in namespace scope or block scope has the same
-name and the same parameter-type-list\iref{dcl.fct} as
+name and the same \deflink{parameter-type-list}{dcl.fct} as
 a function introduced by a \grammarterm{using-declaration}, and the
 declarations do not declare the same function, the program is
 ill-formed. If a function template declaration in namespace scope has
@@ -8167,7 +8165,7 @@ [dcl.link]
 otherwise identical.
 
 \pnum
-Linkage\iref{basic.link} between \Cpp{} and  non-\Cpp{} code fragments can
+\link{Linkage}{basic.link} between \Cpp{} and  non-\Cpp{} code fragments can
 be achieved using a \grammarterm{linkage-specification}:
 
 \indextext{\idxgram{linkage-specification}}%
@@ -8225,7 +8223,7 @@ [dcl.link]
 Linkage specifications nest. When linkage specifications nest, the
 innermost one determines the language linkage. A linkage specification
 does not establish a scope. A \grammarterm{linkage-specification} shall
-occur only in namespace scope\iref{basic.scope.namespace}. In a
+occur only in \link{namespace scope}{basic.scope.namespace}. In a
 \grammarterm{linkage-specification}, the specified language linkage applies
 to the function types of all function declarators, function names with
 external linkage, and variable names with external linkage declared
@@ -8296,7 +8294,7 @@ [dcl.link]
 
 \pnum
 If two declarations declare functions with the same name and
-parameter-type-list\iref{dcl.fct} to be members of the same
+\deflink{parameter-type-list}{dcl.fct} to be members of the same
 namespace or declare objects with the same name to be members of the same
 namespace and the declarations give the names different language linkages, the
 program is ill-formed; no diagnostic is required if the declarations appear in
@@ -8359,8 +8357,8 @@ [dcl.link]
 A declaration directly contained in a
 \grammarterm{linkage-specification}
 is treated as if it contains the
-\tcode{extern}
-specifier\iref{dcl.stc} for the purpose of determining the linkage of the
+\linkx{\tcode{extern}
+specifier}{extern}{dcl.stc} for the purpose of determining the linkage of the
 declared name and whether it is a definition. Such a declaration shall
 not specify a storage class.
 \begin{example}
@@ -8507,16 +8505,16 @@ [dcl.attr.grammar]
 \pnum
 In an \grammarterm{attribute-list}, an ellipsis may appear only if that
 \grammarterm{attribute}'s specification permits it. An \grammarterm{attribute} followed
-by an ellipsis is a pack expansion\iref{temp.variadic}.
+by an ellipsis is a \deflink{pack expansion}{temp.variadic}.
 An \grammarterm{attribute-specifier} that contains no \grammarterm{attribute}{s} has no
 effect. The order in which the \grammarterm{attribute-token}{s} appear in an
 \grammarterm{attribute-list} is not significant. If a
-keyword\iref{lex.key}
-or an alternative token\iref{lex.digraph} that satisfies the syntactic requirements
+\link{keyword}{lex.key}
+or an \link{alternative token}{lex.digraph} that satisfies the syntactic requirements
 of an \grammarterm{identifier}\iref{lex.name} is
 contained in
-an \grammarterm{attribute-token}, it is considered an identifier. No name
-lookup\iref{basic.lookup} is performed on any of the identifiers contained in an
+an \grammarterm{attribute-token}, it is considered an identifier. No
+\link{name lookup}{basic.lookup} is performed on any of the identifiers contained in an
 \grammarterm{attribute-token}. The \grammarterm{attribute-token} determines additional
 requirements on the \grammarterm{attribute-argument-clause} (if any).
 
@@ -8608,7 +8606,7 @@ [dcl.align]
 \pnum
 An \grammarterm{alignment-specifier} of the form
 \tcode{alignas(} \grammarterm{type-id} \tcode{)} has the same
-effect as \tcode{alignas(\brk{}alignof(} \grammarterm{type-id}~\tcode{))}\iref{expr.alignof}.
+effect as \tcode{alignas(\brk{}\link{alignof}{expr.alignof}(} \grammarterm{type-id}~\tcode{))}.
 
 \pnum
 The alignment requirement of an entity is the strictest nonzero alignment
@@ -8687,9 +8685,9 @@ [dcl.attr.depend]
 \grammarterm{attribute-argument-clause} shall be present. The attribute may be
 applied to the \grammarterm{declarator-id} of a
 \grammarterm{parameter-declaration} in a function declaration or lambda, in
-which case it specifies that the initialization of the parameter carries a
-dependency to\iref{intro.multithread} each lvalue-to-rvalue
-conversion\iref{conv.lval} of that object. The attribute may also be applied
+which case it specifies that the initialization of the parameter
+\deflink{carries a dependency}{intro.multithread} to each \link{lvalue-to-rvalue
+conversion}{conv.lval} of that object. The attribute may also be applied
 to the \grammarterm{declarator-id} of a function declaration, in which case it
 specifies that the return value, if any, carries a dependency to the evaluation
 of the function call expression.
@@ -8816,14 +8814,14 @@ [dcl.attr.fallthrough]
 
 \pnum
 The \grammarterm{attribute-token} \tcode{fallthrough}
-may be applied to a null statement\iref{stmt.expr};
+may be applied to a \deflink{null statement}{stmt.expr};
 \indextext{statement!fallthrough}
 such a statement is a fallthrough statement.
 The \grammarterm{attribute-token} \tcode{fallthrough}
 shall appear at most once in each \grammarterm{attribute-list} and
 no \grammarterm{attribute-argument-clause} shall be present.
 A fallthrough statement may only appear within
-an enclosing \tcode{switch} statement\iref{stmt.switch}.
+an enclosing \link{\tcode{switch} statement}{stmt.switch}.
 The next statement that would be executed after a fallthrough statement
 shall be a labeled statement whose label is a case label or
 default label for the same \tcode{switch} statement and,
diff --git a/source/classes.tex b/source/classes.tex
index c6590eba..f5ec7ca7 100644
--- a/source/classes.tex
+++ b/source/classes.tex
@@ -175,10 +175,10 @@ [class.prop]
 \item has no non-static data members of type non-standard-layout class
 (or array of such types) or reference,
 
-\item has no virtual functions\iref{class.virtual} and no
-virtual base classes\iref{class.mi},
+\item has no \link{virtual functions}{class.virtual} and no
+\link{virtual base classes}{class.mi},
 
-\item has the same access control\iref{class.access}
+\item has the same \link{access control}{class.access}
 for all non-static data members,
 
 \item has no non-standard-layout base classes,
@@ -201,7 +201,7 @@ [class.prop]
 
 \begin{itemize}
 \item If \tcode{X} is a non-union class type with no (possibly
-inherited\iref{class.derived}) non-static data members, the set
+\link{inherited}{class.derived}) non-static data members, the set
 $M(\mathtt{X})$ is empty.
 
 \item If \tcode{X} is a non-union class type with a non-static data
@@ -320,7 +320,7 @@ [class.name]
 int f(Y);
 \end{codeblock}
 \indextext{overloading}%
-declare an overloaded\iref{over} function \tcode{f()} and not
+declare an \link{overloaded}{over} function \tcode{f()} and not
 simply a single function \tcode{f()} twice. For the same reason,
 \begin{codeblock}
 struct S { int a; };
@@ -336,7 +336,7 @@ [class.name]
 \indextext{name hiding!class definition}%
 it is declared and hides any
 class, variable, function, or other declaration of that name in an
-enclosing scope\iref{basic.scope}. If a class name is declared in a
+enclosing \link{scope}{basic.scope}. If a class name is declared in a
 scope where a variable, function, or enumerator of the same name is also
 declared, then when both declarations are in scope, the class can be
 referred to only using an
@@ -499,9 +499,9 @@ [class.mem]
 A \defn{direct member} of a class \tcode{X} is a member of \tcode{X}
 that was first declared within the \grammarterm{member-specification} of \tcode{X},
 including anonymous union objects\iref{class.union.anon} and direct members thereof.
-Members of a class are data members, member
-functions\iref{class.mfct}, nested types, enumerators,
-and member templates\iref{temp.mem} and specializations thereof.
+Members of a class are data members, \link{member functions}{class.mfct},
+nested types, enumerators,
+and \link{member templates}{temp.mem} and specializations thereof.
 \begin{note}
 A specialization of a static data member template is a static data member.
 A specialization of a member function template is a member function.
@@ -512,14 +512,14 @@ [class.mem]
 A \grammarterm{member-declaration} does not declare new members of the class
 if it is
 \begin{itemize}
-\item a friend declaration\iref{class.friend},
+\item a \link{friend declaration}{class.friend},
 \item a \grammarterm{static_assert-declaration},
 \item a \grammarterm{using-declaration}\iref{namespace.udecl}, or
 \item an \grammarterm{empty-declaration}.
 \end{itemize}
 For any other \grammarterm{member-declaration},
 each declared entity
-that is not an unnamed bit-field\iref{class.bit}
+that is not an \deflinkx{unnamed bit-field}{bit-field!unnamed}{class.bit}
 is a member of the class,
 and each such \grammarterm{member-declaration}
 shall either
@@ -531,10 +531,10 @@ [class.mem]
 \grammarterm{member-declarator}.
 A \defn{member function} is a member that is a function.
 Nested types are classes~(\ref{class.name}, \ref{class.nest}) and
-enumerations\iref{dcl.enum} declared in the class and arbitrary types
-declared as members by use of a typedef declaration\iref{dcl.typedef}
+\link{enumerations}{dcl.enum} declared in the class and arbitrary types
+declared as members by use of a \link{typedef declaration}{dcl.typedef}
 or \grammarterm{alias-declaration}.
-The enumerators of an unscoped enumeration\iref{dcl.enum} defined in the class
+The enumerators of an \link{unscoped enumeration}{dcl.enum} defined in the class
 are members of the class.
 
 \indextext{member!static}%
@@ -552,7 +552,7 @@ [class.mem]
 \defn{non-static member function}~(\ref{class.mfct.non-static}), respectively).
 \begin{note}
 A non-static data member of non-reference
-type is a member subobject of a class object\iref{intro.object}.
+type is a \deflink{member subobject}{intro.object} of a class object.
 \end{note}
 
 \pnum
@@ -575,7 +575,7 @@ [class.mem]
 A \defn{complete-class context} of a class is a
 \begin{itemize}
 \item function body\iref{dcl.fct.def.general},
-\item default argument\iref{dcl.fct.default},
+\item \link{default argument}{dcl.fct.default},
 \item \grammarterm{noexcept-specifier}\iref{except.spec}, or
 \item default member initializer
 \end{itemize}
@@ -655,9 +655,9 @@ [class.mem]
 The
 \grammarterm{member-declarator-list} can be omitted only after a
 \grammarterm{class-specifier} or an \grammarterm{enum-specifier} or in a
-friend declaration\iref{class.friend}. A
+\link{friend declaration}{class.friend}. A
 \grammarterm{pure-specifier} shall be used only in the declaration of a
-virtual function\iref{class.virtual}
+\link{virtual function}{class.virtual}
 that is not a friend declaration.
 
 \pnum
@@ -726,7 +726,7 @@ [class.mem]
 \begin{note}
 \indextext{layout!class object}%
 Non-static data members of a (non-union) class
-with the same access control\iref{class.access} and
+with the same \link{access control}{class.access} and
 non-zero size\iref{intro.object}
 are allocated so that later
 members have higher addresses within a class object\iref{expr.rel}.
@@ -748,8 +748,8 @@ [class.mem]
 
 \item every member function of class \tcode{T}
 \begin{note}
-This restriction does not apply to constructors, which do not have
-names\iref{class.ctor}
+This restriction does not apply to \link{constructors}{class.ctor},
+which do not have names
 \end{note}%
 ;
 
@@ -766,7 +766,7 @@ [class.mem]
 
 \pnum
 In addition, if class \tcode{T} has a user-declared
-constructor\iref{class.ctor}, every non-static data member of class
+\link{constructor}{class.ctor}, every non-static data member of class
 \tcode{T} shall have a name different from \tcode{T}.
 
 \pnum
@@ -803,11 +803,11 @@ [class.mem]
 \pnum
 Two standard-layout unions are layout-compatible if they
 have the same number of non-static data members and corresponding
-non-static data members (in any order) have layout-compatible
-types\iref{basic.types}.
+non-static data members (in any order) have \deflinkx{layout-compatible
+types}{layout-compatible}{basic.types}.
 
 \pnum
-In a standard-layout union with an active member\iref{class.union}
+In a standard-layout union with an \deflinkx{active member}{active!union member}{class.union}
 of struct type \tcode{T1}, it is permitted to read a non-static
 data member \tcode{m} of another union member of struct type \tcode{T2}
 provided \tcode{m} is part of the common initial sequence of \tcode{T1} and \tcode{T2};
@@ -849,7 +849,7 @@ [class.mfct]
 \pnum
 \indextext{member function!inline}%
 \indextext{definition!member function}%
-A member function may be defined\iref{dcl.fct.def} in its class definition,
+A member function may be \link{defined}{dcl.fct.def} in its class definition,
 in which case it is an inline\iref{dcl.inline} member function
 if it is attached to the global module, or
 it may be defined outside of its class
@@ -886,8 +886,8 @@ [class.mfct]
 name using the \tcode{::} operator.
 \begin{note}
 A name used in a member function definition (that is, in the
-\grammarterm{parameter-declaration-clause} including the default
-arguments\iref{dcl.fct.default} or in the member function body) is looked up
+\grammarterm{parameter-declaration-clause} including the \link{default
+arguments}{dcl.fct.default} or in the member function body) is looked up
 as described in~\ref{basic.lookup}.
 \end{note}
 \begin{example}
@@ -951,9 +951,9 @@ [class.mfct.non-static]
 
 \pnum
 A non-static member function may be called for an object of
-its class type, or for an object of a class derived\iref{class.derived}
-from its class type, using the class member
-access syntax~(\ref{expr.ref}, \ref{over.match.call}). A non-static
+its class type, or for an object of a class \link{derived}{class.derived}
+from its class type, using the
+\link{class member access}{expr.ref} syntax\iref{over.match.call}. A non-static
 member function may also be called directly using the function call
 syntax~(\ref{expr.call}, \ref{over.match.call}) from within
 its class or a class derived from its class, or
@@ -967,19 +967,18 @@ [class.mfct.non-static]
 
 \pnum
 When an \grammarterm{id-expression}\iref{expr.prim.id} that is not part of a
-class member access syntax\iref{expr.ref} and not used to form a
+\link{class member access}{expr.ref} syntax and not used to form a
 pointer to member\iref{expr.unary.op} is used in
-a member of class \tcode{X} in a context where \tcode{this} can be
-used\iref{expr.prim.this},
-if name
-lookup\iref{basic.lookup} resolves the name in the
+a member of class \tcode{X} in a context where \link{\tcode{this}}{expr.prim.this} can be
+used,
+if \link{name lookup}{basic.lookup} resolves the name in the
 \grammarterm{id-expression} to a non-static non-type member of some class
 \tcode{C},
 and if either the \grammarterm{id-expression} is potentially evaluated or
 \tcode{C} is \tcode{X} or a base class of \tcode{X},
-the \grammarterm{id-expression} is transformed into a class
-member access expression\iref{expr.ref} using
-\tcode{(*this)}\iref{class.this} as the \grammarterm{postfix-expression}
+the \grammarterm{id-expression} is transformed into a
+\link{class member access}{expr.ref} expression using
+\link{\tcode{(*this)}}{class.this} as the \grammarterm{postfix-expression}
 to the left of the \tcode{.} operator.
 \begin{note}
 If \tcode{C} is not \tcode{X} or a base class of \tcode{X}, the class
@@ -1028,11 +1027,11 @@ [class.mfct.non-static]
 \indextext{member function!const volatile}%
 A non-static member function may be declared \tcode{const},
 \tcode{volatile}, or \tcode{const} \tcode{volatile}. These
-\grammarterm{cv-qualifier}{s} affect the type of the \tcode{this}
-pointer\iref{class.this}. They also affect the function
-type\iref{dcl.fct} of the member function; a member function declared
-\tcode{const} is a \defn{const member function}, a member function
-declared \tcode{volatile} is a \defn{volatile member function} and a
+\grammarterm{cv-qualifier}{s} affect the type of the \link{\tcode{this}
+pointer}{class.this}. They also affect the \link{function
+type}{dcl.fct} of the member function; a member function declared
+\tcode{const} is a \term{const} member function, a member function
+declared \tcode{volatile} is a \term{volatile} member function and a
 member function declared \tcode{const} \tcode{volatile} is a
 \defn{const volatile member function}.
 \begin{example}
@@ -1093,7 +1092,7 @@ [class.this]
 
 \pnum
 \begin{note}
-Similarly, \tcode{volatile} semantics\iref{dcl.type.cv} apply in
+Similarly, \link{\tcode{volatile}}{dcl.type.cv} semantics apply in
 volatile member functions when accessing the object and its
 non-static data members.
 \end{note}
@@ -1101,7 +1100,7 @@ [class.this]
 \pnum
 A member function whose type has a \grammarterm{cv-qualifier-seq} \cvqual{cv1}
 can be called on an
-object expression\iref{expr.ref} of type \cvqual{cv2} \tcode{T} only
+\link{object expression}{expr.ref} of type \cvqual{cv2} \tcode{T} only
 if \cvqual{cv1} is the same as or more cv-qualified than \cvqual{cv2}\iref{basic.type.qualifier}.
 \begin{example}
 \begin{codeblock}
@@ -6501,7 +6500,7 @@ [class.copy.elision]
 the copy/move operation can be omitted by
 constructing the object directly into the exception object
 
-\item in a coroutine\iref{dcl.fct.def.coroutine}, a copy of a coroutine parameter
+\item in a \link{coroutine}{dcl.fct.def.coroutine}, a copy of a coroutine parameter
 can be omitted and references to that copy replaced with references to the
 corresponding parameter if the meaning of the program will be unchanged except for
 the execution of a constructor and destructor for the parameter copy object
diff --git a/source/overloading.tex b/source/overloading.tex
index 99e924d2..d1b7f194 100644
--- a/source/overloading.tex
+++ b/source/overloading.tex
@@ -67,7 +67,7 @@ [over.load]
 \item
 \indextext{return type!overloading and}%
 Function declarations that differ only in the return type,
-the exception specification\iref{except.spec}, or both
+the \link{exception specification}{except.spec}, or both
 cannot be overloaded.
 \item
 \indextext{\idxcode{static}!overloading and}%
@@ -160,8 +160,8 @@ [over.load]
 Parameter declarations that differ only in the use of equivalent typedef
 ``types'' are equivalent.
 A
-\tcode{typedef}
-is not a separate type, but only a synonym for another type\iref{dcl.typedef}.
+\link{\tcode{typedef}}{dcl.typedef}
+is not a separate type, but only a synonym for another type.
 \begin{example}
 \begin{codeblock}
 typedef int Int;
@@ -445,7 +445,7 @@ [over.match]
 contexts within the language:
 \begin{itemize}
 \item
-invocation of a function named in the function call syntax\iref{over.call.func};
+invocation of a function named in the \link{function call syntax}{over.call.func};
 \item
 invocation of a function call operator, a pointer-to-function
 conversion function, a reference-to-pointer-to-function conversion
@@ -459,14 +459,14 @@ [over.match]
 of a class object\iref{over.match.ctor};
 \item
 invocation of a user-defined conversion for
-copy-initialization\iref{dcl.init} of a class object\iref{over.match.copy};
+\deflink{copy-initialization}{dcl.init} of a class object\iref{over.match.copy};
 \item
 invocation of a conversion function for initialization of an object of a
 non-class type from an expression of class type\iref{over.match.conv}; and
 \item
 invocation of a conversion function for conversion
 in which a reference\iref{dcl.init.ref}
-will be directly bound\iref{over.match.ref}.
+will be \link{directly bound}{over.match.ref}.
 \end{itemize}
 
 Each of these contexts defines the set of candidate functions and
@@ -484,7 +484,7 @@ [over.match]
 viable functions\iref{over.match.viable}.
 \item
 Then the best viable function is selected based on the
-implicit conversion sequences\iref{over.best.ics} needed to
+\link{implicit conversion sequences}{over.best.ics} needed to
 match each argument to the corresponding parameter of each
 viable function.
 \end{itemize}
@@ -495,7 +495,7 @@ [over.match]
 Otherwise
 overload resolution fails and the invocation is ill-formed.
 When overload resolution succeeds,
-and the best viable function is not accessible\iref{class.access} in the context
+and the best viable function is not \link{accessible}{class.access} in the context
 in which it is used,
 the program is ill-formed.
 
@@ -605,7 +605,7 @@ [over.match.funcs]
 converted to the type of the implicit object parameter.
 \begin{note}
 The fact that such an argument is an rvalue does not
-affect the ranking of implicit conversion sequences\iref{over.ics.rank}.
+affect the \link{ranking}{over.ics.rank} of implicit conversion sequences.
 \end{note}
 
 \pnum
@@ -699,7 +699,7 @@ [over.match.call]
 \indextext{overloading!resolution!function call syntax|(}
 
 \pnum
-In a function call\iref{expr.call}
+In a \link{function call}{expr.call}
 \begin{ncsimplebnf}
 postfix-expression \terminal{(} \opt{expression-list} \terminal{)}
 \end{ncsimplebnf}
@@ -818,7 +818,7 @@ [over.call.func]
 in the call augmented by the addition of an implied object
 argument as in a qualified function call.
 If the keyword
-\tcode{this}\iref{class.this} is in scope and refers to
+\link{\tcode{this}}{class.this} is in scope and refers to
 class
 \tcode{T},
 or a derived class of
@@ -1194,7 +1194,7 @@ [over.match.oper]
 If a built-in candidate is selected by overload resolution, the
 operands of class type are converted to the types of the corresponding parameters
 of the selected operation function, except that the second standard conversion
-sequence of a user-defined conversion sequence\iref{over.ics.user} is not applied.
+sequence of a \link{user-defined conversion sequence}{over.ics.user} is not applied.
 Then the operator is treated as the corresponding
 built-in operator and interpreted according to \ref{expr.compound}.
 \begin{example}
@@ -1274,10 +1274,10 @@ [over.match.ctor]
 \indextext{overloading!resolution!initialization}
 
 \pnum
-When objects of class type are direct-initialized\iref{dcl.init},
+When objects of class type are \deflinkx{direct-initialized}{direct-initialization}{dcl.init},
 copy-initialized from an expression of the same or a
 derived class type\iref{dcl.init},
-or default-initialized\iref{dcl.init},
+or \deflinkx{default-initialized}{default-initialization}{dcl.init},
 overload resolution selects the constructor.
 For direct-initialization or default-initialization
 that is not in the context of copy-initialization, the
@@ -1315,7 +1315,7 @@ [over.match.copy]
 
 \begin{itemize}
 \item
-The converting constructors\iref{class.conv.ctor} of
+The \deflinkx{converting constructors}{converting constructor}{class.conv.ctor} of
 \tcode{T}
 are candidate functions.
 \item
@@ -1383,11 +1383,11 @@ [over.match.conv]
 \tcode{T}
 or a type that can be converted to type
 \tcode{T}
-via a standard conversion sequence\iref{over.ics.scs}
+via a \link{standard conversion sequence}{over.ics.scs}
 are candidate functions.
 For direct-initialization, those explicit conversion functions that are not
 hidden within \tcode{S} and yield type \tcode{T} or a type that can be converted
-to type \tcode{T} with a qualification conversion\iref{conv.qual} are also
+to type \tcode{T} with a \link{qualification conversion}{conv.qual} are also
 candidate functions.
 Conversion functions that return a cv-qualified type
 are considered to yield the cv-unqualified version of that type
@@ -1433,7 +1433,7 @@ [over.match.ref]
 ``\cvqual{cv2} \tcode{T2}''
 or ``rvalue reference to \cvqual{cv2} \tcode{T2}'' (when initializing an
 rvalue reference or an lvalue reference to function),
-where ``\cvqual{cv1} \tcode{T}'' is reference-compatible\iref{dcl.init.ref}
+where ``\cvqual{cv1} \tcode{T}'' is \deflink{reference-compatible}{dcl.init.ref}
 with ``\cvqual{cv2} \tcode{T2}'',
 are candidate functions. For direct-initialization, those explicit
 conversion functions that are not hidden within \tcode{S} and yield
@@ -1442,8 +1442,8 @@ [over.match.ref]
 or ``rvalue reference to \cvqual{cv2} \tcode{T2}''
 (when initializing an rvalue reference or an lvalue reference to function),
 where \tcode{T2} is the same type as \tcode{T} or can be
-converted to type \tcode{T} with a qualification
-conversion\iref{conv.qual}, are also candidate functions.
+converted to type \tcode{T} with a \link{qualification
+conversion}{conv.qual}, are also candidate functions.
 
 \end{itemize}
 
@@ -1908,7 +1908,7 @@ [over.match.viable]
 \tcode{F}
 to be a viable function, there shall exist for each
 argument an
-implicit conversion sequence\iref{over.best.ics} that
+\deflinkx{implicit conversion sequence}{conversion sequence!implicit}{over.best.ics} that
 converts that argument to the corresponding parameter of
 \tcode{F}.
 If the parameter has reference type, the implicit conversion sequence
@@ -1997,8 +1997,8 @@ [over.match.best]
 \end{example}
 or, if not that,
 
-\item the context is an initialization by conversion function for direct
-reference binding\iref{over.match.ref} of a reference to function type, the
+\item the context is an initialization by conversion function for \link{direct
+reference binding}{over.match.ref} of a reference to function type, the
 return type of \tcode{F1} is the same kind of reference (lvalue or rvalue)
 as the reference being initialized, and the return type of \tcode{F2} is not
 \begin{example}
@@ -2102,7 +2102,7 @@ [over.match.best]
 and \tcode{F2} is not, or, if not that,
 
 \item
-\tcode{F1} is the copy deduction candidate\iref{over.match.class.deduct}
+\tcode{F1} is the \deflink{copy deduction candidate}{over.match.class.deduct}
 and \tcode{F2} is not, or, if not that,
 
 \item
@@ -2244,7 +2244,7 @@ [over.best.ics]
 \begin{note}
 Other properties, such as the lifetime, storage class,
 alignment, accessibility of the argument, whether the argument is a bit-field,
-and whether a function is deleted\iref{dcl.fct.def.delete}, are ignored.
+and whether a function is \link{deleted}{dcl.fct.def.delete}, are ignored.
 So, although an implicit
 conversion sequence can be defined for a given argument-parameter
 pair, the conversion from the argument to the parameter might still
@@ -2257,11 +2257,11 @@ [over.best.ics]
 sequence is one of the following forms:
 \begin{itemize}
 \item
-a standard conversion sequence\iref{over.ics.scs},
+a \link{standard conversion sequence}{over.ics.scs},
 \item
-a user-defined conversion sequence\iref{over.ics.user}, or
+a \link{user-defined conversion sequence}{over.ics.user}, or
 \item
-an ellipsis conversion sequence\iref{over.ics.ellipsis}.
+an \link{ellipsis conversion sequence}{over.ics.ellipsis}.
 \end{itemize}
 
 \pnum
@@ -2431,10 +2431,10 @@ [over.ics.scs]
 also has an associated rank (Exact
 Match, Promotion, or Conversion).
 These are used
-to rank standard conversion sequences\iref{over.ics.rank}.
+to \link{rank standard conversion sequences}{over.ics.rank}.
 The rank of a conversion sequence is determined by considering the
-rank of each conversion in the sequence and the rank of any reference
-binding\iref{over.ics.ref}.
+rank of each conversion in the sequence and the rank of any \link{reference
+binding}{over.ics.ref}.
 If any of those has Conversion rank, the
 sequence has Conversion rank; otherwise, if any of those has Promotion rank,
 the sequence has Promotion rank; otherwise, the sequence has Exact
@@ -2466,12 +2466,12 @@ [over.ics.user]
 standard conversion sequence followed by a user-defined
 conversion\iref{class.conv} followed by a second standard
 conversion sequence.
-If the user-defined conversion is specified
-by a constructor\iref{class.conv.ctor}, the initial standard
+If the user-defined conversion is \link{specified
+by a constructor}{class.conv.ctor}, the initial standard
 conversion sequence converts the source type to the type required
 by the argument of the constructor.
 If the user-defined
-conversion is specified by a conversion function\iref{class.conv.fct}, the
+conversion is specified by a \link{conversion function}{class.conv.fct}, the
 initial standard conversion sequence
 converts the source type to the implicit object parameter of the
 conversion function.
@@ -2511,7 +2511,7 @@ [over.ics.ellipsis]
 \rSec4[over.ics.ref]{Reference binding}
 
 \pnum
-When a parameter of reference type binds directly\iref{dcl.init.ref} to an
+When a parameter of reference type \link{binds directly}{dcl.init.ref} to an
 argument expression, the implicit conversion sequence is the identity conversion,
 unless the argument expression has a type that is a derived class of the parameter
 type, in which case the implicit conversion sequence is a derived-to-base
@@ -2527,7 +2527,7 @@ [over.ics.ref]
 \end{example}
 If the parameter binds directly to the result of
 applying a conversion function to the argument expression, the implicit
-conversion sequence is a user-defined conversion sequence\iref{over.ics.user},
+conversion sequence is a \link{user-defined conversion sequence}{over.ics.user},
 with the second standard conversion sequence either an identity conversion or,
 if the conversion function returns an entity of a type that is a derived class
 of the parameter type, a derived-to-base conversion.
@@ -2582,7 +2582,7 @@ [over.ics.ref]
 \rSec4[over.ics.list]{List-initialization sequence}
 
 \pnum
-When an argument is an initializer list\iref{dcl.init.list}, it is not an
+When an argument is an initializer list\iref{dcl.init.list}, it is not an % todo
 expression and special rules apply for converting it to a parameter type.
 
 \pnum
@@ -2732,8 +2732,8 @@ [over.ics.list]
 
 \pnum
 Otherwise, if the parameter has an aggregate type which can be initialized from
-the initializer list according to the rules for aggregate
-initialization\iref{dcl.init.aggr}, the implicit conversion sequence is a
+the initializer list according to the rules for \link{aggregate
+initialization}{dcl.init.aggr}, the implicit conversion sequence is a
 user-defined conversion sequence with the second standard conversion
 sequence an identity conversion.
 \begin{example}
@@ -2821,13 +2821,13 @@ [over.ics.rank]
 (as defined in~\ref{over.best.ics})
 \begin{itemize}
 \item
-a standard conversion sequence\iref{over.ics.scs} is a better
+a \link{standard conversion sequence}{over.ics.scs} is a better
 conversion sequence than a user-defined conversion sequence
 or an ellipsis conversion sequence, and
 \item
-a user-defined conversion sequence\iref{over.ics.user} is a
-better conversion sequence than an ellipsis conversion
-sequence\iref{over.ics.ellipsis}.
+a \link{user-defined conversion sequence}{over.ics.user} is a
+better conversion sequence than an \link{ellipsis conversion
+sequence}{over.ics.ellipsis}.
 \end{itemize}
 
 \pnum
@@ -3199,11 +3199,11 @@ [over.over]
 an object or reference being initialized~(\ref{dcl.init}, \ref{dcl.init.ref},
 \ref{dcl.init.list}),
 \item
-the left side of an assignment\iref{expr.ass},
+the left side of an \link{assignment}{expr.ass},
 \item
 a parameter of a function\iref{expr.call},
 \item
-a parameter of a user-defined operator\iref{over.oper},
+a parameter of a \link{user-defined operator}{over.oper},
 \item
 the return value of a function, operator function, or conversion\iref{stmt.return},
 \item
@@ -3406,8 +3406,8 @@ [over.oper]
 and
 \tcode{[]}
 are formed from more than one token.
-The latter two operators are function call\iref{expr.call}
-and subscripting\iref{expr.sub}.
+The latter two operators are \link{function call}{expr.call}
+and \link{subscripting}{expr.sub}.
 \end{note}
 \indextext{operator!subscripting}%
 \indextext{operator!function call}%
@@ -3502,7 +3502,7 @@ [over.oper]
 
 \pnum
 \indextext{argument!overloaded operator and default}%
-An operator function cannot have default arguments\iref{dcl.fct.default},
+An operator function cannot have \link{default arguments}{dcl.fct.default},
 except where explicitly stated below.
 Operator
 functions cannot have more or fewer parameters than the
@@ -3827,7 +3827,7 @@ [over.built]
 In this subclause, the term
 \defn{promoted integral type}
 is used to refer to those integral types which are preserved by
-integral promotion\iref{conv.prom} (including e.g.
+\link{integral promotion}{conv.prom} (including e.g.
 \tcode{int}
 and
 \tcode{long}
diff --git a/source/templates.tex b/source/templates.tex
index 520a44d3..f5eb85f5 100644
--- a/source/templates.tex
+++ b/source/templates.tex
@@ -123,7 +123,7 @@ [temp.pre]
 class name
 is a
 \grammarterm{simple-template-id},
-the declaration declares a class template partial specialization\iref{temp.class.spec}.
+the declaration declares a \link{class template partial specialization}{temp.class.spec}.
 \end{note}
 
 \pnum
@@ -137,17 +137,17 @@ [temp.pre]
 
 \pnum
 \indextext{template name!linkage of}%
-A template name has linkage\iref{basic.link}.
+A template name has \link{linkage}{basic.link}.
 Specializations (explicit or implicit) of
 a template that has internal linkage are
 distinct from all specializations in other translation
 units.
-A template, a template explicit specialization\iref{temp.expl.spec}, and a class
+A template, a template \link{explicit specialization}{temp.expl.spec}, and a class
 template partial specialization shall not have C linkage. Use of a linkage specification
 other than \tcode{"C"} or \tcode{"C++"} with any of these constructs is
 conditionally-supported, with
 \impldef{semantics of linkage specification on templates} semantics.
-Template definitions shall obey the one-definition rule\iref{basic.def.odr}.
+Template definitions shall obey the \link{one-definition rule}{basic.def.odr}.
 \begin{note}
 Default arguments for function templates and for member functions of
 class templates are considered definitions for the purpose of template
@@ -493,7 +493,7 @@ [temp.param]
 may be specified for any kind of
 \grammarterm{template-parameter}
 (type, non-type, template)
-that is not a template parameter pack\iref{temp.variadic}.
+that is not a \deflink{template parameter pack}{temp.variadic}.
 A default
 \grammarterm{template-argument}
 may be specified in a template declaration.
@@ -629,7 +629,7 @@ [temp.param]
 optional \grammarterm{identifier} or is a
 \grammarterm{parameter-declaration} that declares a
 pack\iref{dcl.fct}, then the \grammarterm{template-parameter}
-is a template parameter pack\iref{temp.variadic}.
+is a \deflink{template parameter pack}{temp.variadic}.
 A template parameter pack that is a \grammarterm{parameter-declaration} whose type
 contains one or more unexpanded packs is a pack expansion. Similarly,
 a template parameter pack that is a \grammarterm{type-parameter} with a
@@ -661,7 +661,7 @@ [temp.param]
 \rSec1[temp.names]{Names of template specializations}
 
 \pnum
-A template specialization\iref{temp.spec} can be referred to by a
+A \link{template specialization}{temp.spec} can be referred to by a
 \grammarterm{template-id}:
 
 \begin{bnf}
@@ -695,7 +695,7 @@ [temp.names]
 \end{bnf}
 
 \begin{note}
-The name lookup rules\iref{basic.lookup} are used to associate the use of
+The \link{name lookup}{basic.lookup} rules are used to associate the use of
 a name with a template declaration;
 that is, to identify a name as a
 \grammarterm{template-name}.
@@ -973,8 +973,8 @@ [temp.arg]
 shall match the type and form specified for the corresponding
 parameter declared by the template in its
 \grammarterm{template-parameter-list}.
-When the parameter declared by the template is a template
-parameter pack\iref{temp.variadic}, it will correspond to zero or more
+When the parameter declared by the template is a
+\deflink{template parameter pack}{temp.variadic}, it will correspond to zero or more
 \grammarterm{template-argument}{s}.
 \begin{example}
 \begin{codeblock}
@@ -1136,7 +1136,7 @@ [temp.arg]
 \pnum
 When a \grammarterm{simple-template-id} does not name a function,
 a default \grammarterm{template-argument} is
-implicitly instantiated\iref{temp.inst}
+\link{implicitly instantiated}{temp.inst}
 when the value of that default argument is needed.
 \begin{example}
 \begin{codeblock}
@@ -1148,7 +1148,7 @@ [temp.arg]
 
 \pnum
 A \grammarterm{template-argument} followed by an ellipsis is
-a pack expansion\iref{temp.variadic}.
+a \deflink{pack expansion}{temp.variadic}.
 
 \rSec2[temp.arg.type]{Template type arguments}
 
@@ -1183,7 +1183,7 @@ [temp.arg.type]
 \end{codeblock}
 \end{example}
 \begin{note}
-A template type argument may be an incomplete type\iref{basic.types}.
+A template type argument may be an \deflinkx{incomplete type}{type!incomplete}{basic.types}.
 \end{note}
 
 \rSec2[temp.arg.nontype]{Template non-type arguments}
@@ -1326,7 +1326,7 @@ [temp.arg.template]
 parameter.
 
 \pnum
-Any partial specializations\iref{temp.class.spec} associated with the
+Any \link{partial specializations}{temp.class.spec} associated with the
 primary class template or primary variable template are considered when a
 specialization based on the template
 \grammarterm{template-parameter}
@@ -1434,8 +1434,8 @@ [temp.arg.template]
 the function template corresponding to \tcode{P}
 is at least as specialized as
 the function template corresponding to \tcode{A}
-according to the partial ordering rules
-for function templates\iref{temp.func.order}.
+according to the \link{partial ordering rules
+for function templates}{temp.func.order}.
 Given an invented class template \tcode{X}
 with the \grammarterm{template-head} of \tcode{A} (including default arguments
 and \grammarterm{requires-clause}, if any):
@@ -1481,14 +1481,14 @@ [temp.constr.constr]
 The operands of a logical operation are constraints.
 There are three different kinds of constraints:
 \begin{itemize}
-\item conjunctions\iref{temp.constr.op},
-\item disjunctions\iref{temp.constr.op}, and
-\item atomic constraints\iref{temp.constr.atomic}.
+\item \deflinkx{conjunctions}{conjunction}{temp.constr.op},
+\item \deflinkx{disjunctions}{disjunction}{temp.constr.op}, and
+\item \deflinkx{atomic constraints}{atomic constraint}{temp.constr.atomic}.
 \end{itemize}
 
 \pnum
 In order for a constrained template to be instantiated\iref{temp.spec},
-its associated constraints\iref{temp.constr.decl}
+its \deflink{associated constraints}{temp.constr.decl}
 shall be satisfied as described in the following subclauses.
 \begin{note}
 Forming the name of a specialization of
@@ -1496,7 +1496,7 @@ [temp.constr.constr]
 a variable template, or
 an alias template\iref{temp.names}
 requires the satisfaction of its constraints.
-Overload resolution\iref{over.match.viable}
+\link{Overload resolution}{over.match.viable}
 requires the satisfaction of constraints
 on functions and function templates.
 \end{note}
@@ -1553,7 +1553,7 @@ [temp.constr.op]
 
 f('a'); // OK: calls \tcode{f(int)}
 \end{codeblock}
-In the satisfaction of the associated constraints\iref{temp.constr.decl}
+In the satisfaction of the \deflink{associated constraints}{temp.constr.decl}
 of \tcode{f}, the constraint \tcode{sizeof(char) > 1} is not satisfied;
 the second operand is not checked for satisfaction.
 \end{example}
@@ -1611,9 +1611,9 @@ [temp.constr.atomic]
 unsubstituted template parameters of the constrained entity),
 called the \defn{parameter mapping}\iref{temp.constr.decl}.
 \begin{note}
-Atomic constraints are formed by constraint normalization\iref{temp.constr.normal}.
-\tcode{E} is never a logical \logop{AND} expression\iref{expr.log.and}
-nor a logical \logop{OR} expression\iref{expr.log.or}.
+Atomic constraints are formed by \deflinkx{constraint normalization}{constraint!normalization}{temp.constr.normal}.
+\tcode{E} is never a \link{logical \logop{AND} expression}{expr.log.and}
+nor a \link{logical \logop{OR} expression}{expr.log.or}.
 \end{note}
 
 \pnum
@@ -1687,7 +1687,7 @@ [temp.constr.atomic]
 first substituted into its expression.
 If substitution results in an invalid type or expression,
 the constraint is not satisfied.
-Otherwise, the lvalue-to-rvalue conversion\iref{conv.lval}
+Otherwise, the \link{lvalue-to-rvalue conversion}{conv.lval}
 is performed if necessary,
 and \tcode{E} shall be a constant expression of type \tcode{bool}.
 The constraint is satisfied if and only if evaluation of \tcode{E}
@@ -1745,11 +1745,11 @@ [temp.constr.decl]
 the declaration has no associated constraints.
 
 \item Otherwise, if there is a single introduced \grammarterm{constraint-expression},
-the associated constraints are the normal form\iref{temp.constr.normal}
+the associated constraints are the \deflink{normal form}{temp.constr.normal}
 of that expression.
 
-\item Otherwise, the associated constraints are the normal form of a logical
-\logop{AND} expression\iref{expr.log.and} whose operands are in the
+\item Otherwise, the associated constraints are the normal form of a \link{logical
+\logop{AND} expression}{expr.log.and} whose operands are in the
 following order:
 \begin{itemize}
 \item
@@ -1846,7 +1846,7 @@ [temp.constr.normal]
 
 \pnum
 The \defnx{normal form}{normal form!constraint} of an \grammarterm{expression} \tcode{E} is
-a constraint\iref{temp.constr.constr} that is defined as follows:
+a \deflink{constraint}{temp.constr.constr} that is defined as follows:
 %
 \begin{itemize}
 \item
@@ -1855,7 +1855,7 @@ [temp.constr.normal]
 
 \item
 The normal form of an expression \tcode{E1 || E2} is
-the disjunction\iref{temp.constr.op} of
+the \deflink{disjunction}{temp.constr.op} of
 the normal forms of \tcode{E1} and \tcode{E2}.
 
 \item
@@ -1977,7 +1977,7 @@ [temp.constr.order]
 \end{itemize}
 %
 \begin{example}
-Let $A$ and $B$ be atomic constraints\iref{temp.constr.atomic}.
+Let $A$ and $B$ be \deflinkx{atomic constraints}{atomic constraint}{temp.constr.atomic}.
 %
 The constraint $A \land B$ subsumes $A$, but $A$ does not subsume $A \land B$.
 %
@@ -1993,9 +1993,9 @@ [temp.constr.order]
 \begin{itemize}
 \item the best viable candidate of non-template functions\iref{over.match.best},
 \item the address of a non-template function\iref{over.over},
-\item the matching of template template arguments\iref{temp.arg.template},
-\item the partial ordering of class template specializations\iref{temp.class.order}, and
-\item the partial ordering of function templates\iref{temp.func.order}.
+\item the matching of \link{template template arguments}{temp.arg.template},
+\item the \link{partial ordering of class template specializations}{temp.class.order}, and
+\item the \link{partial ordering of function templates}{temp.func.order}.
 \end{itemize}
 \end{note}
 
@@ -2144,7 +2144,7 @@ [temp.type]
 \end{example}
 
 \pnum
-If an expression $e$ is type-dependent\iref{temp.dep.expr},
+If an expression $e$ is \link{type-dependent}{temp.dep.expr},
 \tcode{decltype($e$)}
 denotes a unique dependent type. Two such \grammarterm{decltype-specifier}{s}
 refer to the same type only if their \grammarterm{expression}{s} are
@@ -2171,7 +2171,7 @@ [temp.decls]
 \end{codeblock}
 \end{example}
 \begin{note}
-However, this syntax is allowed in class template partial specializations\iref{temp.class.spec}.
+However, this syntax is allowed in \link{class template partial specializations}{temp.class.spec}.
 \end{note}
 
 \pnum
@@ -2200,8 +2200,8 @@ [temp.decls]
 \grammarterm{requires-clause}{s},
 or
 \grammarterm{noexcept-specifier}{s}.
-For the purpose of instantiation, the substatements of a constexpr if
-statement\iref{stmt.if} are considered definitions.
+For the purpose of instantiation, the substatements of a
+\deflink{constexpr if}{stmt.if} statement are considered definitions.
 
 \pnum
 Because an \grammarterm{alias-declaration} cannot declare a
@@ -2556,7 +2556,7 @@ [temp.mem]
 
 \pnum
 A local class of non-closure type shall not have member templates.
-Access control rules\iref{class.access}
+\link{Access control rules}{class.access}
 apply to member template names.
 A destructor shall not be a member
 template.
@@ -2661,8 +2661,8 @@ [temp.mem]
 in a base class.
 
 \pnum
-Overload resolution\iref{over.ics.rank} and partial
-ordering\iref{temp.func.order} are used to select the best conversion function
+\link{Overload resolution}{over.ics.rank} and \link{partial
+ordering}{temp.func.order} are used to select the best conversion function
 among multiple
 specializations of conversion function templates
 and/or non-template
@@ -2776,7 +2776,7 @@ [temp.variadic]
 \item In a \grammarterm{capture-list}\iref{expr.prim.lambda.capture}; the pattern is
 the \grammarterm{capture} without the ellipsis.
 
-\item In a \tcode{sizeof...} expression\iref{expr.sizeof}; the pattern is an
+\item In a \link{\tcode{sizeof...} expression}{expr.sizeof}; the pattern is an
 \grammarterm{identifier}.
 
 \item In a \grammarterm{fold-expression}\iref{expr.prim.fold};
@@ -3071,8 +3071,8 @@ [temp.friend]
 
 \pnum
 A template friend declaration specifies that all specializations of that
-template, whether they are implicitly instantiated\iref{temp.inst}, partially
-specialized\iref{temp.class.spec} or explicitly specialized\iref{temp.expl.spec},
+template, whether they are \link{implicitly instantiated}{temp.inst}, \link{partially
+specialized}{temp.class.spec} or \link{explicitly specialized}{temp.expl.spec},
 are friends of the class containing the template friend declaration.
 \begin{example}
 \begin{codeblock}
@@ -3341,8 +3341,8 @@ [temp.class.spec]
 
 \end{example}
 \item
-The specialization shall be more specialized than the primary
-template\iref{temp.class.order}.
+The specialization shall be \deflink{more specialized}{temp.class.order}
+than the primary template.
 
 \item
 The template parameter list of a specialization shall not contain default
@@ -3381,7 +3381,7 @@ [temp.class.spec.match]
 generated from that specialization.
 \item
 If more than one matching specialization is found,
-the partial order rules\iref{temp.class.order} are used to determine
+the \link{partial order rules}{temp.class.order} are used to determine
 whether one of the specializations is more specialized than the
 others.
 If none of the specializations is more specialized than all of the
@@ -3395,9 +3395,9 @@ [temp.class.spec.match]
 \pnum
 A partial specialization matches a given actual template argument
 list if the template arguments of the partial specialization can be
-deduced from the actual template argument list\iref{temp.deduct},
-and the deduced template arguments satisfy the associated constraints
-of the partial specialization, if any\iref{temp.constr.decl}.
+\link{deduced}{temp.deduct} from the actual template argument list,
+and the deduced template arguments satisfy the \deflink{associated constraints}{temp.constr.decl}
+of the partial specialization, if any.
 \begin{example}
 \begin{codeblock}
 template<class T1, class T2, int I> class A             { };    // \#1
@@ -3459,14 +3459,14 @@ [temp.class.order]
 For two class template partial specializations,
 the first is \defn{more specialized} than the second if, given the following
 rewrite to two function templates, the first function template is more
-specialized than the second according to the ordering rules for function
-templates\iref{temp.func.order}:
+specialized than the second according to the \link{ordering rules for function
+templates}{temp.func.order}:
 
 \begin{itemize}
 \item
 Each of the two
 function templates has the same template parameters
-and associated constraints\iref{temp.constr.decl}
+and \deflink{associated constraints}{temp.constr.decl}
 as the corresponding partial specialization.
 \item
 Each function template
@@ -3637,7 +3637,7 @@ [temp.fct]
 overload resolution of
 function template specializations
 with the same name.
-If such a non-template function is odr-used\iref{basic.def.odr} in a program, it must be defined;
+If such a non-template function is \link{odr-used}{basic.def.odr} in a program, it must be defined;
 it will not be implicitly instantiated using the function template definition.}
 
 \rSec3[temp.over.link]{Function template overloading}
@@ -3672,8 +3672,8 @@ [temp.over.link]
 \end{example}
 
 \pnum
-Such specializations are distinct functions and do not violate the one-definition
-rule\iref{basic.def.odr}.
+Such specializations are distinct functions and do not violate the
+\link{one-definition rule}{basic.def.odr}.
 
 \pnum
 The signature of a function template
@@ -3724,7 +3724,7 @@ [temp.over.link]
 Two expressions involving template parameters are considered
 \defnx{equivalent}{equivalent!expressions}
 if two function definitions containing the expressions would satisfy
-the one-definition rule\iref{basic.def.odr}, except that the tokens used
+the \link{one-definition rule}{basic.def.odr}, except that the tokens used
 to name the template parameters may differ as long as a token used to
 name a template parameter in one expression is replaced by another token
 that names the same template parameter in the other expression.
@@ -3878,7 +3878,7 @@ [temp.func.order]
 \indextext{ordering!function template partial|see{template, function, partial ordering}}%
 If a function template is overloaded,
 the use of a function template specialization might be ambiguous because
-template argument deduction\iref{temp.deduct} may associate the function
+\link{template argument deduction}{temp.deduct} may associate the function
 template specialization with more than one function template declaration.
 \defnx{Partial ordering}{template!function!partial ordering}
 of overloaded function template declarations is used in the following contexts
@@ -3895,8 +3895,8 @@ [temp.func.order]
 specialization
 is selected to match a placement operator new~(\ref{basic.stc.dynamic.deallocation}, \ref{expr.new});
 \item
-when a friend function declaration\iref{temp.friend}, an
-explicit instantiation\iref{temp.explicit} or an explicit specialization\iref{temp.expl.spec} refers to
+when a \link{friend function declaration}{temp.friend}, an
+\link{explicit instantiation}{temp.explicit} or an \link{explicit specialization}{temp.expl.spec} refers to
 a function template specialization.
 \end{itemize}
 
@@ -3914,7 +3914,8 @@ [temp.func.order]
 
 \pnum
 To produce the transformed template, for each type, non-type, or template
-template parameter (including template parameter packs\iref{temp.variadic}
+template parameter (including
+\deflinkx{template parameter packs}{template parameter pack}{temp.variadic}
 thereof) synthesize a unique type, value, or class template
 respectively and substitute it for each occurrence of that parameter
 in the function type of the template.
@@ -4263,7 +4264,7 @@ [temp.concept]
 shall appear at namespace scope\iref{basic.scope.namespace}.
 
 \pnum
-A concept shall not have associated constraints\iref{temp.constr.decl}.
+A concept shall not have \deflink{associated constraints}{temp.constr.decl}.
 
 \pnum
 A concept is not instantiated\iref{temp.spec}.
@@ -4507,7 +4508,7 @@ [temp.res]
 \begin{itemize}
 \item
 no valid specialization can be generated for a template
-or a substatement of a constexpr if statement\iref{stmt.if} within a template
+or a substatement of a \deflink{constexpr if}{stmt.if} statement within a template
 and the template is not instantiated, or
 \item
 no substitution of template arguments
@@ -4542,7 +4543,7 @@ [temp.res]
 \item an instantiation uses a default argument or default template argument
 that had not been defined at the point at which the template was defined, or
 
-\item constant expression evaluation\iref{expr.const} within the template
+\item \link{constant expression evaluation}{expr.const} within the template
 instantiation uses
   \begin{itemize}
   \item the value of a const object of integral or unscoped enumeration type or
@@ -4864,9 +4865,9 @@ [temp.local]
 or the name of a member of the
 base class is the same as the name of a
 \grammarterm{template-parameter},
-the base class name or member name hides the
+the base class name or member name \link{hides}{basic.scope.hiding} the
 \grammarterm{template-parameter}
-name\iref{basic.scope.hiding}.
+name.
 \begin{example}
 \begin{codeblock}
 struct A {
@@ -4920,14 +4921,14 @@ [temp.dep]
 if
 \begin{itemize}
 \item
-any of the expressions in the \grammarterm{expression-list} is a pack
-expansion\iref{temp.variadic},
+any of the expressions in the \grammarterm{expression-list} is a
+\deflink{pack expansion}{temp.variadic},
 \item
 any of the expressions
 or \grammarterm{braced-init-list}{s}
 in the
 \grammarterm{expression-list}
-is type-dependent\iref{temp.dep.expr}, or
+is \link{type-dependent}{temp.dep.expr}, or
 \item
 the \grammarterm{unqualified-id}
 is a \grammarterm{template-id} in which any of the template arguments depends
@@ -4969,7 +4970,7 @@ [temp.dep]
 
 \pnum
 In the definition of a class or class template,
-the scope of a dependent base class\iref{temp.dep.type}
+the scope of a \deflinkx{dependent base class}{base class!dependent}{temp.dep.type}
 is not examined during unqualified
 name lookup either at the point of definition of the
 class template or member or during an instantiation of
@@ -5035,7 +5036,7 @@ [temp.dep.type]
 \item
 in the definition of a class template, a nested class of a class template,
 a member of a class template, or a member of a nested class of a class template,
-the injected-class-name\iref{class.pre} of the class template or nested class,
+the \deflink{injected-class-name}{class.pre} of the class template or nested class,
 \item
 in the definition of a primary class template
 or a member of a primary class template, the name of the
@@ -5065,9 +5066,9 @@ [temp.dep.type]
 template argument has the value of the
 $n^\text{th}$
 template parameter of the class template.
-If the $n^\text{th}$ template parameter is a template
-parameter pack\iref{temp.variadic}, the $n^\text{th}$ template argument is a pack
-expansion\iref{temp.variadic} whose pattern is the name of
+If the $n^\text{th}$ template parameter is a
+\deflink{template parameter pack}{temp.variadic}, the $n^\text{th}$ template argument is a
+\deflink{pack expansion}{temp.variadic} whose pattern is the name of
 the template parameter pack.
 
 \pnum
@@ -5186,10 +5187,10 @@ [temp.dep.type]
 \end{note}
 
 \item
-An \grammarterm{id-expression} denoting the member in a class member access
-expression\iref{expr.ref} for which the type of the object expression is the
-current instantiation, and the \grammarterm{id-expression}, when looked
-up\iref{basic.lookup.classref}, refers to at least one member of a class
+An \grammarterm{id-expression} denoting the member in a \link{class member access}{expr.ref}
+expression for which the type of the object expression is the
+current instantiation, and the \grammarterm{id-expression}, when \link{looked
+up}{basic.lookup.classref}, refers to at least one member of a class
 that is the current
 instantiation or a non-dependent base class thereof.
 \begin{note}
@@ -5240,8 +5241,8 @@ [temp.dep.type]
 find any member of a class that is the current instantiation or a non-dependent
 base class thereof.
 
-\item An \grammarterm{id-expression} denoting the member in a class member access
-expression\iref{expr.ref} in which either
+\item An \grammarterm{id-expression} denoting the member in a
+\link{class member access}{expr.ref} expression in which either
 \begin{itemize}
 \item the type of the object expression is the current instantiation, the
 current instantiation has at least one dependent base class, and name lookup
@@ -5332,12 +5333,12 @@ [temp.dep.type]
 template arguments is a dependent type or an expression that is type-dependent
 or value-dependent or is a pack expansion
 \begin{note}
-This includes an injected-class-name\iref{class.pre} of a class template
+This includes an \deflink{injected-class-name}{class.pre} of a class template
 used without a \grammarterm{template-argument-list}.
 \end{note}%
 , or
 \item denoted by \tcode{decltype(}\grammarterm{expression}{}\tcode{)},
-where \grammarterm{expression} is type-dependent\iref{temp.dep.expr}.
+where \grammarterm{expression} is \link{type-dependent}{temp.dep.expr}.
 \end{itemize}
 
 \pnum
@@ -5375,7 +5376,7 @@ [temp.dep.expr]
 associated by name lookup with
 a non-type \grammarterm{template-parameter}
 declared with a type
-that contains a placeholder type\iref{dcl.spec.auto},
+that contains a \deflink{placeholder type}{dcl.spec.auto},
 \item
 an
 \grammarterm{identifier}
@@ -5388,7 +5389,7 @@ [temp.dep.expr]
 with a return type that contains a placeholder type,
 \item
 an \grammarterm{identifier} associated by name lookup with
-a structured binding declaration\iref{dcl.struct.bind} whose
+a \link{structured binding declaration}{dcl.struct.bind} whose
 \grammarterm{brace-or-equal-initializer} is type-dependent,
 \item
 the
@@ -5456,7 +5457,7 @@ [temp.dep.expr]
 \end{note}
 
 \pnum
-A class member access expression\iref{expr.ref} is
+A \link{class member access expression}{expr.ref} is
 type-dependent if
 the expression refers to a member of the current instantiation and
 the type of the referenced member is dependent, or the class member access
@@ -5577,7 +5578,7 @@ [temp.dep.constexpr]
 instantiation is value-dependent.
 An expression of the form \tcode{\&}\grammarterm{cast-expression}
 is also value-dependent if evaluating \grammarterm{cast-expression}
-as a core constant expression\iref{expr.const} succeeds and
+as a \deflinkx{core constant expression}{expression!core constant}{expr.const} succeeds and
 the result of the evaluation refers to a templated entity
 that is an object with static or thread storage duration or a member function.
 
@@ -5724,7 +5725,7 @@ [temp.point]
 A specialization for any template may have points of instantiation in multiple
 translation units.
 If two different points of instantiation give a template specialization
-different meanings according to the one-definition rule\iref{basic.def.odr},
+different meanings according to the \link{one-definition rule}{basic.def.odr},
 the program is ill-formed, no diagnostic required.
 
 \rSec3[temp.dep.candidate]{Candidate functions}
@@ -6068,7 +6069,7 @@ [temp.spec]
 
 \pnum
 If a function declaration acquired its function type through
-a dependent type\iref{temp.dep.type} without using the syntactic form of
+a \link{dependent type}{temp.dep.type} without using the syntactic form of
 a function declarator, the program is ill-formed.
 \begin{example}
 \begin{codeblock}
@@ -6138,7 +6139,7 @@ [temp.inst]
 \end{codeblock}
 \end{example}
 If a class template has been declared, but not defined,
-at the point of instantiation\iref{temp.point},
+at the \link{point of instantiation}{temp.point},
 the instantiation yields an incomplete class type\iref{basic.types}.
 \begin{example}
 \begin{codeblock}
@@ -6148,7 +6149,7 @@ [temp.inst]
 \end{example}
 \begin{note}
 Within a template declaration,
-a local class\iref{class.local} or enumeration and the members of
+a \link{local class}{class.local} or enumeration and the members of
 a local class are never considered to be entities that can be separately
 instantiated (this includes their default arguments,
 \grammarterm{noexcept-specifier}{s}, and non-static data member
@@ -6327,7 +6328,7 @@ [temp.inst]
 \end{example}
 
 \pnum
-If the function selected by overload resolution\iref{over.match}
+If the function selected by \link{overload resolution}{over.match}
 can be determined without instantiating a class template definition,
 it is unspecified whether that instantiation actually takes place.
 \begin{example}
@@ -6644,8 +6645,8 @@ [temp.explicit]
 specialization of the entity with the same template arguments.
 If the
 \grammarterm{declaration}
-of the explicit instantiation names an implicitly-declared special member
-function\iref{special}, the program is ill-formed.
+of the explicit instantiation names an implicitly-declared \link{special member
+function}{special}, the program is ill-formed.
 
 \pnum
 The \grammarterm{declaration} in an \grammarterm{explicit-instantiation} and
@@ -6768,7 +6769,7 @@ [temp.explicit]
 and an explicit instantiation definition in the same translation unit, the
 definition shall follow the declaration. An entity that is the subject of an
 explicit instantiation declaration and that is also used
-in a way that would otherwise cause an implicit instantiation\iref{temp.inst}
+in a way that would otherwise cause an \link{implicit instantiation}{temp.inst}
 in the translation unit
 shall be the subject of an explicit instantiation definition somewhere in the
 program; otherwise the program is ill-formed, no diagnostic required.
@@ -7340,7 +7341,7 @@ [temp.arg.explicit]
 \end{itemize}
 
 \pnum
-Trailing template arguments that can be deduced\iref{temp.deduct} or
+Trailing template arguments that can be \link{deduced}{temp.deduct} or
 obtained from default
 \grammarterm{template-argument}{s}
 may be omitted from the list of explicit
@@ -7799,7 +7800,7 @@ [temp.deduct]
 In the following example,
 assuming a \tcode{signed char}
 cannot represent the value 1000,
-a narrowing conversion\iref{dcl.init.list}
+a \deflink{narrowing conversion}{dcl.init.list}
 would be required
 to convert the \grammarterm{template-argument}
 of type \tcode{int} to \tcode{signed char},
@@ -7908,8 +7909,8 @@ [temp.deduct.call]
 \item
 If
 \tcode{A}
-is an array type, the pointer type produced by the array-to-pointer
-standard conversion\iref{conv.array} is used in place of
+is an array type, the pointer type produced by the \link{array-to-pointer
+standard conversion}{conv.array} is used in place of
 \tcode{A}
 for type deduction;
 otherwise,
@@ -7917,7 +7918,7 @@ [temp.deduct.call]
 If
 \tcode{A}
 is a function type, the pointer type produced by the
-function-to-pointer standard conversion\iref{conv.func} is used in place
+\link{function-to-pointer standard conversion}{conv.func} is used in place
 of
 \tcode{A}
 for type
@@ -8013,8 +8014,8 @@ [temp.deduct.call]
 can be another pointer or pointer-to-member type that can be converted
 to the deduced
 \tcode{A}
-via a function pointer conversion\iref{conv.fctptr} and/or
-qualification conversion\iref{conv.qual}.
+via a \link{function pointer conversion}{conv.fctptr} and/or
+\link{qualification conversion}{conv.qual}.
 
 \item
 If
@@ -8157,7 +8158,7 @@ [temp.deduct.funcaddr]
 
 \pnum
 Template arguments can be deduced from the type specified when taking
-the address of an overloaded function\iref{over.over}.
+the address of an \link{overloaded function}{over.over}.
 If there is a target,
 the function template's function type and the target type
 are used as the types of
@@ -8169,7 +8170,7 @@ [temp.deduct.funcaddr]
 Otherwise, deduction is performed with empty sets of types P and A.
 
 \pnum
-A placeholder type\iref{dcl.spec.auto} in the return type of a
+A \deflink{placeholder type}{dcl.spec.auto} in the return type of a
 function template is a non-deduced context. If template argument
 deduction succeeds for such a function, the return type is determined
 from instantiation of the function body.
@@ -8203,7 +8204,7 @@ [temp.deduct.conv]
 If
 \tcode{P}
 is an array type, the pointer type produced by the
-array-to-pointer standard conversion\iref{conv.array} is used in place of
+\link{array-to-pointer standard conversion}{conv.array} is used in place of
 \tcode{P}
 for type
 deduction; otherwise,
@@ -8211,7 +8212,7 @@ [temp.deduct.conv]
 If
 \tcode{P}
 is a function type, the pointer type produced by the
-function-to-pointer standard conversion\iref{conv.func} is used in place of
+\link{function-to-pointer standard conversion}{conv.func} is used in place of
 \tcode{P}
 for
 type deduction; otherwise,
@@ -8305,7 +8306,7 @@ [temp.deduct.partial]
 In the context of a call to a conversion function, the return types of
 the conversion function templates are used.
 \item
-In other contexts\iref{temp.func.order} the function template's function
+In \link{other contexts}{temp.func.order} the function template's function
 type is used.
 \end{itemize}
 
@@ -8788,7 +8789,7 @@ [temp.deduct.type]
 template argument list of \tcode{A}. Each comparison deduces
 template arguments for subsequent positions in the template parameter
 packs expanded by $\texttt{P}_i$.
-During partial ordering\iref{temp.deduct.partial}, if $\texttt{A}_i$ was
+During \link{partial ordering}{temp.deduct.partial}, if $\texttt{A}_i$ was
 originally a pack expansion:
 \begin{itemize}
 \item if \tcode{P} does not contain a template argument corresponding to
@@ -8851,7 +8852,7 @@ [temp.deduct.type]
 of \tcode{A}. Each comparison deduces template arguments for
 subsequent positions in the template parameter packs expanded by the
 function parameter pack.
-During partial ordering\iref{temp.deduct.partial}, if $\texttt{A}_i$ was
+During \link{partial ordering}{temp.deduct.partial}, if $\texttt{A}_i$ was
 originally a function parameter pack:
 \begin{itemize}
 \item if \tcode{P} does not contain a function parameter type corresponding to
@@ -9128,8 +9129,8 @@ [temp.deduct.decl]
 In a declaration whose \grammarterm{declarator-id} refers to a specialization
 of a function template, template argument deduction is performed to identify
 the specialization to which the declaration refers. Specifically, this is done
-for explicit instantiations\iref{temp.explicit}, explicit specializations\iref{temp.expl.spec},
-and certain friend declarations\iref{temp.friend}. This is also done to
+for \link{explicit instantiations}{temp.explicit}, \link{explicit specializations}{temp.expl.spec},
+and certain \link{friend declarations}{temp.friend}. This is also done to
 determine whether a deallocation function template specialization matches a placement
 \tcode{operator new}~(\ref{basic.stc.dynamic.deallocation}, \ref{expr.new}).
 In all these cases, \tcode{P} is the type of the function template being considered
diff --git a/source/exceptions.tex b/source/exceptions.tex
index 6185a15a..3af4f117 100644
--- a/source/exceptions.tex
+++ b/source/exceptions.tex
@@ -184,7 +184,7 @@ [except.pre]
 
 \pnum
 In this Clause, ``before'' and ``after'' refer to the
-``sequenced before'' relation\iref{intro.execution}.
+\deflinkx{``sequenced before''}{sequenced before}{intro.execution} relation.
 
 \rSec1[except.throw]{Throwing an exception}%
 \indextext{exception handling!throwing}%
@@ -195,9 +195,9 @@ [except.throw]
 \begin{note}
 An exception can be thrown from one of the following contexts:
 \grammarterm{throw-expression}{s}\iref{expr.throw},
-allocation functions\iref{basic.stc.dynamic.allocation},
-\tcode{dynamic_cast}\iref{expr.dynamic.cast},
-\tcode{typeid}\iref{expr.typeid},
+\link{allocation functions}{basic.stc.dynamic.allocation},
+\link{\tcode{dynamic_cast}}{expr.dynamic.cast},
+\link{\tcode{typeid}}{expr.typeid},
 \grammarterm{new-expression}{s}\iref{expr.new}, and standard library
 functions\iref{structure.specifications}.
 \end{note}
@@ -287,7 +287,7 @@ [except.throw]
 declared in the \grammarterm{exception-declaration} in the handler;
 
 \item
-when an object of type \tcode{std::exception_ptr}\iref{propagation}
+when an object of type \liblinkx{\tcode{std::exception_ptr}}{\idxcode{exception_ptr}}{propagation}
 that refers to the exception object is destroyed,
 before the destructor of \tcode{std::exception_ptr} returns.
 \end{itemize}
@@ -295,7 +295,7 @@ [except.throw]
 Among all points of potential destruction for the exception object,
 there is an unspecified last one
 where the exception object is destroyed.
-All other points happen before that last one\iref{intro.races}.
+All other points \deflinkx{happen before}{happens before}{intro.races} that last one.
 \begin{note}
 No other thread synchronization is implied in exception handling.
 \end{note}
@@ -322,7 +322,7 @@ [except.throw]
 \indextext{exception handling!rethrow}%
 \indextext{rethrow|see{exception handling, rethrow}}%
 An exception is considered caught when a handler for that exception
-becomes active\iref{except.handle}.
+becomes \deflinkx{active}{exception handling!handler!active}{except.handle}.
 \begin{note}
 An exception can have active handlers and still be considered uncaught if
 it is rethrown.
@@ -332,9 +332,9 @@ [except.throw]
 \indextext{exception handling!terminate called@\tcode{terminate} called}%
 \indextext{\idxcode{terminate}!called}%
 If the exception handling mechanism
-handling an uncaught exception\iref{except.uncaught}
+handling an \link{uncaught exception}{except.uncaught}
 directly invokes a function that exits via an
-exception, the function \tcode{std::terminate} is called\iref{except.terminate}.
+exception, the function \link{\tcode{std::terminate}}{except.terminate} is called.
 \begin{example}
 \begin{codeblock}
 struct C {
@@ -377,7 +377,7 @@ [except.ctor]
 constructed, but not yet destroyed,
 since the try block was entered.
 If an exception is thrown during the destruction of temporaries or
-local variables for a \tcode{return} statement\iref{stmt.return},
+local variables for a \link{\tcode{return} statement}{stmt.return},
 the destructor for the returned object (if any) is also invoked.
 The objects are destroyed in the reverse order of the completion
 of their construction.
@@ -441,7 +441,7 @@ [except.ctor]
 \pnum
 \begin{note}
 If the object was allocated by a \grammarterm{new-expression}\iref{expr.new},
-the matching deallocation function\iref{basic.stc.dynamic.deallocation},
+the matching \link{deallocation function}{basic.stc.dynamic.deallocation},
 if any, is called to free the storage occupied by the object.
 \end{note}
 
@@ -506,12 +506,12 @@ [except.handle]
 \begin{itemize}
 
 \item%
-a standard pointer conversion\iref{conv.ptr} not involving conversions
+a standard \link{pointer conversion}{conv.ptr} not involving conversions
 to pointers to private or protected or ambiguous classes
 \item%
-a function pointer conversion\iref{conv.fctptr}
+a \link{function pointer conversion}{conv.fctptr}
 \item%
-a qualification conversion\iref{conv.qual}, or
+a \link{qualification conversion}{conv.qual}, or
 
 \end{itemize}
 
@@ -632,7 +632,7 @@ [except.handle]
 constructors of namespace-scope objects with static storage duration are not caught by a
 \grammarterm{function-try-block}
 on
-the \tcode{main} function\iref{basic.start.main}.
+the \link{\tcode{main} function}{basic.start.main}.
 Exceptions thrown in destructors of objects with thread storage duration or in constructors of namespace-scope objects with thread storage duration are not caught by a
 \grammarterm{function-try-block}
 on the initial function of the thread.
@@ -663,9 +663,11 @@ [except.handle]
 \begin{itemize}
 \item
 if \tcode{T} is a base class of \tcode{E}, the variable is
-copy-initialized\iref{dcl.init} from the corresponding base class subobject
+\deflinkx{copy-initialized}{copy-initialization}{dcl.init}
+from the corresponding base class subobject
 of the exception object;
-\item otherwise, the variable is copy-initialized\iref{dcl.init}
+\item otherwise, the variable is
+\deflinkx{copy-initialized}{copy-initialization}{dcl.init}
 from the exception object.
 \end{itemize}
 
@@ -700,7 +702,7 @@ [except.spec]
 The exception specification is either defined implicitly,
 or defined explicitly
 by using a \grammarterm{noexcept-specifier}
-as a suffix of a function declarator\iref{dcl.fct}.
+as a suffix of a \link{function declarator}{dcl.fct}.
 
 \begin{bnf}
 \nontermdef{noexcept-specifier}\br
@@ -711,13 +713,13 @@ [except.spec]
 \pnum
 \indextext{exception specification!noexcept!constant expression and}%
 In a \grammarterm{noexcept-specifier}, the \grammarterm{constant-expression},
-if supplied, shall be a contextually converted constant expression
-of type \tcode{bool}\iref{expr.const};
+if supplied, shall be a
+\deflink{contextually converted constant expression of type \tcode{bool}}{expr.const};
 that constant expression is the exception specification of
 the function type in which the \grammarterm{noexcept-specifier} appears.
 A \tcode{(} token that follows \tcode{noexcept} is part of the
 \grammarterm{noexcept-specifier} and does not commence an
-initializer\iref{dcl.init}.
+\link{initializer}{dcl.init}.
 The \grammarterm{noexcept-specifier} \tcode{noexcept}
 without a \grammarterm{constant-expression}
 is
@@ -734,7 +736,7 @@ [except.spec]
 is as specified below
 and no other declaration for that function
 shall have a \grammarterm{noexcept-specifier}.
-In an explicit instantiation\iref{temp.explicit}
+In an \link{explicit instantiation}{temp.explicit}
 a \grammarterm{noexcept-specifier} may be specified,
 but is not required.
 If a \grammarterm{noexcept-specifier} is specified
@@ -812,7 +814,7 @@ [except.spec]
 \defnx{potentially-throwing}{potentially-throwing!expression} if
 \begin{itemize}
 \item
-$E$ is a function call\iref{expr.call}
+$E$ is a \link{function call}{expr.call}
 whose \grammarterm{postfix-expression}
 has a function type,
 or a pointer-to-function type,
@@ -823,15 +825,15 @@ [except.spec]
 (such as an overloaded operator,
 an allocation function in a \grammarterm{new-expression},
 a constructor for a function argument,
-or a destructor if $E$ is a full-expression\iref{intro.execution})
+or a destructor if $E$ is a \deflink{full-expression}{intro.execution})
 that is potentially-throwing,
 or
 \item
 $E$ is a \grammarterm{throw-expression}\iref{expr.throw},
 or
 \item
-$E$ is a \tcode{dynamic_cast} expression that casts to a reference type and
-requires a runtime check\iref{expr.dynamic.cast},
+$E$ is a \link{\tcode{dynamic_cast}}{expr.dynamic.cast} expression that casts to a reference type and
+requires a runtime check,
 or
 \item
 $E$ is a \tcode{typeid} expression applied to a
@@ -840,7 +842,7 @@ [except.spec]
 polymorphic class type\iref{expr.typeid},
 or
 \item
-any of the immediate subexpressions\iref{intro.execution}
+any of the \deflinkx{immediate subexpressions}{immediate subexpression}{intro.execution}
 of $E$ is potentially-throwing.
 \end{itemize}
 
@@ -893,7 +895,7 @@ [except.spec]
 in the implicit definition is potentially-throwing.
 
 \pnum
-A deallocation function\iref{basic.stc.dynamic.deallocation}
+A \link{deallocation function}{basic.stc.dynamic.deallocation}
 with no explicit \grammarterm{noexcept-specifier}
 has a non-throwing exception specification.
 
@@ -944,7 +946,7 @@ [except.spec]
 \item in an expression, the function is the unique lookup result or the selected
 member of a set of overloaded functions~(\ref{basic.lookup}, \ref{over.match}, \ref{over.over});
 
-\item the function is odr-used\iref{basic.def.odr} or, if it appears in an
+\item the function is \link{odr-used}{basic.def.odr} or, if it appears in an
 unevaluated operand, would be odr-used if the expression were
 potentially-evaluated;
 
@@ -979,8 +981,8 @@ [except.special]
 is used by the exception
 handling mechanism for coping with errors related to the exception handling
 mechanism itself. The function
-\tcode{std::current_exception()}\iref{propagation} and the class
-\tcode{std::nested_exception}\iref{except.nested} can be used by a program to
+\link{\tcode{std::current_exception()}}{propagation} and the class
+\link{\tcode{std::nested_exception}}{except.nested} can be used by a program to
 capture the currently handled exception.
 
 \rSec2[except.terminate]{The \tcode{std::terminate} function}
@@ -1004,12 +1006,12 @@ [except.terminate]
 \item%
 when the exception handling mechanism cannot find a handler for a thrown exception\iref{except.handle}, or
 
-\item when the search for a handler\iref{except.handle} encounters the
+\item when the search for a \link{handler}{except.handle} encounters the
 outermost block of a function
-with a non-throwing exception specification\iref{except.spec}, or
+with a non-throwing \link{exception specification}{except.spec}, or
 
 \item%
-when the destruction of an object during stack unwinding\iref{except.ctor}
+when the destruction of an object during \deflink{stack unwinding}{except.ctor}
 terminates by throwing an exception, or
 
 \item%
@@ -1063,17 +1065,17 @@ [except.terminate]
 \pnum
 \indextext{\idxcode{terminate}}%
 In such cases,
-the function \tcode{std::terminate}
-is called\iref{exception.terminate}.
+the function \link{\tcode{std::terminate}}{exception.terminate}
+is called.
 In the situation where no matching handler is found, it is
 \impldef{stack unwinding before call to \tcode{std::terminate}} whether or not the
 stack is unwound
 before
 \tcode{std::terminate}
 is called.
-In the situation where the search for a handler\iref{except.handle} encounters the
+In the situation where the search for a \link{handler}{except.handle} encounters the
 outermost block of a function
-with a non-throwing exception specification\iref{except.spec}, it is
+with a non-throwing \link{exception specification}{except.spec}, it is
 \impldef{whether stack is unwound before calling the function \tcode{std::terminate}
 when a \tcode{noexcept} specification
 is violated}
@@ -1092,7 +1094,7 @@ [except.uncaught]
 
 \pnum
 An exception is considered uncaught
-after completing the initialization of the exception object\iref{except.throw}
+after completing the initialization of the \deflinkx{exception object}{exception handling!exception object}{except.throw}
 until completing the activation of a handler for the exception\iref{except.handle}.
 \begin{note}
 As a consequence, an exception is considered uncaught
@@ -1101,6 +1103,6 @@ [except.uncaught]
 If an exception is rethrown~(\ref{expr.throw}, \ref{propagation}),
 it is considered uncaught from the point of rethrow
 until the rethrown exception is caught.
-The function \tcode{std::uncaught_exceptions()}\iref{uncaught.exceptions}
+The function \link{\tcode{std::uncaught_exceptions()}}{uncaught.exceptions}
 returns the number of uncaught exceptions in the current thread.%
 \indextext{exception handling|)}
diff --git a/source/preprocessor.tex b/source/preprocessor.tex
index 50e1146b..a4bd2f42 100644
--- a/source/preprocessor.tex
+++ b/source/preprocessor.tex
@@ -405,7 +405,7 @@ [cpp.cond]
 Each preprocessing token that remains (in the list of preprocessing tokens that
 will become the controlling expression)
 after all macro replacements have occurred
-shall be in the lexical form of a token\iref{lex.token}.
+shall be in the lexical form of a \link{token}{lex.token}.
 
 \pnum
 Preprocessing directives of the forms
@@ -451,8 +451,8 @@ [cpp.cond]
 \tcode{0},
 and then each preprocessing token is converted into a token.
 \begin{note}
-An alternative
-token\iref{lex.digraph} is not an identifier,
+An \link{alternative
+token}{lex.digraph} is not an identifier,
 even when its spelling consists entirely of letters and underscores.
 Therefore it is not subject to this replacement.
 \end{note}
@@ -470,8 +470,8 @@ [cpp.cond]
 implementation where \tcode{std::numeric_limits<int>::max()} is \tcode{0x7FFF}
 and \tcode{std::numeric_limits<unsigned int>::max()} is \tcode{0xFFFF},
 the integer literal \tcode{0x8000} is signed and positive within a \tcode{\#if}
-expression even though it is unsigned in translation phase
-7\iref{lex.phases}.
+expression even though it is unsigned in \link{translation phase
+7}{lex.phases}.
 \end{note}
 This includes interpreting \grammarterm{character-literal}s, which may involve
 converting escape sequences into execution character set members.
@@ -1035,7 +1035,7 @@ [cpp.replace]
 (see \ref{lex.phases}, translation phases),
 they are never scanned for macro names or parameters.}
 to be replaced by the replacement list of preprocessing tokens
-that constitute the remainder of the directive.\footnote{An alternative token\iref{lex.digraph} is not an identifier,
+that constitute the remainder of the directive.\footnote{An \link{alternative token}{lex.digraph} is not an identifier,
 even when its spelling consists entirely of letters and underscores.
 Therefore it is not possible to define a macro
 whose name is the same as that of an alternative token.}
@@ -1538,7 +1538,7 @@ [cpp.line]
 \defn{line number}
 of the current source line is one greater than
 the number of new-line characters read or introduced
-in translation phase 1\iref{lex.phases}
+in \link{translation phase 1}{lex.phases}
 while processing the source file to the current token.
 
 \pnum
@@ -1812,13 +1812,13 @@ [cpp.predefined]
 \indextext{__stdcpp_strict_pointer_safety__@\mname{STDCPP_STRICT_POINTER_SAFETY}}%
 \mname{STDCPP_STRICT_POINTER_SAFETY}\\
 Defined, and has the value integer literal 1, if and only if the implementation
-has strict pointer safety\iref{basic.stc.dynamic.safety}.
+has \deflink{strict pointer safety}{basic.stc.dynamic.safety}.
 
 \item
 \indextext{__stdcpp_threads__@\mname{STDCPP_THREADS}}%
 \mname{STDCPP_THREADS}\\
 Defined, and has the value integer literal 1, if and only if a program
-can have more than one thread of execution\iref{intro.multithread}.
+can have more than one \link{thread of execution}{intro.multithread}.
 
 \end{description}
 
diff --git a/source/lib-intro.tex b/source/lib-intro.tex
index d8ea15b9..a28ded2d 100644
--- a/source/lib-intro.tex
+++ b/source/lib-intro.tex
@@ -10,8 +10,8 @@ [library.general]
 how a conforming implementation may provide the entities in the library.
 
 \pnum
-The following subclauses describe the definitions\iref{definitions}, method of
-description\iref{description}, and organization\iref{organization} of the
+The following subclauses describe the \link{definitions}{definitions}, method of
+\link{description}{description}, and \link{organization}{organization} of the
 library. \ref{requirements}, \ref{\firstlibchapter}
 through \ref{\lastlibchapter}, and \ref{depr} specify the contents of the
 library, as well as library requirements and constraints on both well-formed
@@ -45,9 +45,9 @@ [library.general]
 \end{floattable}
 
 \pnum
-The language support library\iref{support} provides components that are
+The \link{language support library}{support} provides components that are
 required by certain parts of the \Cpp{} language, such as memory allocation~(\ref{expr.new},
-\ref{expr.delete}) and exception processing\iref{except}.
+\ref{expr.delete}) and \link{exception processing}{except}.
 
 \pnum
 The concepts library\iref{concepts} describes library components that \Cpp{}
@@ -59,9 +59,9 @@ [library.general]
 reporting errors in a \Cpp{} program, including predefined exception classes.
 
 \pnum
-The general utilities library\iref{utilities} includes components used
-by other library elements, such as a predefined storage allocator for dynamic
-storage management\iref{basic.stc.dynamic}, and components used
+The \link{general utilities library}{utilities} includes components used
+by other library elements, such as a predefined storage allocator for \link{dynamic
+storage management}{basic.stc.dynamic}, and components used
 as infrastructure
 in \Cpp{} programs,
 such as tuples, function wrappers, and time facilities.
@@ -76,7 +76,7 @@ [library.general]
 and sequences of any other character-like type.
 
 \pnum
-The localization library\iref{localization} provides extended internationalization
+The \link{localization library}{localization} provides extended internationalization
 support for text processing.
 
 \pnum
@@ -85,7 +85,7 @@ [library.general]
 to a subset of the most widely used algorithms and data structures.
 
 \pnum
-The numerics library\iref{numerics} provides
+The \link{numerics library}{numerics} provides
 numeric algorithms and complex number components that extend support for numeric processing.
 The
 \tcode{valarray}
@@ -96,21 +96,21 @@ [library.general]
 The random number component provides facilities for generating pseudo-random numbers.
 
 \pnum
-The input/output library\iref{input.output} provides the
+The \link{input/output library}{input.output} provides the
 \tcode{iostream}
 components that are the primary mechanism for \Cpp{} program input and output.
 They can be used with other elements of the library, particularly
 strings, locales, and iterators.
 
 \pnum
-The regular expressions library\iref{re} provides regular expression matching and searching.
+The \link{regular expressions library}{re} provides regular expression matching and searching.
 
 \pnum
-The atomic operations library\iref{atomics} allows more fine-grained
+The \link{atomic operations library}{atomics} allows more fine-grained
 concurrent access to shared data than is possible with locks.
 
 \pnum
-The thread support library\iref{thread} provides components to create
+The \link{thread support library}{thread} provides components to create
 and manage threads, including mutual exclusion and interthread communication.
 
 \rSec1[library.c]{The C standard library}
@@ -206,7 +206,7 @@ [definitions]
 expression whose evaluation as subexpression of a
 \grammarterm{conditional-expression}
 \tcode{CE}\iref{expr.cond} would not prevent \tcode{CE}
-from being a core constant expression\iref{expr.const}
+from being a \deflinkx{core constant expression}{expression!core constant}{expr.const}
 
 \definition{deadlock}{defns.deadlock}
 \indexdefn{deadlock}%
@@ -228,8 +228,8 @@ [definitions]
 
 \definition{direct-non-list-initialization}{defns.direct-non-list-init}
 \indexdefn{direct-non-list-initialization}%
-direct-initialization\iref{dcl.init}
-that is not list-initialization\iref{dcl.init.list}
+\deflink{direct-initialization}{dcl.init}
+that is not \deflink{list-initialization}{dcl.init.list}
 
 \definition{expression-equivalent}{defns.expression-equivalent}
 \indexdefn{expression-equivalent}%
@@ -294,7 +294,7 @@ [definitions]
 
 \definition{modifier function}{defns.modifier}
 \indexdefn{function!modifier}%
-class member function\iref{class.mfct} other than a constructor,
+\link{class member function}{class.mfct} other than a constructor,
 assignment operator, or destructor
 that alters the state of an object of the class
 
@@ -317,7 +317,7 @@ [definitions]
 
 \definition{observer function}{defns.observer}
 \indexdefn{function!observer}%
-class member function\iref{class.mfct} that accesses the state of an object of the class
+\link{class member function}{class.mfct} that accesses the state of an object of the class
 but does not alter that state
 
 \begin{defnote}
@@ -716,8 +716,8 @@ [conventions]
 This subclause describes several editorial conventions used to describe the contents
 of the \Cpp{} standard library.
 These conventions are for describing
-implementation-defined types\iref{type.descriptions},
-and member functions\iref{functions.within.classes}.
+\link{implementation-defined types}{type.descriptions},
+and \link{member functions}{functions.within.classes}.
 
 \rSec3[expos.only.func]{Exposition-only functions}
 
@@ -835,7 +835,7 @@ [bitmask.types]
 Each bitmask type can be implemented as an
 enumerated type that overloads certain operators, as an integer type,
 or as a
-\tcode{bitset}\iref{template.bitset}.
+\link{\tcode{bitset}}{template.bitset}.
 \indextext{type!enumerated}%
 
 \pnum
@@ -949,7 +949,7 @@ [character.seq]
 \item
 A
 \defn{character sequence}
-is an array object\iref{dcl.array} \tcode{\placeholdernc{A}} that
+is an \link{array object}{dcl.array} \tcode{\placeholdernc{A}} that
 can be declared as
 \tcode{\placeholdernc{T\;A}[\placeholder{N}]},
 where \tcode{\placeholder{T}} is any of the types
@@ -1081,7 +1081,7 @@ [objects.within.classes]
 \pnum
 \ref{\firstlibchapter} through \ref{\lastlibchapter} and
 \ref{depr} do not specify the representation of classes, and intentionally
-omit specification of class members\iref{class.mem}. An implementation may
+omit specification of \link{class members}{class.mem}. An implementation may
 define static or non-static class members, or both, as needed to implement the
 semantics of the member functions specified in \ref{\firstlibchapter}
 through \ref{\lastlibchapter} and \ref{depr}.
@@ -1322,10 +1322,10 @@ [headers]
 Except as noted in \ref{library} through \ref{\lastlibchapter}
 and \ref{depr}, the contents of each header \tcode{c\placeholder{name}} is
 the same as that of the corresponding header \tcode{\placeholder{name}.h} as
-specified in the C standard library\iref{intro.refs}.
+specified in the \deflinkx{C standard library}{C!standard library}{intro.refs}.
 In the \Cpp{} standard library, however, the
 declarations (except for names which are defined as macros in C) are within
-namespace scope\iref{basic.scope.namespace} of the namespace \tcode{std}.
+\link{namespace scope}{basic.scope.namespace} of the namespace \tcode{std}.
 It is unspecified whether these names (including any overloads added in
 \ref{\firstlibchapter} through \ref{\lastlibchapter} and \ref{depr})
 are first declared within the global namespace scope
@@ -1535,8 +1535,8 @@ [using.overview]
 \pnum
 Subclause \ref{using} describes how a \Cpp{} program gains access to the facilities of the
 \Cpp{} standard library. \ref{using.headers} describes effects during translation
-phase 4, while~\ref{using.linkage} describes effects during phase
-8\iref{lex.phases}.
+phase 4, while~\ref{using.linkage} describes effects during \link{phase
+8}{lex.phases}.
 
 \rSec3[using.headers]{Headers}
 
@@ -1576,7 +1576,7 @@ [using.headers]
 \rSec3[using.linkage]{Linkage}
 
 \pnum
-Entities in the \Cpp{} standard library have external linkage\iref{basic.link}.
+Entities in the \Cpp{} standard library have \link{external linkage}{basic.link}.
 Unless otherwise specified, objects and functions have the default
 \tcode{extern "C++"}
 linkage\iref{dcl.link}.
@@ -1608,8 +1608,8 @@ [using.linkage]
 \indextext{startup!program}%
 \pnum
 See also
-replacement functions\iref{replacement.functions},
-runtime changes\iref{handler.functions}.
+\link{replacement functions}{replacement.functions},
+\link{runtime changes}{handler.functions}.
 
 \rSec2[utility.requirements]{Requirements on types and expressions}
 
@@ -1646,7 +1646,7 @@ [utility.arg.requirements]
 In general, a default constructor is not required. Certain container class
 member function signatures specify \tcode{T()} as a default argument.
 \tcode{T()} shall be a well-defined expression\iref{dcl.init} if one of those
-signatures is called using the default argument\iref{dcl.fct.default}.
+signatures is called using the \link{default argument}{dcl.fct.default}.
 
 \begin{oldconcepttable}{EqualityComparable}{}{cpp17.equalitycomparable}
 {x{1in}x{1in}p{3in}}
@@ -1772,13 +1772,13 @@ [swappable.requirements]
 
 \pnum
 The context in which \tcode{swap(t, u)} and \tcode{swap(u, t)} are evaluated shall
-ensure that a binary non-member function named ``swap'' is selected via overload
-resolution\iref{over.match} on a candidate set that includes:
+ensure that a binary non-member function named ``swap'' is selected via \link{overload
+resolution}{over.match} on a candidate set that includes:
 \begin{itemize}
 \item the two \tcode{swap} function templates defined in
 \libheaderref{utility} and
 
-\item the lookup set produced by argument-dependent lookup\iref{basic.lookup.argdep}.
+\item the lookup set produced by \link{argument-dependent lookup}{basic.lookup.argdep}.
 \end{itemize}
 \begin{note}
 If \tcode{T} and \tcode{U} are both fundamental types or arrays of
@@ -1860,7 +1860,7 @@ [nullablepointer.requirements]
 \oldconcept{DefaultConstructible}, \oldconcept{CopyConstructible}, \oldconcept{\-Copy\-Assign\-able},
 and \oldconcept{Destructible} requirements,
 
-\item lvalues of type \tcode{P} are swappable\iref{swappable.requirements},
+\item lvalues of type \tcode{P} are \link{swappable}{swappable.requirements},
 
 \item the expressions shown in \tref{cpp17.nullablepointer} are
 valid and have the indicated semantics, and
@@ -1878,8 +1878,9 @@ [nullablepointer.requirements]
 \end{note}
 
 \pnum
-An object \tcode{p} of type \tcode{P} can be contextually converted to
-\tcode{bool}\iref{conv}. The effect shall be as if \tcode{p != nullptr}
+An object \tcode{p} of type \tcode{P} can be
+\deflinkx{contextually converted to \tcode{bool}}{conversion!contextual to bool}{conv}.
+The effect shall be as if \tcode{p != nullptr}
 had been evaluated in place of \tcode{p}.
 
 \pnum
@@ -1979,10 +1980,10 @@ [allocator.requirements]
 This information includes the knowledge of pointer types, the type of their
 difference, the type of the size of objects in this allocation model, as well
 as the memory allocation and deallocation primitives for it. All of the
-string types\iref{strings},
-containers\iref{containers} (except \tcode{array}),
+\link{string types}{strings},
+\link{containers}{containers} (except \tcode{array}),
 string buffers and string streams\iref{input.output}, and
-\tcode{match_results}\iref{re} are parameterized in terms of
+\link{\tcode{match_results}}{re} are parameterized in terms of
 allocators.
 
 \begin{shortlibreqtab2}
@@ -2271,7 +2272,7 @@ [allocator.requirements]
 \oldconcept{\-Move\-Assign\-able} requirements (\tref{cpp17.moveassignable})
 and the move operation shall not throw exceptions.
 If \tcode{X::propagate_on_container_swap::value} is \tcode{true},
-lvalues of type \tcode{X} shall be swappable\iref{swappable.requirements}
+lvalues of type \tcode{X} shall be \link{swappable}{swappable.requirements}
 and the \tcode{swap} operation shall not throw exceptions.
 
 \pnum
@@ -2376,7 +2377,7 @@ [allocator.requirements.completeness]
 whether or not \tcode{T} is a complete type:
 \begin{itemize}
 \item \tcode{X} is a complete type, and
-\item all the member types of \tcode{allocator_traits<X>}\iref{allocator.traits}
+\item all the member types of \link{\tcode{allocator_traits<X>}}{allocator.traits}
   other than \tcode{value_type} are complete types.
 \end{itemize}
 
@@ -2387,11 +2388,11 @@ [constraints.overview]
 \pnum
 Subclause \ref{constraints} describes restrictions on \Cpp{} programs that use the facilities of
 the \Cpp{} standard library. The following subclauses specify constraints on the
-program's use of namespaces\iref{namespace.std}, its use of various reserved
-names\iref{reserved.names}, its use of headers\iref{alt.headers}, its use of
+program's use of \link{namespaces}{namespace.std}, its use of various \link{reserved
+names}{reserved.names}, its use of \link{headers}{alt.headers}, its use of
 standard library classes as base classes\iref{derived.classes}, its
-definitions of replacement functions\iref{replacement.functions}, and its
-installation of handler functions during execution\iref{handler.functions}.
+definitions of \link{replacement functions}{replacement.functions}, and its
+installation of \link{handler functions}{handler.functions} during execution.
 
 \rSec3[namespace.constraints]{Namespace use}
 
@@ -2740,7 +2741,7 @@ [extern.types]
 \rSec4[usrlit.suffix]{User-defined literal suffixes}
 
 \pnum
-Literal suffix identifiers\iref{over.literal} that do not start with an underscore are reserved for future standardization.
+\link{Literal suffix identifiers}{over.literal} that do not start with an underscore are reserved for future standardization.
 
 \rSec3[alt.headers]{Headers}
 
@@ -2748,7 +2749,7 @@ [alt.headers]
 If a file with a name
 equivalent to the derived file name for one of the \Cpp{} standard library headers
 is not provided as part of the implementation, and a file with that name
-is placed in any of the standard places for a source file to be included\iref{cpp.include},
+is placed in any of the standard places for a source file to be \link{included}{cpp.include},
 the behavior is undefined.%
 \indextext{source file}%
 \indextext{undefined}
@@ -2969,7 +2970,7 @@ [res.on.objects]
 
 \pnum
 If an object of a standard library type is accessed, and
-the beginning of the object's lifetime\iref{basic.life}
+the beginning of the object's \link{lifetime}{basic.life}
 does not happen before the access, or
 the access does not happen before the end of the object's lifetime,
 the behavior is undefined unless otherwise specified.
@@ -3029,7 +3030,7 @@ [res.on.headers]
 included after any other header that also defines it\iref{basic.def.odr}.
 
 \pnum
-The C standard library headers\iref{depr.c.headers}
+The \link{C standard library headers}{depr.c.headers}
 shall include only their corresponding \Cpp{} standard library header,
 as described in~\ref{headers}.
 
@@ -3057,7 +3058,7 @@ [global.functions]
 It is unspecified whether any
 non-member
 functions in the \Cpp{} standard library are defined as
-inline\iref{dcl.inline}.
+\link{inline}{dcl.inline}.
 
 \pnum
 A call to a non-member function signature
@@ -3082,7 +3083,7 @@ [global.functions]
 the swappable with requirements\iref{swappable.requirements}.
 The exception for overloaded operators allows argument-dependent lookup
 in cases like that of
-\tcode{ostream_iterator::operator=}\iref{ostream.iterator.ops}:
+\liblinkx{\tcode{ostream_iterator::operator=}}{ostream_iterator!operator=}{ostream.iterator.ops}:
 
 \effects
 \begin{codeblock}
@@ -3097,7 +3098,7 @@ [member.functions]
 
 \pnum
 It is unspecified whether any member functions in the \Cpp{} standard library are defined as
-inline\iref{dcl.inline}.
+\link{inline}{dcl.inline}.
 
 \pnum
 For a non-virtual member function described in the \Cpp{} standard library,
@@ -3176,8 +3177,8 @@ [reentrancy]
 \rSec3[res.on.data.races]{Data race avoidance}
 
 \pnum
-This subclause specifies requirements that implementations shall meet to prevent data
-races\iref{intro.multithread}.
+This subclause specifies requirements that implementations shall meet to prevent
+\deflinkx{data races}{data race}{intro.multithread}.
 Every standard library function shall meet each requirement unless otherwise specified.
 Implementations may prevent data races in cases other than those specified below.
 
@@ -3220,7 +3221,7 @@ [res.on.data.races]
 \pnum
 Unless otherwise specified, \Cpp{} standard library functions shall perform all operations
 solely within the current thread if those operations have effects that are
-visible\iref{intro.multithread} to users.
+\deflinkx{visible}{side effects!visible}{intro.multithread} to users.
 
 \pnum
 \begin{note}
@@ -3269,8 +3270,8 @@ [derivation]
 Unless explicitly stated otherwise, types with distinct names shall be distinct
 types.\footnote{There is an implicit exception to this rule for types that are
 described as synonyms for basic integral types, such as
-\tcode{size_t}\iref{support.types} and
-\tcode{streamoff}\iref{stream.types}.}
+\link{\tcode{size_t}}{support.types} and
+\link{\tcode{streamoff}}{stream.types}.}
 \end{itemize}
 
 \pnum
@@ -3318,9 +3319,9 @@ [res.on.exception.handling]
 potentially-throwing exception specification} exceptions.%
 \footnote{In particular, they
 can report a failure to allocate storage by throwing an exception of type
-\tcode{bad_alloc},
+\link{\tcode{bad_alloc}}{bad.alloc},
 or a class derived from
-\tcode{bad_alloc}\iref{bad.alloc}.}
+\tcode{bad_alloc}.}
 Implementations should
 report errors by throwing exceptions of or derived
 from the standard exception classes~(\ref{bad.alloc},
@@ -3352,7 +3353,7 @@ [value.error.codes]
 
 \pnum
 Certain functions in the \Cpp{} standard library report errors via a
-\tcode{std::error_code}\iref{syserr.errcode.overview} object. That object's
+\link{\tcode{std::error_code}}{syserr.errcode.overview} object. That object's
 \tcode{category()} member shall return \tcode{std::system_category()} for
 errors originating from the operating system, or a reference to an
 \impldef{\tcode{error_category} for errors originating outside the
diff --git a/source/support.tex b/source/support.tex
index b1b581dc..5fe57eb9 100644
--- a/source/support.tex
+++ b/source/support.tex
@@ -52,12 +52,12 @@ [cstddef.syn]
 \indexlibraryglobal{byte}%
 \begin{codeblock}
 namespace std {
-  using ptrdiff_t = @\seebelow@;
-  using size_t = @\seebelow@;
-  using max_align_t = @\seebelow@;
-  using nullptr_t = decltype(nullptr);
+  using @\libentity{ptrdiff_t}@ = @\seebelow@;
+  using @\libentity{size_t}@ = @\seebelow@;
+  using @\libentity{max_align_t}@ = @\seebelow@;
+  using @\libentity{nullptr_t}@ = decltype(nullptr);
 
-  enum class byte : unsigned char {};
+  enum class @\libentity{byte}@ : unsigned char {};
 
   // \ref{support.types.byteops}, \tcode{byte} type operations
   template<class IntType>
@@ -79,8 +79,8 @@ [cstddef.syn]
     constexpr IntType to_integer(byte b) noexcept;
 }
 
-#define NULL @\seebelow@
-#define offsetof(P, D) @\seebelow@
+#define @\libentity{NULL}@ @\seebelow@
+#define @\libentity{offsetof}@(P, D) @\seebelow@
 \end{codeblock}
 
 \pnum
@@ -177,7 +177,7 @@ [cstdlib.syn]
   [[noreturn]] void _Exit(int status) noexcept;
   [[noreturn]] void quick_exit(int status) noexcept;
 
-  char* getenv(const char* name);
+  char* @\libentity{getenv}@(const char* name);
   int system(const char* string);
 
   // \ref{c.malloc}, C library memory allocation
@@ -252,7 +252,7 @@ [cstdlib.syn]
 \ref{c.math.abs}.
 \begin{note}
 Several functions have additional overloads in this document,
-but they have the same behavior as in the C standard library\iref{library.c}.
+but they have the same behavior as in the \link{C standard library}{library.c}.
 \end{note}
 
 \xrefc{7.22}
@@ -301,8 +301,8 @@ [support.types.layout]
 \tcode{operator\&}
 is overloaded for any of the types involved.}
 The expression \tcode{offsetof(\placeholder{type}, \placeholder{member-designator})}
-is never type-dependent\iref{temp.dep.expr} and it is
-value-dependent\iref{temp.dep.constexpr} if and only if \tcode{\placeholder{type}} is
+is never \link{type-dependent}{temp.dep.expr} and it is
+\link{value-dependent}{temp.dep.constexpr} if and only if \tcode{\placeholder{type}} is
 dependent. The result of applying the \tcode{offsetof} macro to
 a static data member or a function member is undefined.
 No operation invoked by the \tcode{offsetof} macro shall throw an exception and
@@ -323,7 +323,7 @@ [support.types.layout]
 \pnum
 \begin{note}
 It is recommended that implementations choose types for \tcode{ptrdiff_t} and \tcode{size_t}
-whose integer conversion ranks\iref{conv.rank} are no greater than that of
+whose integer \link{conversion ranks}{conv.rank} are no greater than that of
 \tcode{signed long int} unless a larger size is necessary to contain all the possible values.
 \end{note}
 
@@ -904,13 +904,13 @@ [numeric.limits]
 
 \pnum
 Non-arithmetic standard types, such as
-\tcode{complex<T>}\iref{complex}, shall not have specializations.
+\link{\tcode{complex<T>}}{complex}, shall not have specializations.
 
 \rSec3[numeric.limits.members]{\tcode{numeric_limits} members}
 
 \pnum
 \indextext{signal-safe!\idxcode{numeric_limits} members}%
-Each member function defined in this subclause is signal-safe\iref{support.signal}.
+Each member function defined in this subclause is \deflinkx{signal-safe}{evaluation!signal-safe}{support.signal}.
 
 \indexlibrarymember{min}{numeric_limits}%
 \begin{itemdecl}
@@ -934,10 +934,11 @@ [numeric.limits.members]
 \tcode{is_bounded == false \&\& is_signed == false}.
 \end{itemdescr}
 
-\indexlibrarymember{max}{numeric_limits}%
+\begin{indexed}{\indexlibrarymember{max}{numeric_limits}}
 \begin{itemdecl}
 static constexpr T max() noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -1808,7 +1809,7 @@ [support.start.term]
 thread, or static storage duration and without calling functions passed to
 \tcode{atexit()}\iref{basic.start.term}.
 \indextext{signal-safe!\idxcode{_Exit}}%
-The function \tcode{_Exit} is signal-safe\iref{support.signal}.
+The function \tcode{_Exit} is \deflinkx{signal-safe}{evaluation!signal-safe}{support.signal}.
 \end{itemdescr}
 
 \indexlibraryglobal{abort}%
@@ -1828,7 +1829,7 @@ [support.start.term]
 duration and without calling functions passed to
 \tcode{atexit()}\iref{basic.start.term}.
 \indextext{signal-safe!\idxcode{abort}}%
-The function \tcode{abort} is signal-safe\iref{support.signal}.
+The function \tcode{abort} is \deflinkx{signal-safe}{evaluation!signal-safe}{support.signal}.
 \end{itemdescr}
 
 \indexlibraryglobal{atexit}%
@@ -1845,7 +1846,8 @@ [support.start.term]
 functions register the function pointed to by \tcode{f}
 to be called without arguments at normal program termination.
 It is unspecified whether a call to \tcode{atexit()} that does not
-happen before\iref{intro.multithread} a call to \tcode{exit()} will succeed.
+\deflinkx{happen before}{happens before}{intro.multithread}
+a call to \tcode{exit()} will succeed.
 \begin{note}
 The \tcode{atexit()} functions do not introduce a data
 race\iref{res.on.data.races}.
@@ -1863,10 +1865,11 @@ [support.start.term]
 nonzero if it fails.
 \end{itemdescr}
 
-\indexlibraryglobal{exit}%
+\begin{indexed}{\indexlibraryglobal{exit}}
 \begin{itemdecl}
 [[noreturn]] void exit(int status);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -1931,7 +1934,8 @@ [support.start.term]
 The \tcode{at_quick_exit()} functions register the function pointed to by \tcode{f}
 to be called without arguments when \tcode{quick_exit} is called.
 It is unspecified whether a call to \tcode{at_quick_exit()} that does not
-happen before\iref{intro.multithread} all calls to \tcode{quick_exit} will succeed.
+\deflinkx{happen before}{happens before}{intro.multithread}
+all calls to \tcode{quick_exit} will succeed.
 \begin{note}
 The
 \tcode{at_quick_exit()} functions do not introduce a
@@ -1983,7 +1987,7 @@ [support.start.term]
 \pnum
 \remarks
 \indextext{signal-safe!\idxcode{quick_exit}}%
-The function \tcode{quick_exit} is signal-safe\iref{support.signal}
+The function \tcode{quick_exit} is \deflinkx{signal-safe}{evaluation!signal-safe}{support.signal}
 when the functions registered with \tcode{at_quick_exit} are.
 \end{itemdescr}
 
@@ -2093,7 +2097,7 @@ [new.delete.single]
 \pnum
 \effects
 The
-allocation functions\iref{basic.stc.dynamic.allocation}
+\link{allocation functions}{basic.stc.dynamic.allocation}
 called by a
 \grammarterm{new-expression}\iref{expr.new}
 to allocate
@@ -2133,7 +2137,7 @@ [new.delete.single]
 \tcode{bad_alloc}.
 \item
 Otherwise, the function calls the current
-\tcode{new_handler} function\iref{new.handler}.
+\link{\tcode{new_handler}}{new.handler} function.
 If the called function returns, the loop repeats.
 \item
 The loop terminates when an attempt to allocate the requested storage is
@@ -2205,7 +2209,7 @@ [new.delete.single]
 \pnum
 \effects
 The
-deallocation functions\iref{basic.stc.dynamic.deallocation}
+\link{deallocation functions}{basic.stc.dynamic.deallocation}
 called by a
 \grammarterm{delete-expression}\iref{expr.delete}
 to render the value of \tcode{ptr} invalid.
@@ -2307,7 +2311,7 @@ [new.delete.single]
 \pnum
 \effects
 The
-deallocation functions\iref{basic.stc.dynamic.deallocation}
+\link{deallocation functions}{basic.stc.dynamic.deallocation}
 called by the implementation
 to render the value of \tcode{ptr} invalid
 when the constructor invoked from a nothrow
@@ -2362,7 +2366,7 @@ [new.delete.array]
 \pnum
 \effects
 The
-allocation functions\iref{basic.stc.dynamic.allocation}
+\link{allocation functions}{basic.stc.dynamic.allocation}
 called by the array form of a
 \grammarterm{new-expression}\iref{expr.new}
 to allocate
@@ -2458,7 +2462,7 @@ [new.delete.array]
 \pnum
 \effects
 The
-deallocation functions\iref{basic.stc.dynamic.deallocation}
+\link{deallocation functions}{basic.stc.dynamic.deallocation}
 called by the array form of a
 \grammarterm{delete-expression}
 to render the value of \tcode{ptr} invalid.
@@ -2540,7 +2544,7 @@ [new.delete.array]
 \pnum
 \effects
 The
-deallocation functions\iref{basic.stc.dynamic.deallocation}
+\link{deallocation functions}{basic.stc.dynamic.deallocation}
 called by the implementation
 to render the value of \tcode{ptr} invalid
 when the constructor invoked from a nothrow
@@ -2691,8 +2695,8 @@ [new.delete.dataraces]
 introduce a data race\iref{res.on.data.races}.
 Calls to these functions that allocate or deallocate a particular unit
 of storage shall occur in a single total order, and each such deallocation call
-shall happen before\iref{intro.multithread} the next allocation (if any) in
-this order.
+shall \deflinkx{happen before}{happens before}{intro.multithread}
+the next allocation (if any) in this order.
 
 \rSec2[alloc.errors]{Storage allocation errors}
 
@@ -2760,10 +2764,11 @@ [new.badlength]
 
 \rSec3[new.handler]{Type \tcode{new_handler}}
 
-\indexlibraryglobal{new_handler}%
+\begin{indexed}{\indexlibraryglobal{new_handler}}
 \begin{itemdecl}
 using new_handler = void (*)();
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2846,8 +2851,8 @@ [ptr.launder]
 \pnum
 \expects
 \tcode{p} represents the address \placeholder{A} of a byte in memory.
-An object \placeholder{X} that is within its lifetime\iref{basic.life}
-and whose type is similar\iref{conv.qual} to \tcode{T}
+An object \placeholder{X} that is within its \deflink{lifetime}{basic.life}
+and whose type is \deflinkx{similar}{similar types}{conv.qual} to \tcode{T}
 is located at the address \placeholder{A}.
 All bytes of storage that would be reachable through the result
 are reachable through \tcode{p} (see below).
@@ -3060,7 +3065,8 @@ [type.info]
 
 \pnum
 \remarks
-The message may be a null-terminated multibyte string\iref{multibyte.strings},
+The message may be a
+\deflinkx{null-terminated multibyte string}{string!null-terminated multibyte}{multibyte.strings},
 suitable for conversion and display as a
 \tcode{wstring}~(\ref{string.classes}, \ref{locale.codecvt}).
 \end{itemdescr}
@@ -3465,7 +3471,8 @@ [exception]
 
 \pnum
 \remarks
-The message may be a null-terminated multibyte string\iref{multibyte.strings},
+The message may be a
+\deflinkx{null-terminated multibyte string}{string!null-terminated multibyte}{multibyte.strings},
 suitable for conversion and display as a
 \tcode{wstring}~(\ref{string.classes}, \ref{locale.codecvt}).
 The return value remains valid until the exception object from which
@@ -3612,21 +3619,22 @@ [uncaught.exceptions]
 \begin{itemdescr}
 \pnum
 \returns
-The number of uncaught exceptions\iref{except.uncaught}.
+The number of \link{uncaught exceptions}{except.uncaught}.
 
 \pnum
 \remarks
 When \tcode{uncaught_exceptions() > 0},
 throwing an exception can result in a call of the function
-\tcode{std::terminate}\iref{except.terminate}.
+\link{\tcode{std::terminate}}{except.terminate}.
 \end{itemdescr}
 
 \rSec2[propagation]{Exception propagation}
 
-\indexlibraryglobal{exception_ptr}%
+\begin{indexed}{\indexlibraryglobal{exception_ptr}}
 \begin{itemdecl}
 using exception_ptr = @\unspec@;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -3677,8 +3685,9 @@ [propagation]
 \begin{itemdescr}
 \pnum
 \returns
-An \tcode{exception_ptr} object that refers to
-the currently handled exception\iref{except.handle} or a copy of the currently
+An \tcode{exception_ptr} object that refers to the
+\deflinkx{currently handled exception}{exception handling!currently handled exception}{except.handle}
+or a copy of the currently
 handled exception, or a null \tcode{exception_ptr} object if no exception is being
 handled. The referenced object shall remain valid at least as long as there is an
 \tcode{exception_ptr} object that refers to it.
@@ -3854,7 +3863,7 @@ [support.initlist]
 The header \libheaderdef{initializer_list} defines a class template and several
 support functions related to list-initialization~(see \ref{dcl.init.list}).
 \indextext{signal-safe!\idxcode{initializer_list} functions}%
-All functions specified in this subclause are signal-safe\iref{support.signal}.
+All functions specified in this subclause are \deflinkx{signal-safe}{evaluation!signal-safe}{support.signal}.
 
 \rSec2[initializer.list.syn]{Header \tcode{<initializer_list>} synopsis}
 \indexlibraryglobal{initializer_list}%
@@ -3986,7 +3995,7 @@ [compare.syn]
 \pnum
 The header \libheaderdef{compare} specifies types, objects, and functions
 for use primarily in connection with
-the three-way comparison operator\iref{expr.spaceship}.
+the \link{three-way comparison operator}{expr.spaceship}.
 
 \indexlibraryglobal{is_eq}%
 \indexlibraryglobal{is_neq}%
@@ -4097,7 +4106,7 @@ [cmp.partialord]
 
 \pnum
 The \tcode{partial_ordering} type is typically used
-as the result type of a three-way comparison operator\iref{expr.spaceship}
+as the result type of a \link{three-way comparison operator}{expr.spaceship}
 that (a) admits all of the six two-way comparison operators (\ref{expr.rel}, \ref{expr.eq}),
 (b) does not imply substitutability,
 and (c) permits two values to be incomparable.%
@@ -4214,7 +4223,7 @@ [cmp.weakord]
 
 \pnum
 The \tcode{weak_ordering} type is typically used
-as the result type of a three-way comparison operator\iref{expr.spaceship}
+as the result type of a \link{three-way comparison operator}{expr.spaceship}
 that (a) admits all of the six two-way comparison operators (\ref{expr.rel}, \ref{expr.eq}),
 and (b) does not imply substitutability.
 
@@ -4339,7 +4348,7 @@ [cmp.strongord]
 
 \pnum
 The \tcode{strong_ordering} type is typically used
-as the result type of a three-way comparison operator\iref{expr.spaceship}
+as the result type of a \link{three-way comparison operator}{expr.spaceship}
 that (a) admits all of the six two-way comparison operators (\ref{expr.rel}, \ref{expr.eq}),
 and (b) does imply substitutability.
 
@@ -5413,7 +5422,7 @@ [support.runtime]
 \end{note}
 
 \pnum
-A call to the \tcode{setlocale} function\iref{c.locales}
+A call to the \liblinkx{\tcode{setlocale}}{setlocale}{c.locales} function
 may introduce a data race with other
 calls to the \tcode{setlocale} function or with calls to functions that are
 affected by the current C locale. The implementation shall behave as if no
@@ -5430,13 +5439,13 @@ [cstdarg.syn]
 \indexlibraryglobal{va_arg}%
 \begin{codeblock}
 namespace std {
-  using va_list = @\seebelow@;
+  using @\libentity{va_list}@ = @\seebelow@;
 }
 
-#define va_arg(V, P) @\seebelow@
-#define va_copy(VDST, VSRC) @\seebelow@
-#define va_end(V) @\seebelow@
-#define va_start(V, P) @\seebelow@
+#define @\libentity{va_arg}@(V, P) @\seebelow@
+#define @\libentity{va_copy}@(VDST, VSRC) @\seebelow@
+#define @\libentity{va_end}@(V) @\seebelow@
+#define @\libentity{va_start}@(V, P) @\seebelow@
 \end{codeblock}
 
 \pnum
diff --git a/source/diagnostics.tex b/source/diagnostics.tex
index e32db0f1..ea8d44d3 100644
--- a/source/diagnostics.tex
+++ b/source/diagnostics.tex
@@ -467,13 +467,13 @@ [assertions.assert]
 
 \pnum
 An expression \tcode{assert(E)}
-is a constant subexpression\iref{defns.const.subexpr}, if
+is a \link{constant subexpression}{defns.const.subexpr}, if
 \begin{itemize}
 \item
 \tcode{NDEBUG} is defined at the point where \tcode{assert}
 is last defined or redefined, or
 \item
-\tcode{E} contextually converted to \tcode{bool}\iref{conv}
+\tcode{E} \deflinkx{contextually converted to \tcode{bool}}{conversion!contextual to bool}{conv}
 is a constant subexpression that evaluates to the value \tcode{true}.
 \end{itemize}
 
@@ -665,7 +665,7 @@ [syserr]
 
 \pnum
 Components described in this subclause shall not change the value of
-\tcode{errno}\iref{errno}.
+\link{\tcode{errno}}{errno}.
 Implementations should leave the error states provided by other
 libraries unchanged.
 
@@ -1549,7 +1549,7 @@ [syserr.syserr.overview]
 \pnum
 \begin{note}
 If an error represents an out-of-memory condition, implementations are
-encouraged to throw an exception object of type \tcode{bad_alloc}\iref{bad.alloc} rather
+encouraged to throw an exception object of type \link{\tcode{bad_alloc}}{bad.alloc} rather
 than \tcode{system_error}.
 \end{note}
 \indexlibraryglobal{system_error}%
diff --git a/source/utilities.tex b/source/utilities.tex
index 4e81905c..53829d07 100644
--- a/source/utilities.tex
+++ b/source/utilities.tex
@@ -102,15 +102,15 @@ [utility.syn]
   template<class T, T...>
     struct integer_sequence;
   template<size_t... I>
-    using index_sequence = integer_sequence<size_t, I...>;
+    using @\libentity{index_sequence}@ = integer_sequence<size_t, I...>;
 
   template<class T, T N>
     using make_integer_sequence = integer_sequence<T, @\seebelow{}@>;
   template<size_t N>
-    using make_index_sequence = make_integer_sequence<size_t, N>;
+    using @\libentity{make_index_sequence}@ = make_integer_sequence<size_t, N>;
 
   template<class... T>
-    using index_sequence_for = make_index_sequence<sizeof...(T)>;
+    using @\libentity{index_sequence_for}@ = make_index_sequence<sizeof...(T)>;
 
   // \ref{pairs}, class template \tcode{pair}
   template<class T1, class T2>
@@ -284,7 +284,7 @@ [forward]
 \indextext{signal-safe!\idxcode{forward}}%
 \indextext{signal-safe!\idxcode{move}}%
 \indextext{signal-safe!\idxcode{move_if_noexcept}}%
-All functions specified in this subclause are signal-safe\iref{support.signal}.
+All functions specified in this subclause are \deflinkx{signal-safe}{evaluation!signal-safe}{support.signal}.
 
 \indexlibraryglobal{forward}%
 \indextext{\idxcode{forward}}%
@@ -404,7 +404,7 @@ [declval]
 
 \pnum
 The library provides the function template \tcode{declval} to simplify the definition of
-expressions which occur as unevaluated operands\iref{expr.prop}.
+expressions which occur as \deflinkx{unevaluated operands}{unevaluated operand}{expr.prop}.
 
 \indexlibraryglobal{declval}%
 \begin{itemdecl}
@@ -1173,7 +1173,7 @@ [pair.piecewise]
 The \tcode{struct} \tcode{piecewise_construct_t} is an empty class type
 used as a unique type to disambiguate constructor and function overloading. Specifically,
 \tcode{pair} has a constructor with \tcode{piecewise_construct_t} as the
-first argument, immediately followed by two \tcode{tuple}\iref{tuple} arguments used
+first argument, immediately followed by two \link{\tcode{tuple}}{tuple} arguments used
 for piecewise construction of the elements of the \tcode{pair} object.
 
 \rSec1[tuple]{Tuples}
@@ -1659,7 +1659,7 @@ [tuple.cnstr]
 \pnum
 \effects
 Equivalent to the preceding constructors except that each element is constructed with
-uses-allocator construction\iref{allocator.uses.construction}.
+\deflink{uses-allocator construction}{allocator.uses.construction}.
 \end{itemdescr}
 
 \rSec3[tuple.assign]{Assignment}
@@ -5159,9 +5159,11 @@ [variant.visit]
 \indexlibraryglobal{monostate}%
 \rSec2[variant.monostate]{Class \tcode{monostate}}
 
+\begin{indexed}{\indexlibrary{\idxcode{monostate}}}
 \begin{itemdecl}
 struct monostate{};
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -5319,7 +5321,8 @@ [any.bad.any.cast]
 \end{codeblock}
 
 \pnum
-Objects of type \tcode{bad_any_cast} are thrown by a failed \tcode{any_cast}\iref{any.nonmembers}.
+Objects of type \tcode{bad_any_cast} are thrown by a failed
+\linkx{\tcode{any_cast}}{\idxcode{any_cast}}{any.nonmembers}.
 
 \indexlibrarymember{what}{bad_any_cast}%
 \begin{itemdecl}
@@ -5803,7 +5806,7 @@ [any.nonmembers]
 Equivalent to: \tcode{return any(in_place_type<T>, il, std::forward<Args>(args)...);}
 \end{itemdescr}
 
-\indexlibraryglobal{any_cast}%
+\begin{indexed}{\indexlibraryglobal{any_cast}}
 \begin{itemdecl}
 template<class T>
   T any_cast(const any& operand);
@@ -5812,6 +5815,7 @@ [any.nonmembers]
 template<class T>
   T any_cast(any&& operand);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -5861,13 +5865,14 @@ [any.nonmembers]
 \end{example}
 \end{itemdescr}
 
-\indexlibraryglobal{any_cast}%
+\begin{indexed}{\indexlibraryglobal{any_cast}}
 \begin{itemdecl}
 template<class T>
   const T* any_cast(const any* operand) noexcept;
 template<class T>
   T* any_cast(any* operand) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -5898,7 +5903,7 @@ [bitset.syn]
 
 \begin{codeblock}
 #include <string>
-#include <iosfwd>   // for \tcode{istream}\iref{istream.syn}, \tcode{ostream}\iref{ostream.syn}, see \ref{iosfwd.syn}
+#include <iosfwd>   // for \link{\tcode{istream}}{istream.syn}, \link{\tcode{ostream}}{ostream.syn}, see \ref{iosfwd.syn}
 
 namespace std {
   template<size_t N> class bitset;
@@ -6071,8 +6076,8 @@ [bitset.cons]
 \effects
 Initializes the first \tcode{M} bit positions to the corresponding bit
 values in \tcode{val}.
-\tcode{M} is the smaller of \tcode{N} and the number of bits in the value
-representation\iref{basic.types} of \tcode{unsigned long long}.
+\tcode{M} is the smaller of \tcode{N} and the number of bits in the
+\deflink{value representation}{basic.types} of \tcode{unsigned long long}.
 If \tcode{M < N}, the remaining bit positions are initialized to zero.
 \end{itemdescr}
 
@@ -6169,10 +6174,11 @@ [bitset.members]
 \tcode{*this}.
 \end{itemdescr}
 
-\indexlibrarymember{operator"|=}{bitset}%
+\begin{indexed}{\indexlibrarymember{operator"|=}{bitset}}
 \begin{itemdecl}
 bitset<N>& operator|=(const bitset<N>& rhs) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -6450,10 +6456,11 @@ [bitset.members]
 The created object.
 \end{itemdescr}
 
-\indexlibrarymember{count}{bitset}%
+\begin{indexed}{\indexlibrarymember{count}{bitset}}
 \begin{itemdecl}
 size_t count() const noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -6506,10 +6513,11 @@ [bitset.members]
 \tcode{out_of_range} if \tcode{pos} does not correspond to a valid bit position.
 \end{itemdescr}
 
-\indexlibrarymember{all}{bitset}%
+\begin{indexed}{\indexlibrarymember{all}{bitset}}
 \begin{itemdecl}
 bool all() const noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -6610,8 +6618,8 @@ [bitset.members]
 
 \pnum
 \remarks
-For the purpose of determining the presence of a data
-race\iref{intro.multithread}, any access or update through the resulting
+For the purpose of determining the presence of a
+\deflink{data race}{intro.multithread}, any access or update through the resulting
 reference potentially accesses or modifies, respectively, the entire
 underlying bitset.
 \end{itemdescr}
@@ -6673,7 +6681,7 @@ [bitset.operators]
 
 \begin{itemdescr}
 \pnum
-A formatted input function\iref{istream.formatted}.
+A \link{formatted input function}{istream.formatted}.
 
 \pnum
 \effects
@@ -7507,8 +7515,8 @@ [util.dynamic.safety]
 \begin{itemdescr}
 \pnum
 \returns
-\tcode{pointer_safety::strict} if the implementation has strict pointer
-safety\iref{basic.stc.dynamic.safety}. It is
+\tcode{pointer_safety::strict} if the implementation has
+\deflink{strict pointer safety}{basic.stc.dynamic.safety}. It is
 \impldef{whether \tcode{get_pointer_safety} returns
 \tcode{pointer_safety::relaxed} or
 \tcode{pointer_safety::\brk{}preferred} if the implementation has relaxed pointer safety}
@@ -7959,10 +7967,11 @@ [allocator.traits.types]
 type\iref{temp.deduct}; otherwise, \tcode{value_type*}.
 \end{itemdescr}
 
-\indexlibrarymember{const_pointer}{allocator_traits}%
+\begin{indexed}{\indexlibrarymember{const_pointer}{allocator_traits}}
 \begin{itemdecl}
 using const_pointer = @\seebelow@;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -7972,10 +7981,11 @@ [allocator.traits.types]
 \tcode{pointer_traits<pointer>::rebind<\brk{}const value_type>}.
 \end{itemdescr}
 
-\indexlibrarymember{void_pointer}{allocator_traits}%
+\begin{indexed}{\indexlibrarymember{void_pointer}{allocator_traits}}
 \begin{itemdecl}
 using void_pointer = @\seebelow@;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -8130,11 +8140,12 @@ [allocator.traits.members]
 Nothing.
 \end{itemdescr}
 
-\indexlibrarymember{construct}{allocator_traits}%
+\begin{indexed}{\indexlibrarymember{construct}{allocator_traits}}
 \begin{itemdecl}
 template<class T, class... Args>
   static constexpr void construct(Alloc& a, T* p, Args&&... args);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -8144,11 +8155,12 @@ [allocator.traits.members]
 otherwise, invokes \tcode{construct_at(p, std::forward<Args>(args)...)}.
 \end{itemdescr}
 
-\indexlibrarymember{destroy}{allocator_traits}%
+\begin{indexed}{\indexlibrarymember{destroy}{allocator_traits}}
 \begin{itemdecl}
 template<class T>
   static constexpr void destroy(Alloc& a, T* p);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -8187,13 +8199,15 @@ [default.allocator]
 All specializations of the default allocator meet the
 allocator completeness requirements\iref{allocator.requirements.completeness}.
 
-\indexlibraryglobal{allocator}%
 \indexlibrarymember{value_type}{allocator}%
 \indexlibrarymember{size_type}{allocator}%
 \indexlibrarymember{difference_type}{allocator}%
 \indexlibrarymember{propagate_on_container_move_assignment}{allocator}%
 \indexlibrarymember{is_always_equal}{allocator}%
+\begin{indexed}{
 \indexlibrarymember{operator=}{allocator}%
+\indexlibraryglobal{allocator}%
+}
 \begin{codeblock}
 namespace std {
   template<class T> class allocator {
@@ -8215,12 +8229,13 @@ [default.allocator]
   };
 }
 \end{codeblock}
+\end{indexed}
 
 \rSec3[allocator.members]{Members}
 
 \pnum
 Except for the destructor, member functions of the default allocator shall not introduce
-data races\iref{intro.multithread} as a result of concurrent calls to those member
+\deflinkx{data races}{data race}{intro.multithread} as a result of concurrent calls to those member
 functions from different threads. Calls to these functions that allocate or deallocate a
 particular unit of storage shall occur in a single total order, and each such
 deallocation call shall happen before the next allocation (if any) in this order.
@@ -8242,7 +8257,7 @@ [allocator.members]
 \pnum
 \remarks
 The storage for the array
-is obtained by calling \tcode{::operator new}\iref{new.delete},
+is obtained by calling \link{\tcode{::operator new}}{new.delete},
 but it is unspecified when or how often this
 function is called.
 This function starts the lifetime of the array object,
@@ -8274,7 +8289,7 @@ [allocator.members]
 \pnum
 \remarks
 Uses
-\tcode{::operator delete}\iref{new.delete},
+\link{\tcode{::operator delete}}{new.delete},
 but it is unspecified
 when this function is called.
 \end{itemdescr}
@@ -8584,8 +8599,9 @@ [unique.ptr.single]
 \pnum
 The default type for the template parameter \tcode{D} is
 \tcode{default_delete}. A client-supplied template argument
-\tcode{D} shall be a function
-object type\iref{function.objects}, lvalue reference to function, or
+\tcode{D} shall be a
+\deflinkx{function object type}{function object!type}{function.objects},
+lvalue reference to function, or
 lvalue reference to function object type
 for which, given
 a value \tcode{d} of type \tcode{D} and a value
@@ -8819,10 +8835,11 @@ [unique.ptr.single.ctor]
 
 \rSec4[unique.ptr.single.dtor]{Destructor}
 
-\indexlibrarydtor{unique_ptr}%
+\begin{indexed}{\indexlibrarydtor{unique_ptr}}
 \begin{itemdecl}
 ~unique_ptr();
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -9021,10 +9038,11 @@ [unique.ptr.single.modifiers]
 the call to \tcode{release}.
 \end{itemdescr}
 
-\indexlibrarymember{reset}{unique_ptr}%
+\begin{indexed}{\indexlibrarymember{reset}{unique_ptr}}
 \begin{itemdecl}
 void reset(pointer p = pointer()) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -9051,10 +9069,11 @@ [unique.ptr.single.modifiers]
 \end{note}
 \end{itemdescr}
 
-\indexlibrarymember{swap}{unique_ptr}%
+\begin{indexed}{\indexlibrarymember{swap}{unique_ptr}}
 \begin{itemdecl}
 void swap(unique_ptr& u) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -9778,7 +9797,7 @@ [util.smartptr.shared.const]
 enables \tcode{shared_from_this} with \tcode{p},
 for a pointer \tcode{p} of type \tcode{Y*},
 means that if \tcode{Y} has an unambiguous and accessible base class
-that is a specialization of \tcode{enable_shared_from_this}\iref{util.smartptr.enab},
+that is a specialization of \link{\tcode{enable_shared_from_this}}{util.smartptr.enab},
 then \tcode{remove_cv_t<Y>*} shall be implicitly convertible to \tcode{T*} and
 the constructor evaluates the statement:
 \begin{codeblock}
@@ -10063,11 +10082,12 @@ [util.smartptr.shared.dest]
 
 \rSec3[util.smartptr.shared.assign]{Assignment}
 
-\indexlibrarymember{operator=}{shared_ptr}%
+\begin{indexed}{\indexlibrarymember{operator=}{shared_ptr}}
 \begin{itemdecl}
 shared_ptr& operator=(const shared_ptr& r) noexcept;
 template<class Y> shared_ptr& operator=(const shared_ptr<Y>& r) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -10270,10 +10290,11 @@ [util.smartptr.shared.obs]
 Nothing.
 \end{itemdescr}
 
-\indexlibrarymember{use_count}{shared_ptr}%
+\begin{indexed}{\indexlibrarymember{use_count}{shared_ptr}}
 \begin{itemdecl}
 long use_count() const noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -10319,11 +10340,12 @@ [util.smartptr.shared.obs]
 \tcode{get() != 0}.
 \end{itemdescr}
 
-\indexlibrarymember{owner_before}{shared_ptr}%
+\begin{indexed}{\indexlibrarymember{owner_before}{shared_ptr}}
 \begin{itemdecl}
 template<class U> bool owner_before(const shared_ptr<U>& b) const noexcept;
 template<class U> bool owner_before(const weak_ptr<U>& b) const noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -10852,13 +10874,14 @@ [util.smartptr.shared.cast]
 \end{note}
 \end{itemdescr}
 
-\indexlibrarymember{const_pointer_cast}{shared_ptr}%
+\begin{indexed}{\indexlibrarymember{const_pointer_cast}{shared_ptr}}
 \begin{itemdecl}
 template<class T, class U>
   shared_ptr<T> const_pointer_cast(const shared_ptr<U>& r) noexcept;
 template<class T, class U>
   shared_ptr<T> const_pointer_cast(shared_ptr<U>&& r) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -11084,10 +11107,11 @@ [util.smartptr.weak.const]
 
 \rSec3[util.smartptr.weak.dest]{Destructor}
 
-\indexlibrarydtor{weak_ptr}%
+\begin{indexed}{\indexlibrarydtor{weak_ptr}}
 \begin{itemdecl}
 ~weak_ptr();
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -11218,11 +11242,12 @@ [util.smartptr.weak.obs]
 
 \rSec3[util.smartptr.weak.spec]{Specialized algorithms}
 
-\indexlibrarymember{swap}{weak_ptr}%
+\begin{indexed}{\indexlibrarymember{swap}{weak_ptr}}
 \begin{itemdecl}
 template<class T>
   void swap(weak_ptr<T>& a, weak_ptr<T>& b) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -11236,7 +11261,9 @@ [util.smartptr.ownerless]
 The class template \tcode{owner_less} allows ownership-based mixed comparisons of shared
 and weak pointers.
 
+\begin{indexed}{
 \indexlibraryglobal{owner_less}%
+}
 \begin{codeblock}
 namespace std {
   template<class T = void> struct owner_less;
@@ -11267,6 +11294,7 @@ [util.smartptr.ownerless]
   };
 }
 \end{codeblock}
+\end{indexed}
 
 \indexlibrarymember{operator()}{owner_less}%
 \pnum
@@ -11453,8 +11481,10 @@ [mem.res.class]
 \pnum
 The \tcode{memory_resource} class is an abstract interface to an unbounded set of classes encapsulating memory resources.
 
+\begin{indexed}{
 \indexlibraryglobal{memory_resource}%
 \indexlibrarymember{operator=}{memory_resource}%
+}
 \begin{codeblock}
 namespace std::pmr {
   class memory_resource {
@@ -11480,14 +11510,18 @@ [mem.res.class]
   };
 }
 \end{codeblock}
+\end{indexed}
 
 
 \rSec3[mem.res.public]{Public member functions}
 
+\begin{indexed}{
 \indexlibrarydtor{memory_resource}%
+}
 \begin{itemdecl}
 ~memory_resource();
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -11495,10 +11529,11 @@ [mem.res.public]
 Destroys this \tcode{memory_resource}.
 \end{itemdescr}
 
-\indexlibrarymember{allocate}{memory_resource}%
+\begin{indexed}{\indexlibrarymember{allocate}{memory_resource}}
 \begin{itemdecl}
 [[nodiscard]] void* allocate(size_t bytes, size_t alignment = max_align);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -11506,10 +11541,11 @@ [mem.res.public]
 Equivalent to: \tcode{return do_allocate(bytes, alignment);}
 \end{itemdescr}
 
-\indexlibrarymember{deallocate}{memory_resource}%
+\begin{indexed}{\indexlibrarymember{deallocate}{memory_resource}}
 \begin{itemdecl}
 void deallocate(void* p, size_t bytes, size_t alignment = max_align);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -11517,10 +11553,11 @@ [mem.res.public]
 Equivalent to \tcode{do_deallocate(p, bytes, alignment)}.
 \end{itemdescr}
 
-\indexlibrarymember{is_equal}{memory_resource}%
+\begin{indexed}{\indexlibrarymember{is_equal}{memory_resource}}
 \begin{itemdecl}
 bool is_equal(const memory_resource& other) const noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -11717,10 +11754,11 @@ [mem.poly.allocator.ctor]
 
 \rSec3[mem.poly.allocator.mem]{Member functions}
 
-\indexlibrarymember{allocate}{polymorphic_allocator}%
+\begin{indexed}{\indexlibrarymember{allocate}{polymorphic_allocator}}
 \begin{itemdecl}
 [[nodiscard]] Tp* allocate(size_t n);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -11733,10 +11771,11 @@ [mem.poly.allocator.mem]
 \end{codeblock}
 \end{itemdescr}
 
-\indexlibrarymember{deallocate}{polymorphic_allocator}%
+\begin{indexed}{\indexlibrarymember{deallocate}{polymorphic_allocator}}
 \begin{itemdecl}
 void deallocate(Tp* p, size_t n);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -12233,11 +12272,11 @@ [mem.res.pool.ctor]
 
 \rSec3[mem.res.pool.mem]{Members}
 
-\indexlibrarymember{release}{synchronized_pool_resource}%
-\indexlibrarymember{release}{unsynchronized_pool_resource}%
+\begin{indexed}{\indexlibrarymember{release}{synchronized_pool_resource}\indexlibrarymember{release}{unsynchronized_pool_resource}}
 \begin{itemdecl}
 void release();
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -12692,10 +12731,11 @@ [allocator.adaptor.types]
 zero; otherwise,\\ \tcode{scoped_allocator_adaptor<InnerAllocs...>}.
 \end{itemdescr}
 
-\indexlibrarymember{propagate_on_container_copy_assignment}{scoped_allocator_adaptor}%
+\begin{indexed}{\indexlibrarymember{propagate_on_container_copy_assignment}{scoped_allocator_adaptor}}
 \begin{itemdecl}
 using propagate_on_container_copy_assignment = @\seebelow@;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -12705,10 +12745,11 @@ [allocator.adaptor.types]
 \tcode{InnerAllocs...}; otherwise, \tcode{false_type}.
 \end{itemdescr}
 
-\indexlibrarymember{propagate_on_container_move_assignment}{scoped_allocator_adaptor}%
+\begin{indexed}{\indexlibrarymember{propagate_on_container_move_assignment}{scoped_allocator_adaptor}}
 \begin{itemdecl}
 using propagate_on_container_move_assignment = @\seebelow@;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -12718,10 +12759,11 @@ [allocator.adaptor.types]
 \tcode{InnerAllocs...}; otherwise, \tcode{false_type}.
 \end{itemdescr}
 
-\indexlibrarymember{propagate_on_container_swap}{scoped_allocator_adaptor}%
+\begin{indexed}{\indexlibrarymember{propagate_on_container_swap}{scoped_allocator_adaptor}}
 \begin{itemdecl}
 using propagate_on_container_swap = @\seebelow@;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -12777,10 +12819,13 @@ [allocator.adaptor.cnstr]
 allocator from the argument list).
 \end{itemdescr}
 
+\begin{indexed}{
 \indexlibraryctor{scoped_allocator_adaptor}%
+}
 \begin{itemdecl}
 scoped_allocator_adaptor(const scoped_allocator_adaptor& other) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -12789,10 +12834,13 @@ [allocator.adaptor.cnstr]
 from \tcode{other}.
 \end{itemdescr}
 
+\begin{indexed}{
 \indexlibraryctor{scoped_allocator_adaptor}%
+}
 \begin{itemdecl}
 scoped_allocator_adaptor(scoped_allocator_adaptor&& other) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -13007,14 +13055,14 @@ [scoped.adaptor.operators]
 \rSec1[function.objects]{Function objects}
 
 \pnum
-A \defnx{function object type}{function object!type} is an object
-type\iref{basic.types} that can be the type of the
+A \defnx{function object type}{function object!type} is an
+\deflink{object type}{basic.types} that can be the type of the
 \grammarterm{postfix-expression} in a function call
 (\ref{expr.call}, \ref{over.match.call}).\footnote{Such a type is a function
 pointer or a class type which has a member \tcode{operator()} or a class type
 which has a conversion to a pointer to function.} A \defn{function object} is an
 object of a function object type. In the places where one would expect to pass a
-pointer to a function to an algorithmic template\iref{algorithms}, the
+pointer to a function to an \link{algorithmic template}{algorithms}, the
 interface is specified to accept a function object. This not only makes
 algorithmic templates work with pointers to functions, but also enables them to
 work with arbitrary function objects.
@@ -13200,7 +13248,7 @@ [func.def]
 parenthesized comma-separated list of zero or more argument types.
 
 \pnum
-A \defnadj{callable}{type} is a function object type\iref{function.objects} or a pointer to member.
+A \defnadj{callable}{type} is a \deflinkx{function object type}{function object!type}{function.objects} or a pointer to member.
 
 \pnum
 A \defnadj{callable}{object} is an object of a callable type.
@@ -13333,18 +13381,22 @@ [func.require]
 if the types of their corresponding state entities are the same.
 
 \rSec2[func.invoke]{Function template \tcode{invoke}}
-\indexlibraryglobal{invoke}%
 \indexlibrary{invoke@\tcode{\placeholder{INVOKE}}}%
+\begin{indexed}{
+\indexlibraryglobal{invoke}%
+}
 \begin{itemdecl}
 template<class F, class... Args>
   constexpr invoke_result_t<F, Args...> invoke(F&& f, Args&&... args)
     noexcept(is_nothrow_invocable_v<F, Args...>);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
 \returns
-\tcode{\placeholdernc{INVOKE}(std::forward<F>(f), std::forward<Args>(args)...)}\iref{func.require}.
+\liblinkx{\tcode{\placeholdernc{INVOKE}}}{INVOKE}{func.require}%
+\tcode{(std::forward<F>(f), std::forward<Args>(args)...)}.
 \end{itemdescr}
 
 \rSec2[refwrap]{Class template \tcode{reference_wrapper}}
@@ -13385,7 +13437,8 @@ [refwrap]
 around a reference to an object or function of type \tcode{T}.
 
 \pnum
-\tcode{reference_wrapper<T>} is a trivially copyable type\iref{basic.types}.
+\tcode{reference_wrapper<T>} is a
+\deflinkx{trivially copyable type}{trivially copyable types}{basic.types}.
 
 \pnum
 The template parameter \tcode{T} of \tcode{reference_wrapper}
@@ -13829,12 +13882,15 @@ [comparisons]
 
 \rSec3[comparisons.equal.to]{Class template \tcode{equal_to}}
 
+\begin{indexed}{
 \indexlibraryglobal{equal_to}%
+}
 \begin{itemdecl}
 template<class T = void> struct equal_to {
   constexpr bool operator()(const T& x, const T& y) const;
 };
 \end{itemdecl}
+\end{indexed}
 
 \indexlibrarymember{operator()}{equal_to}%
 \begin{itemdecl}
@@ -13899,11 +13955,12 @@ [comparisons.not.equal.to]
 };
 \end{itemdecl}
 
-\indexlibrarymember{operator()}{not_equal_to<>}%
+\begin{indexed}{\indexlibrarymember{operator()}{not_equal_to<>}}
 \begin{itemdecl}
 template<class T, class U> constexpr auto operator()(T&& t, U&& u) const
     -> decltype(std::forward<T>(t) != std::forward<U>(u));
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -14039,12 +14096,13 @@ [comparisons.greater.equal]
 
 \rSec3[comparisons.less.equal]{Class template \tcode{less_equal}}
 
-\indexlibraryglobal{less_equal}%
+\begin{indexed}{\indexlibraryglobal{less_equal}}
 \begin{itemdecl}
 template<class T = void> struct less_equal {
   constexpr bool operator()(const T& x, const T& y) const;
 };
 \end{itemdecl}
+\end{indexed}
 
 \indexlibrarymember{operator()}{less_equal}%
 \begin{itemdecl}
@@ -14304,12 +14362,15 @@ [logical.operations]
 
 \rSec3[logical.operations.and]{Class template \tcode{logical_and}}
 
+\begin{indexed}{
 \indexlibraryglobal{logical_and}%
+}
 \begin{itemdecl}
 template<class T = void> struct logical_and {
   constexpr bool operator()(const T& x, const T& y) const;
 };
 \end{itemdecl}
+\end{indexed}
 
 \indexlibrarymember{operator()}{logical_and}%
 \begin{itemdecl}
@@ -14346,12 +14407,15 @@ [logical.operations.and]
 
 \rSec3[logical.operations.or]{Class template \tcode{logical_or}}
 
+\begin{indexed}{
 \indexlibraryglobal{logical_or}%
+}
 \begin{itemdecl}
 template<class T = void> struct logical_or {
   constexpr bool operator()(const T& x, const T& y) const;
 };
 \end{itemdecl}
+\end{indexed}
 
 \indexlibrarymember{operator()}{logical_or}%
 \begin{itemdecl}
@@ -14388,12 +14452,15 @@ [logical.operations.or]
 
 \rSec3[logical.operations.not]{Class template \tcode{logical_not}}
 
+\begin{indexed}{
 \indexlibraryglobal{logical_not}%
+}
 \begin{itemdecl}
 template<class T = void> struct logical_not {
   constexpr bool operator()(const T& x) const;
 };
 \end{itemdecl}
+\end{indexed}
 
 \indexlibrarymember{operator()}{logical_not}%
 \begin{itemdecl}
@@ -14438,12 +14505,15 @@ [bitwise.operations]
 
 \rSec3[bitwise.operations.and]{Class template \tcode{bit_and}}
 
+\begin{indexed}{
 \indexlibraryglobal{bit_and}%
+}
 \begin{itemdecl}
 template<class T = void> struct bit_and {
   constexpr T operator()(const T& x, const T& y) const;
 };
 \end{itemdecl}
+\end{indexed}
 
 \indexlibrarymember{operator()}{bit_and}%
 \begin{itemdecl}
@@ -14480,12 +14550,15 @@ [bitwise.operations.and]
 
 \rSec3[bitwise.operations.or]{Class template \tcode{bit_or}}
 
+\begin{indexed}{
 \indexlibraryglobal{bit_or}%
+}
 \begin{itemdecl}
 template<class T = void> struct bit_or {
   constexpr T operator()(const T& x, const T& y) const;
 };
 \end{itemdecl}
+\end{indexed}
 
 \indexlibrarymember{operator()}{bit_or}%
 \begin{itemdecl}
@@ -14508,11 +14581,12 @@ [bitwise.operations.or]
 };
 \end{itemdecl}
 
-\indexlibrarymember{operator()}{bit_or<>}%
+\begin{indexed}{\indexlibrarymember{operator()}{bit_or<>}}
 \begin{itemdecl}
 template<class T, class U> constexpr auto operator()(T&& t, U&& u) const
     -> decltype(std::forward<T>(t) | std::forward<U>(u));
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -14522,12 +14596,15 @@ [bitwise.operations.or]
 
 \rSec3[bitwise.operations.xor]{Class template \tcode{bit_xor}}
 
+\begin{indexed}{
 \indexlibraryglobal{bit_xor}%
+}
 \begin{itemdecl}
 template<class T = void> struct bit_xor {
   constexpr T operator()(const T& x, const T& y) const;
 };
 \end{itemdecl}
+\end{indexed}
 
 \indexlibrarymember{operator()}{bit_xor}%
 \begin{itemdecl}
@@ -14581,7 +14658,9 @@ [bitwise.operations.not]
 \tcode{\~{}x}.
 \end{itemdescr}
 
+\begin{indexed}{
 \indexlibraryglobal{bit_not<>}%
+}
 \begin{itemdecl}
 template<> struct bit_not<void> {
   template<class T> constexpr auto operator()(T&& t) const
@@ -14590,6 +14669,7 @@ [bitwise.operations.not]
   using is_transparent = @\unspec@;
 };
 \end{itemdecl}
+\end{indexed}
 
 \indexlibrarymember{operator()}{bit_not<>}%
 \begin{itemdecl}
@@ -14933,10 +15013,13 @@ [func.bind.place]
 \rSec2[func.memfn]{Function template \tcode{mem_fn}}%
 \indextext{function object!\idxcode{mem_fn}|(}
 
+\begin{indexed}{
 \indexlibraryglobal{mem_fn}%
+}
 \begin{itemdecl}
 template<class R, class T> constexpr @\unspec@ mem_fn(R T::* pm) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -15048,23 +15131,23 @@ [func.wrap.func]
 \pnum
 The \tcode{function} class template provides polymorphic wrappers that
 generalize the notion of a function pointer. Wrappers can store, copy,
-and call arbitrary callable objects\iref{func.def}, given a call
-signature\iref{func.def}, allowing functions to be first-class objects.
+and call arbitrary \deflinkx{callable objects}{callable object}{func.def}, given a
+\deflink{call signature}{func.def}, allowing functions to be first-class objects.
 
 \pnum
 \indextext{callable type}%
-A callable type\iref{func.def} \tcode{F}
+A \deflink{callable type}{func.def} \tcode{F}
 is \defn{Lvalue-Callable} for argument
 types \tcode{ArgTypes}
 and return type \tcode{R}
 if the expression
 \tcode{\placeholdernc{INVOKE}<R>(declval<F\&>(), declval<ArgTypes>()...)},
-considered as an unevaluated operand\iref{expr.prop}, is
+considered as an \deflink{unevaluated operand}{expr.prop}, is
 well-formed\iref{func.require}.
 
 \pnum
-The \tcode{function} class template is a call
-wrapper\iref{func.def} whose call signature\iref{func.def}
+The \tcode{function} class template is a
+\deflink{call wrapper}{func.def} whose \deflink{call signature}{func.def}
 is \tcode{R(ArgTypes...)}.
 
 \pnum
@@ -15326,10 +15409,11 @@ [func.wrap.func.mod]
 
 \rSec4[func.wrap.func.cap]{Capacity}
 
-\indexlibrarymember{operator bool}{function}%
+\begin{indexed}{\indexlibrarymember{operator bool}{function}}
 \begin{itemdecl}
 explicit operator bool() const noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -15339,17 +15423,17 @@ [func.wrap.func.cap]
 
 \rSec4[func.wrap.func.inv]{Invocation}
 
-\indexlibrary{\idxcode{function}!invocation}%
-\indexlibrarymember{operator()}{function}%
+\begin{indexed}{\indexlibrary{\idxcode{function}!invocation}\indexlibrarymember{operator()}{function}}
 \begin{itemdecl}
 R operator()(ArgTypes... args) const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
 \returns
 \tcode{\placeholdernc{INVOKE}<R>(f, std::forward<ArgTypes>(args)...)}\iref{func.require},
-where \tcode{f} is the target object\iref{func.def} of \tcode{*this}.
+where \tcode{f} is the \deflink{target object}{func.def} of \tcode{*this}.
 
 \pnum
 \throws
@@ -15359,10 +15443,11 @@ [func.wrap.func.inv]
 
 \rSec4[func.wrap.func.targ]{Target access}
 
-\indexlibrarymember{target_type}{function}%
+\begin{indexed}{\indexlibrarymember{target_type}{function}}
 \begin{itemdecl}
 const type_info& target_type() const noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -15371,11 +15456,12 @@ [func.wrap.func.targ]
   \tcode{typeid(T)}; otherwise, \tcode{typeid(void)}.
 \end{itemdescr}
 
-\indexlibrarymember{target}{function}%
+\begin{indexed}{\indexlibrarymember{target}{function}}
 \begin{itemdecl}
 template<class T>       T* target() noexcept;
 template<class T> const T* target() const noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -15416,7 +15502,8 @@ [func.wrap.func.alg]
 \rSec2[func.search]{Searchers}
 
 \pnum
-This subclause provides function object types\iref{function.objects} for
+This subclause provides
+\deflinkx{function object types}{function object!type}{function.objects} for
 operations that search for a sequence \range{pat\textunderscore\nobreak first}{pat_last} in another
 sequence \range{first}{last} that is provided to the object's function call
 operator.  The first sequence (the pattern to be searched for) is provided to
@@ -15741,7 +15828,7 @@ [unord.hash]
 \tcode{is_copy_assignable_v<H>}, and
 \tcode{is_move_assignable_v<H>}.
 Disabled specializations of \tcode{hash}
-are not function object types\iref{function.objects}.
+are not \deflinkx{function object types}{function object!type}{function.objects}.
 \begin{note}
 This means that the specialization of \tcode{hash} exists, but
 any attempts to use it as a \oldconcept{Hash} will be ill-formed.
@@ -15780,7 +15867,7 @@ [meta]
 
 \pnum
 \indextext{signal-safe!type traits}%
-All functions specified in this subclause are signal-safe\iref{support.signal}.
+All functions specified in this subclause are \deflinkx{signal-safe}{evaluation!signal-safe}{support.signal}.
 
 \rSec2[meta.rqmts]{Requirements}
 
@@ -15793,7 +15880,7 @@ [meta.rqmts]
 and publicly and unambiguously derived, directly or indirectly, from
 its \defn{base characteristic}, which is
 a specialization of the template
-\tcode{integral_constant}\iref{meta.help}, with
+\linkx{\tcode{integral_constant}}{\idxcode{integral_constant}}{meta.help}, with
 the arguments to the template \tcode{integral_constant} determined by the
 requirements for the particular property being described.
 The member names of the base characteristic shall not be hidden and shall be
@@ -15809,7 +15896,7 @@ [meta.rqmts]
 indirectly, from
 its \term{base characteristic}, which is a specialization
 of the template
-\tcode{integral_constant}\iref{meta.help}, with
+\linkx{\tcode{integral_constant}}{\idxcode{integral_constant}}{meta.help}, with
 the arguments to the template \tcode{integral_constant} determined by the
 requirements for the particular relationship being described.
 The member names of the base characteristic shall not be hidden and shall be
@@ -16273,6 +16360,7 @@ [meta.type.synop]
 \rSec2[meta.help]{Helper classes}
 
 \indexlibrarymember{value_type}{integral_constant}%
+\begin{indexed}{\indexlibrary{\idxcode{integral_constant}}}
 \begin{codeblock}
 namespace std {
   template<class T, T v> struct integral_constant {
@@ -16286,6 +16374,7 @@ [meta.help]
   };
 }
 \end{codeblock}
+\end{indexed}
 
 \indexlibraryglobal{integral_constant}%
 \indexlibraryglobal{bool_constant}%
@@ -16356,7 +16445,7 @@ [meta.unary.cat]
 \tcode{template<class T>}\br
  \tcode{struct is_array;}           &
 \tcode{T} is an array type\iref{basic.compound} of known or unknown extent    &
-Class template \tcode{array}\iref{array}
+Class template \link{\tcode{array}}{array}
 is not an array type.                   \\ \rowsep
 \indexlibraryglobal{is_pointer}%
 \tcode{template<class T>}\br
@@ -16443,7 +16532,7 @@ [meta.unary.comp]
 \indexlibraryglobal{is_member_pointer}%
 \tcode{template<class T>}\br
  \tcode{struct is_member_pointer;}      &
- \tcode{T} is a pointer-to-member type\iref{basic.compound}               &   \\
+ \tcode{T} is a \deflink{pointer-to-member}{basic.compound} type               &   \\
 \end{libreqtab3b}
 
 \rSec3[meta.unary.prop]{Type properties}
@@ -16467,7 +16556,7 @@ [meta.unary.prop]
 For the purpose of defining the templates in this subclause,
 a function call expression \tcode{declval<T>()} for any type \tcode{T}
 is considered to be a trivial~(\ref{basic.types}, \ref{special}) function call
-that is not an odr-use\iref{basic.def.odr} of \tcode{declval}
+that is not an \link{odr-use}{basic.def.odr} of \tcode{declval}
 in the context of the corresponding definition
 notwithstanding the restrictions of~\ref{declval}.
 
@@ -16615,8 +16704,8 @@ [meta.unary.prop]
 \tcode{template<class T, class U>}\br
   \tcode{struct is_assignable;} &
   The expression \tcode{declval<T>() =} \tcode{declval<U>()} is well-formed
-  when treated as an unevaluated
-  operand\iref{expr.prop}. Access checking is performed as if in a context
+  when treated as an \deflink{unevaluated
+  operand}{expr.prop}. Access checking is performed as if in a context
   unrelated to \tcode{T} and \tcode{U}. Only the validity of the immediate context
   of the assignment expression is considered.
 \begin{note}
@@ -16651,7 +16740,7 @@ [meta.unary.prop]
   \tcode{struct is_swappable_with;} &
   The expressions \tcode{swap(declval<T>(), declval<U>())} and
   \tcode{swap(declval<U>(), declval<T>())} are each well-formed
-  when treated as an unevaluated operand\iref{expr.prop}
+  when treated as an \deflink{unevaluated operand}{expr.prop}
   in an overload-resolution context
   for swappable values\iref{swappable.requirements}.
   Access checking is performed as if in a context
@@ -16689,7 +16778,7 @@ [meta.unary.prop]
   for which the expression
   \tcode{declval<U\&>().\~U()}
   is well-formed
-  when treated as an unevaluated operand\iref{expr.prop},
+  when treated as an \deflink{unevaluated operand}{expr.prop},
   where \tcode{U} is
   \tcode{remove_all_extents_t<T>}. &
   \tcode{T} shall be a complete type, \cv{}~\tcode{void},
@@ -16698,7 +16787,7 @@ [meta.unary.prop]
 \indexlibraryglobal{is_trivially_constructible}%
 \tcode{template<class T, class... Args>}\br
   \tcode{struct}\br
-  \tcode{is_trivially_constructible;} &
+  \tcode{\libentity{is_trivially_constructible};} &
   \tcode{is_constructible_v<T,}\br
   \tcode{Args...>} is \tcode{true} and the variable
   definition for \tcode{is_constructible}, as defined below, is known to call
@@ -17154,7 +17243,7 @@ [meta.rel]
 For the purpose of defining the templates in this subclause,
 a function call expression \tcode{declval<T>()} for any type \tcode{T}
 is considered to be a trivial~(\ref{basic.types}, \ref{special}) function call
-that is not an odr-use\iref{basic.def.odr} of \tcode{declval}
+that is not an \link{odr-use}{basic.def.odr} of \tcode{declval}
 in the context of the corresponding definition
 notwithstanding the restrictions of~\ref{declval}.
 
@@ -17309,7 +17398,7 @@ [meta.trans.ref]
 \indexlibraryglobal{add_lvalue_reference}%
 \tcode{template<class T>\br
  struct add_lvalue_reference;}                     &
- If \tcode{T} names a referenceable type\iref{defns.referenceable} then
+ If \tcode{T} names a \link{referenceable type}{defns.referenceable} then
  the member typedef \tcode{type} names \tcode{T\&};
  otherwise, \tcode{type} names \tcode{T}.
  \begin{note}
@@ -17344,14 +17433,14 @@ [meta.trans.sign]
 \indexlibraryglobal{make_signed}%
 \tcode{template<class T>}\br
  \tcode{struct make_signed;} &
- If \tcode{T} names a (possibly cv-qualified) signed integer
- type\iref{basic.fundamental} then the member typedef
+ If \tcode{T} names a (possibly cv-qualified)
+ \deflink{signed integer type}{basic.fundamental} then the member typedef
  \tcode{type} names the type \tcode{T}; otherwise,
  if \tcode{T} names a (possibly cv-qualified) unsigned integer
  type then \tcode{type} names the corresponding
  signed integer type, with the same cv-qualifiers as \tcode{T};
- otherwise, \tcode{type} names the signed integer type with smallest
- rank\iref{conv.rank} for which
+ otherwise, \tcode{type} names the signed integer type with \link{smallest
+ rank}{conv.rank} for which
  \tcode{sizeof(T) == sizeof(type)}, with the same
  cv-qualifiers as \tcode{T}.\br
  \mandates \tcode{T} is an integral or enumeration type
@@ -17360,14 +17449,14 @@ [meta.trans.sign]
 \indexlibraryglobal{make_unsigned}%
 \tcode{template<class T>}\br
  \tcode{struct make_unsigned;} &
- If \tcode{T} names a (possibly cv-qualified) unsigned integer
- type\iref{basic.fundamental} then the member typedef
+ If \tcode{T} names a (possibly cv-qualified)
+ \deflink{unsigned integer type}{basic.fundamental} then the member typedef
  \tcode{type} names the type \tcode{T}; otherwise,
  if \tcode{T} names a (possibly cv-qualified) signed integer
  type then \tcode{type} names the corresponding
  unsigned integer type, with the same cv-qualifiers as \tcode{T};
- otherwise, \tcode{type} names the unsigned integer type with smallest
- rank\iref{conv.rank} for which
+ otherwise, \tcode{type} names the unsigned integer type with \link{smallest
+ rank}{conv.rank} for which
  \tcode{sizeof(T) == sizeof(type)}, with the same
  cv-qualifiers as \tcode{T}.\br
  \mandates \tcode{T} is an integral or enumeration type
@@ -17446,7 +17535,7 @@ [meta.trans.ptr]
 \indexlibraryglobal{add_pointer}%
 \tcode{template<class T>\br
  struct add_pointer;}                       &
- If \tcode{T} names a referenceable type\iref{defns.referenceable} or a
+ If \tcode{T} names a \link{referenceable type}{defns.referenceable} or a
  \cv{}~\tcode{void} type then
  the member typedef \tcode{type} names the same type as
  \tcode{remove_reference_t<T>*};
@@ -17577,7 +17666,7 @@ [meta.trans.other]
  \tcode{struct invoke_result;}
  &
  If the expression \tcode{\placeholdernc{INVOKE}(declval<Fn>(), declval<ArgTypes>()...)}
- is well-formed when treated as an unevaluated operand\iref{expr.prop},
+ is well-formed when treated as an \deflink{unevaluated operand}{expr.prop},
  the member typedef \tcode{type} names the type
  \tcode{decltype(\placeholdernc{INVOKE}(declval<Fn>(), declval<ArgTypes>()...))};
  otherwise, there shall be no member \tcode{type}. Access checking is
@@ -17614,8 +17703,7 @@ [meta.trans.other]
 \indexlibraryglobal{aligned_storage}%
 \pnum
 \begin{note}
-A typical implementation would define \tcode{aligned_storage} as:
-
+A typical implementation would define \libentity{aligned_storage} as:
 \begin{codeblock}
 template<size_t Len, size_t Alignment>
 struct aligned_storage {
@@ -17858,10 +17946,13 @@ [meta.logical]
 This subclause describes type traits for applying logical operators
 to other type traits.
 
+\begin{indexed}{
 \indexlibraryglobal{conjunction}%
+}
 \begin{itemdecl}
 template<class... B> struct conjunction : @\seebelow@ { };
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -17910,10 +18001,11 @@ [meta.logical]
 in \tcode{conjunction}.
 \end{itemdescr}
 
-\indexlibraryglobal{disjunction}%
+\begin{indexed}{\indexlibraryglobal{disjunction}}
 \begin{itemdecl}
 template<class... B> struct disjunction : @\seebelow@ { };
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -17960,10 +18052,11 @@ [meta.logical]
 shall not be hidden and shall be unambiguously available in \tcode{disjunction}.
 \end{itemdescr}
 
-\indexlibraryglobal{negation}%
+\begin{indexed}{\indexlibraryglobal{negation}}
 \begin{itemdecl}
 template<class B> struct negation : @\seebelow@ { };
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -18150,7 +18243,7 @@ [ratio.syn]
 
 \rSec2[ratio.ratio]{Class template \tcode{ratio}}
 
-\indexlibraryglobal{ratio}%
+\begin{indexed}{\indexlibraryglobal{ratio}}
 \begin{codeblock}
 namespace std {
   template<intmax_t N, intmax_t D = 1> class ratio {
@@ -18161,6 +18254,7 @@ [ratio.ratio]
   };
 }
 \end{codeblock}
+\end{indexed}
 
 \pnum
 \indextext{signed integer representation!two's complement}%
@@ -18351,9 +18445,9 @@ [type.index.overview]
 
 \pnum
 The class \tcode{type_index} provides a simple wrapper for
-\tcode{type_info} which can be used as an index type in associative
-containers\iref{associative} and in unordered associative
-containers\iref{unord}.
+\tcode{type_info} which can be used as an index type in
+\link{associative containers}{associative} and in
+\link{unordered associative containers}{unord}.
 
 \rSec2[type.index.members]{\tcode{type_index} members}
 
@@ -18381,7 +18475,7 @@ [type.index.members]
 
 \indexlibrarymember{operator<}{type_index}%
 \begin{itemdecl}
-bool operator<(const type_index& rhs) const noexcept;
+bool @\libmember{operator<}{type_index}@(const type_index& rhs) const noexcept;
 \end{itemdecl}
 
 \begin{itemdescr}
@@ -18571,7 +18665,7 @@ [execpol.seq]
 
 \indexlibraryglobal{execution::sequenced_policy}%
 \begin{itemdecl}
-class execution::sequenced_policy { @\unspec@ };
+class @\libentity{execution::sequenced_policy}@ { @\unspec@ };
 \end{itemdecl}
 
 \begin{itemdescr}
@@ -18591,7 +18685,7 @@ [execpol.par]
 
 \indexlibraryglobal{execution::parallel_policy}%
 \begin{itemdecl}
-class execution::parallel_policy { @\unspec@ };
+class @\libentity{execution::parallel_policy}@ { @\unspec@ };
 \end{itemdecl}
 
 \begin{itemdescr}
@@ -18611,7 +18705,7 @@ [execpol.parunseq]
 
 \indexlibraryglobal{execution::parallel_unsequenced_policy}%
 \begin{itemdecl}
-class execution::parallel_unsequenced_policy { @\unspec@ };
+class @\libentity{execution::parallel_unsequenced_policy}@ { @\unspec@ };
 \end{itemdecl}
 
 \begin{itemdescr}
@@ -18682,11 +18776,11 @@ [charconv.syn]
 \indexlibrarymember{general}{chars_format}%
 @namespace std {
   // floating-point format for primitive numerical conversion
-  enum class chars_format {
-    scientific = @\unspec@,
-    fixed = @\unspec@,
-    hex = @\unspec@,
-    general = fixed | scientific
+  enum class @\libentity{chars_format}@ {
+    @\libmember{scientific}{chars_format}@ = @\unspec@,
+    @\libmember{fixed}{chars_format}@ = @\unspec@,
+    @\libmember{hex}{chars_format}@ = @\unspec@,
+    @\libmember{general}{chars_format}@ = fixed | scientific
   };
 @%
 \indexlibraryglobal{to_chars_result}%
@@ -18788,7 +18882,7 @@ [charconv.to.chars]
 the representation with the smallest difference from
 the floating-point argument value is chosen,
 resolving any remaining ties using rounding according to
-\tcode{round_to_nearest}\iref{round.style}.
+\liblinkx{\tcode{round_to_nearest}}{round_to_nearest}{round.style}.
 
 \pnum
 The functions taking a \tcode{chars_format} parameter
@@ -18801,10 +18895,11 @@ [charconv.to.chars]
 and
 \tcode{g} if \tcode{fmt} is \tcode{chars_format::general}.
 
-\indexlibraryglobal{to_chars}%
+\begin{indexed}{\indexlibraryglobal{to_chars}}
 \begin{itemdecl}
 to_chars_result to_chars(char* first, char* last, @\seebelow@ value, int base = 10);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -18833,12 +18928,13 @@ [charconv.to.chars]
 as the type of the parameter \tcode{value}.
 \end{itemdescr}
 
-\indexlibraryglobal{to_chars}%
+\begin{indexed}{\indexlibraryglobal{to_chars}}
 \begin{itemdecl}
 to_chars_result to_chars(char* first, char* last, float value);
 to_chars_result to_chars(char* first, char* last, double value);
 to_chars_result to_chars(char* first, char* last, long double value);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -18856,12 +18952,13 @@ [charconv.to.chars]
 Nothing.
 \end{itemdescr}
 
-\indexlibraryglobal{to_chars}%
+\begin{indexed}{\indexlibraryglobal{to_chars}}
 \begin{itemdecl}
 to_chars_result to_chars(char* first, char* last, float value, chars_format fmt);
 to_chars_result to_chars(char* first, char* last, double value, chars_format fmt);
 to_chars_result to_chars(char* first, char* last, long double value, chars_format fmt);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -18880,7 +18977,7 @@ [charconv.to.chars]
 Nothing.
 \end{itemdescr}
 
-\indexlibraryglobal{to_chars}%
+\begin{indexed}{\indexlibraryglobal{to_chars}}
 \begin{itemdecl}
 to_chars_result to_chars(char* first, char* last, float value,
                          chars_format fmt, int precision);
@@ -18889,6 +18986,7 @@ [charconv.to.chars]
 to_chars_result to_chars(char* first, char* last, long double value,
                          chars_format fmt, int precision);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -18944,14 +19042,15 @@ [charconv.from.chars]
 is equal to \tcode{errc::result_out_of_range}.
 Otherwise,
 \tcode{value} is set to the parsed value,
-after rounding according to \tcode{round_to_nearest}\iref{round.style}, and
+after rounding according to \liblinkx{\tcode{round_to_nearest}}{round_to_nearest}{round.style}, and
 the member \tcode{ec} is value-initialized.
 
-\indexlibraryglobal{from_chars}%
+\begin{indexed}{\indexlibraryglobal{from_chars}}
 \begin{itemdecl}
 from_chars_result from_chars(const char* first, const char* last,
                              @\seebelow@&@\itcorr[-1]@ value, int base = 10);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -18982,7 +19081,7 @@ [charconv.from.chars]
 as the referenced type of the parameter \tcode{value}.
 \end{itemdescr}
 
-\indexlibraryglobal{from_chars}%
+\begin{indexed}{\indexlibraryglobal{from_chars}}
 \begin{itemdecl}
 from_chars_result from_chars(const char* first, const char* last, float& value,
                              chars_format fmt = chars_format::general);
@@ -18991,6 +19090,7 @@ [charconv.from.chars]
 from_chars_result from_chars(const char* first, const char* last, long double& value,
                              chars_format fmt = chars_format::general);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
diff --git a/source/strings.tex b/source/strings.tex
index d31d181c..bc000164 100644
--- a/source/strings.tex
+++ b/source/strings.tex
@@ -758,7 +758,6 @@ [basic.string]
 (a ``null terminator''\indextext{string!null terminator}),
 and \tcode{size() <= capacity()} is \tcode{true}.
 
-
 \indexlibraryglobal{basic_string}%
 \indexlibrarymember{traits_type}{basic_string}%
 \indexlibrarymember{value_type}{basic_string}%
@@ -1102,8 +1101,9 @@ [string.require]
 \begin{itemize}
 \item Passing as an argument to any standard library function taking a reference to non-const
 \tcode{basic_string} as an argument.\footnote{For example, as an argument to non-member
-functions \tcode{swap()}\iref{string.special},
-\tcode{operator>{}>()}\iref{string.io}, and \tcode{getline()}\iref{string.io}, or as
+functions \liblinkx{\tcode{swap()}}{basic_string!swap}{string.special},
+\liblinkx{\tcode{operator>{}>()}}{basic_string!operator>>}{string.io},
+and \link{\tcode{getline()}}{string.io}, or as
 an argument to \tcode{basic_string::swap()}.}
 
 \item Calling non-const member functions, except
@@ -1385,7 +1385,7 @@ [string.cons]
 \begin{itemdescr}
 \pnum
 \effects
-Move assigns as a sequence container\iref{sequence.reqmts},
+Move assigns as a \link{sequence container}{sequence.reqmts},
 except that iterators, pointers and references may be invalidated.
 
 \pnum
@@ -1689,11 +1689,12 @@ [string.capacity]
 
 \rSec3[string.access]{Element access}
 
-\indexlibrarymember{operator[]}{basic_string}%
+\begin{indexed}{\indexlibrarymember{operator[]}{basic_string}}
 \begin{itemdecl}
 constexpr const_reference operator[](size_type pos) const;
 constexpr reference       operator[](size_type pos);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -1716,11 +1717,12 @@ [string.access]
 Constant time.
 \end{itemdescr}
 
-\indexlibrarymember{at}{basic_string}%
+\begin{indexed}{\indexlibrarymember{at}{basic_string}}
 \begin{itemdecl}
 constexpr const_reference at(size_type pos) const;
 constexpr reference       at(size_type pos);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -1734,11 +1736,12 @@ [string.access]
 \tcode{operator[](pos)}.
 \end{itemdescr}
 
-\indexlibrarymember{front}{basic_string}%
+\begin{indexed}{\indexlibrarymember{front}{basic_string}}
 \begin{itemdecl}
 constexpr const charT& front() const;
 constexpr charT& front();
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -1750,11 +1753,12 @@ [string.access]
 Equivalent to: \tcode{return operator[](0);}
 \end{itemdescr}
 
-\indexlibrarymember{back}{basic_string}%
+\begin{indexed}{\indexlibrarymember{back}{basic_string}}
 \begin{itemdecl}
 constexpr const charT& back() const;
 constexpr charT& back();
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -3420,7 +3424,6 @@ [string.cmp]
 
 \rSec3[string.special]{\tcode{swap}}
 
-\indexlibrarymember{swap}{basic_string}%
 \begin{itemdecl}
 template<class charT, class traits, class Allocator>
   constexpr void
@@ -3437,17 +3440,16 @@ [string.special]
 
 \rSec3[string.io]{Inserters and extractors}
 
-\indexlibrarymember{operator>>}{basic_string}%
 \begin{itemdecl}
 template<class charT, class traits, class Allocator>
   basic_istream<charT, traits>&
-    operator>>(basic_istream<charT, traits>& is, basic_string<charT, traits, Allocator>& str);
+    @\libmember{operator>>}{basic_string}@(basic_istream<charT, traits>& is, basic_string<charT, traits, Allocator>& str);
 \end{itemdecl}
 
 \begin{itemdescr}
 \pnum
 \effects
-Behaves as a formatted input function\iref{istream.formatted.reqmts}.
+Behaves as a \link{formatted input function}{istream.formatted}.
 After constructing a
 \tcode{sentry}
 object, if the sentry converts to \tcode{true}, calls
@@ -3525,7 +3527,7 @@ [string.io]
 \begin{itemdescr}
 \pnum
 \effects
-Behaves as an unformatted input function\iref{istream.unformatted},
+Behaves as an \link{unformatted input function}{istream.unformatted},
 except that it does not affect the value returned by subsequent calls to
 \tcode{basic_istream<>::gcount()}.
 After constructing a
@@ -3931,7 +3933,7 @@ [basic.string.literals]
 \rSec1[string.view]{String view classes}
 
 \pnum
-The class template \tcode{basic_string_view} describes an object that can refer to a constant contiguous sequence of char-like\iref{strings.general} objects with the first element of the sequence at position zero.
+The class template \tcode{basic_string_view} describes an object that can refer to a constant contiguous sequence of \deflinkx{char-like objects}{char-like object}{strings.general} with the first element of the sequence at position zero.
 In the rest of this subclause, the type of the char-like objects held in a \tcode{basic_string_view} object is designated by \tcode{charT}.
 
 \pnum
@@ -4991,8 +4993,8 @@ [string.view.io]
 \begin{itemdescr}
 \pnum
 \effects
-Behaves as a formatted output
-function\iref{ostream.formatted.reqmts} of \tcode{os}. Forms a character sequence
+Behaves as a \link{formatted output
+function}{ostream.formatted.reqmts} of \tcode{os}. Forms a character sequence
 \tcode{seq}, initially consisting of the elements defined by the range
 \range{str.begin()}{str.end()}. Determines padding for \tcode{seq}
 as described in~\ref{ostream.formatted.reqmts}.
@@ -5252,13 +5254,13 @@ [cstring.syn]
 are the same as the C standard library header \libheader{string.h}.
 
 \pnum
-The functions \tcode{strerror} and \tcode{strtok} are not required to avoid data
-races\iref{res.on.data.races}.
+The functions \tcode{strerror} and \tcode{strtok} are not required to
+\link{avoid data races}{res.on.data.races}.
 
 \pnum
 \indextext{signal-safe!\idxcode{memcpy}}%
 \indextext{signal-safe!\idxcode{memmove}}%
-The functions \tcode{memcpy} and \tcode{memmove} are signal-safe\iref{support.signal}.
+The functions \tcode{memcpy} and \tcode{memmove} are \deflinkx{signal-safe}{evaluation!signal-safe}{support.signal}.
 Both functions implicitly create objects\iref{intro.object}
 in the destination region of storage
 immediately prior to copying the sequence of characters to the destination.
@@ -5268,7 +5270,7 @@ [cstring.syn]
 The functions
 \tcode{strchr}, \tcode{strpbrk}, \tcode{strrchr}, \tcode{strstr}, and \tcode{memchr},
 have different signatures in this document,
-but they have the same behavior as in the C standard library\iref{library.c}.
+but they have the same behavior as in the \link{C standard library}{library.c}.
 \end{note}
 
 \xrefc{7.24}
@@ -5435,7 +5437,7 @@ [cwchar.syn]
 The functions
 \tcode{wcschr}, \tcode{wcspbrk}, \tcode{wcsrchr}, \tcode{wcsstr}, and \tcode{wmemchr}
 have different signatures in this document,
-but they have the same behavior as in the C standard library\iref{library.c}.
+but they have the same behavior as in the \link{C standard library}{library.c}.
 \end{note}
 
 \xrefc{7.29}
diff --git a/source/containers.tex b/source/containers.tex
index c1585792..8da3f720 100644
--- a/source/containers.tex
+++ b/source/containers.tex
@@ -56,9 +56,9 @@ [container.requirements.general]
 \pnum
 For the components affected by this subclause that declare an \tcode{allocator_type},
 objects stored in these components shall be constructed using the function
-\tcode{allocator_traits<allocator_type>::rebind_traits<U>::\brk{}construct}
+\linkx{\tcode{allocator_traits<allocator_type>::rebind_traits<U>::\brk{}construct}}{allocator_traits!construct}{allocator.traits.members}
 and destroyed using the function
-\tcode{allocator_traits<allocator_type>::rebind_traits<U>::\brk{}destroy}\iref{allocator.traits.members},
+\linkx{\tcode{allocator_traits<allocator_type>::rebind_traits<U>::\brk{}destroy}}{allocator_traits!destroy}{allocator.traits.members},
 where \tcode{U} is either \tcode{allocator_type::value_type} or
 an internal type used by the container.
 These functions are called only for the
@@ -367,7 +367,7 @@ [container.requirements.general]
 
 \pnum
 If the iterator type of a container belongs to the bidirectional or
-random access iterator categories\iref{iterator.requirements},
+random access \link{iterator categories}{iterator.requirements},
 the container is called
 \term{reversible}
 and meets the additional requirements
@@ -734,7 +734,7 @@ [container.requirements.general]
 \rSec2[container.requirements.dataraces]{Container data races}
 
 \pnum
-For purposes of avoiding data races\iref{res.on.data.races}, implementations shall
+For purposes of \link{avoiding data races}{res.on.data.races}, implementations shall
 consider the following functions to be \tcode{const}: \tcode{begin}, \tcode{end},
 \tcode{rbegin}, \tcode{rend}, \tcode{front}, \tcode{back}, \tcode{data}, \tcode{find},
 \tcode{lower_bound}, \tcode{upper_bound}, \tcode{equal_range}, \tcode{at} and, except in
@@ -1542,7 +1542,7 @@ [associative.reqmts]
 \tcode{Key}
 and an ordering relation
 \tcode{Compare}
-that induces a strict weak ordering\iref{alg.sorting} on
+that induces a \link{strict weak ordering}{alg.sorting} on
 elements of
 \tcode{Key}.
 In addition,
@@ -1611,8 +1611,8 @@ [associative.reqmts]
 \end{note}
 
 \pnum
-The associative containers meet all the requirements of Allocator-aware
-containers\iref{container.requirements.general}, except that for
+The associative containers meet all the requirements of
+\link{Allocator-aware}{container.requirements.general} containers, except that for
 \tcode{map} and \tcode{multimap}, the requirements placed on \tcode{value_type}
 in \tref{container.alloc.req} apply instead to \tcode{key_type}
 and \tcode{mapped_type}.
@@ -2195,8 +2195,8 @@ [unord.req]
 \indextext{unordered associative containers!lack of comparison functions}%
 \indextext{unordered associative containers!requirements}%
 \indextext{requirements!container!not required for unordered associated containers}%
-Unordered associative containers conform to the requirements for
-Containers\iref{container.requirements}, except that
+Unordered associative containers conform to the \link{requirements for
+Containers}{container.requirements}, except that
 the expressions
 \tcode{a == b} and \tcode{a != b} have different semantics than for the other
 container types.
@@ -2287,8 +2287,8 @@ [unord.req]
 equivalent elements.
 
 \pnum
-The unordered associative containers meet all the requirements of Allocator-aware
-containers\iref{container.requirements.general}, except that for
+The unordered associative containers meet all the requirements of
+\link{Allocator-aware containers}{container.requirements.general}, except that for
 \tcode{unordered_map} and \tcode{unordered_multimap}, the requirements placed on \tcode{value_type}
 in \tref{container.alloc.req} apply instead to \tcode{key_type}
 and \tcode{mapped_type}.
@@ -3309,14 +3309,14 @@ [array.overview]
 \indextext{\idxcode{array}!contiguous storage}%
 The header \libheader{array} defines a class template for storing fixed-size
 sequences of objects.
-An \tcode{array} is a contiguous container\iref{container.requirements.general}.
+An \tcode{array} is a \deflink{contiguous container}{container.requirements.general}.
 An instance of \tcode{array<T, N>} stores \tcode{N} elements of type \tcode{T},
 so that \tcode{size() == N} is an invariant.
 
 \pnum
 \indextext{\idxcode{array}!initialization}%
 \indextext{\idxcode{array}!as aggregate}%
-An \tcode{array} is an aggregate\iref{dcl.init.aggr} that can be
+An \tcode{array} is an \deflink{aggregate}{dcl.init.aggr} that can be
 list-initialized with up
 to \tcode{N} elements whose types are convertible to \tcode{T}.
 
@@ -3325,8 +3325,8 @@ [array.overview]
 An \tcode{array} meets all of the requirements of a container and
 of a reversible container\iref{container.requirements}, except that a default
 constructed \tcode{array} object is not empty and that \tcode{swap} does not have constant
-complexity. An \tcode{array} meets some of the requirements of a sequence
-container\iref{sequence.reqmts}.
+complexity. An \tcode{array} meets some of the requirements of a
+\link{sequence container}{sequence.reqmts}.
 Descriptions are provided here
 only for operations on \tcode{array} that are not described in
 one of these tables and
@@ -3416,7 +3416,7 @@ [array.cons]
 \pnum
 \indextext{\idxcode{array}!initialization}%
 \indextext{requirements!container}%
-The conditions for an aggregate\iref{dcl.init.aggr} shall be
+The conditions for an \deflink{aggregate}{dcl.init.aggr} shall be
 met. Class \tcode{array} relies on the implicitly-declared special
 member functions~(\ref{class.default.ctor}, \ref{class.dtor}, and \ref{class.copy.ctor}) to
 conform to the container requirements table in~\ref{container.requirements}.
@@ -4203,7 +4203,7 @@ [forwardlist.overview]
 \pnum
 An incomplete type \tcode{T} may be used when instantiating \tcode{forward_list}
 if the allocator meets the
-allocator completeness requirements\iref{allocator.requirements.completeness}.
+\link{allocator completeness requirements}{allocator.requirements.completeness}.
 \tcode{T} shall be complete before any member of the resulting specialization
 of \tcode{forward_list} is referenced.
 
@@ -4692,7 +4692,7 @@ [forwardlist.ops]
 
 \pnum
 \remarks
-Stable\iref{algorithm.stable}.
+\link{Stable}{algorithm.stable}.
 
 \pnum
 \complexity
@@ -4779,7 +4779,7 @@ [forwardlist.ops]
 
 \pnum
 \remarks
-Stable\iref{algorithm.stable}.
+\link{Stable}{algorithm.stable}.
 
 \pnum
 \complexity
@@ -4841,7 +4841,7 @@ [list.overview]
 is a sequence container that supports
 bidirectional iterators and allows constant time insert and erase
 operations anywhere within the sequence, with storage management handled
-automatically. Unlike vectors\iref{vector} and deques\iref{deque},
+automatically. Unlike \link{vectors}{vector} and \link{deques}{deque},
 fast random access to list elements is not supported, but many
 algorithms only need sequential access anyway.
 
@@ -4998,7 +4998,7 @@ [list.overview]
 \pnum
 An incomplete type \tcode{T} may be used when instantiating \tcode{list}
 if the allocator meets the
-allocator completeness requirements\iref{allocator.requirements.completeness}.
+\link{allocator completeness requirements}{allocator.requirements.completeness}.
 \tcode{T} shall be complete before any member of the resulting specialization
 of \tcode{list} is referenced.
 
@@ -5377,7 +5377,7 @@ [list.ops]
 
 \pnum
 \remarks
-Stable\iref{algorithm.stable}.
+\link{Stable}{algorithm.stable}.
 
 \pnum
 \complexity
@@ -5500,7 +5500,7 @@ [list.ops]
 
 \pnum
 \remarks
-Stable\iref{algorithm.stable}.
+\link{Stable}{algorithm.stable}.
 
 \pnum
 \complexity
@@ -5559,7 +5559,7 @@ [vector.overview]
 requirements\iref{sequence.reqmts}, of an allocator-aware container
 (\tref{container.alloc.req}),
 and, for an element type other than \tcode{bool},
-of a contiguous container\iref{container.requirements.general}.
+of a \deflink{contiguous container}{container.requirements.general}.
 The exceptions are the
 \tcode{push_front}, \tcode{pop_front}, and \tcode{emplace_front} member functions, which are not
 provided. Descriptions are provided here only for operations on \tcode{vector}
@@ -5690,7 +5690,7 @@ [vector.overview]
 \pnum
 An incomplete type \tcode{T} may be used when instantiating \tcode{vector}
 if the allocator meets the
-allocator completeness requirements\iref{allocator.requirements.completeness}.
+\link{allocator completeness requirements}{allocator.requirements.completeness}.
 \tcode{T} shall be complete before any member of the resulting specialization
 of \tcode{vector} is referenced.
 
@@ -6218,7 +6218,7 @@ [vector.bool]
 semantics as the primary \tcode{vector} template, except that operations
 dealing with the \tcode{bool} value type map to bit values in the
 container storage and
-\tcode{allocator_traits::construct}\iref{allocator.traits.members}
+\linkx{\tcode{allocator_traits::construct}}{allocator_traits!construct}{allocator.traits.members}
 is not used to construct these values.
 
 \pnum
@@ -9765,9 +9765,9 @@ [queue.defn]
 can be used to instantiate
 \tcode{queue}.
 In particular,
-\tcode{list}\iref{list}
+\link{\tcode{list}}{list}
 and
-\tcode{deque}\iref{deque}
+\link{\tcode{deque}}{deque}
 can be used.
 
 \begin{codeblock}
@@ -10027,15 +10027,15 @@ [priqueue.overview]
 can be used to instantiate
 \tcode{priority_queue}.
 In particular,
-\tcode{vector}\iref{vector}
+\link{\tcode{vector}}{vector}
 and
-\tcode{deque}\iref{deque}
+\link{\tcode{deque}}{deque}
 can be used.
 Instantiating
 \tcode{priority_queue}
 also involves supplying a function or function object for making
 priority comparisons; the library assumes that the function or function
-object defines a strict weak ordering\iref{alg.sorting}.
+object defines a \link{strict weak ordering}{alg.sorting}.
 
 \begin{codeblock}
 namespace std {
@@ -10336,10 +10336,10 @@ [stack]
 can be used to instantiate
 \tcode{stack}.
 In particular,
-\tcode{vector}\iref{vector},
-\tcode{list}\iref{list}
+\link{\tcode{vector}}{vector},
+\link{\tcode{list}}{list}
 and
-\tcode{deque}\iref{deque}
+\link{\tcode{deque}}{deque}
 can be used.
 
 \rSec3[stack.defn]{Definition}
diff --git a/source/iterators.tex b/source/iterators.tex
index 89217e82..301efdf2 100644
--- a/source/iterators.tex
+++ b/source/iterators.tex
@@ -5996,10 +5996,11 @@ [ostream.iterator.cons.des]
 
 \rSec3[ostream.iterator.ops]{Operations}
 
-\indexlibrarymember{operator=}{ostream_iterator}%
+\begin{indexed}{\indexlibrarymember{operator=}{ostream_iterator}}
 \begin{itemdecl}
 ostream_iterator& operator=(const T& value);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -6042,7 +6043,7 @@ [istreambuf.iterator]
 The
 class template
 \tcode{istreambuf_iterator}
-defines an input iterator\iref{input.iterators} that
+defines an \link{input iterator}{input.iterators} that
 reads successive
 \textit{characters}
 from the streambuf for which it was constructed.
@@ -6154,11 +6155,12 @@ [istreambuf.iterator.cons]
 the exposition-only member \tcode{sbuf_} is initialized with a null pointer value.
 
 
-\indexlibraryctor{istreambuf_iterator}%
+\begin{indexed}{\indexlibraryctor{istreambuf_iterator}}
 \begin{itemdecl}
 constexpr istreambuf_iterator() noexcept;
 constexpr istreambuf_iterator(default_sentinel_t) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -6166,11 +6168,11 @@ [istreambuf.iterator.cons]
 Initializes \tcode{sbuf_} with \tcode{nullptr}.
 \end{itemdescr}
 
-
-\indexlibraryctor{istreambuf_iterator}%
+\begin{indexed}{\indexlibraryctor{istreambuf_iterator}}
 \begin{itemdecl}
 istreambuf_iterator(istream_type& s) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -6178,11 +6180,11 @@ [istreambuf.iterator.cons]
 Initializes \tcode{sbuf_} with \tcode{s.rdbuf()}.
 \end{itemdescr}
 
-
-\indexlibraryctor{istreambuf_iterator}%
+\begin{indexed}{\indexlibraryctor{istreambuf_iterator}}
 \begin{itemdecl}
 istreambuf_iterator(streambuf_type* s) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -6190,11 +6192,11 @@ [istreambuf.iterator.cons]
 Initializes \tcode{sbuf_} with \tcode{s}.
 \end{itemdescr}
 
-
-\indexlibraryctor{istreambuf_iterator}%
+\begin{indexed}{\indexlibraryctor{istreambuf_iterator}}
 \begin{itemdecl}
 istreambuf_iterator(const @\placeholder{proxy}@& p) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -6324,10 +6326,11 @@ [ostreambuf.iterator]
 
 \rSec3[ostreambuf.iter.cons]{Constructors}
 
-\indexlibraryctor{ostreambuf_iterator}%
+\begin{indexed}{\indexlibraryctor{ostreambuf_iterator}}
 \begin{itemdecl}
 ostreambuf_iterator(ostream_type& s) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -6340,11 +6343,11 @@ [ostreambuf.iter.cons]
 Initializes \tcode{sbuf_} with \tcode{s.rdbuf()}.
 \end{itemdescr}
 
-
-\indexlibraryctor{ostreambuf_iterator}%
+\begin{indexed}{\indexlibraryctor{ostreambuf_iterator}}
 \begin{itemdecl}
 ostreambuf_iterator(streambuf_type* s) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -6659,10 +6662,11 @@ [iterator.range]
 \tcode{false}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{empty(initializer_list<E>)}}%
+\begin{indexed}{\indexlibrary{\idxcode{empty(initializer_list<E>)}}}
 \begin{itemdecl}
 template<class E> [[nodiscard]] constexpr bool empty(initializer_list<E> il) noexcept;
 \end{itemdecl}
+\end{indexed}
 \begin{itemdescr}
 \pnum
 \returns
diff --git a/source/ranges.tex b/source/ranges.tex
index 9c03f96e..f2f8de72 100644
--- a/source/ranges.tex
+++ b/source/ranges.tex
@@ -1157,7 +1157,7 @@ [range.view]
 \item A \libconcept{range} type that generates its elements on demand.
 \end{itemize}
 
-Most containers\iref{containers} are not views since
+Most \link{containers}{containers} are not views since
 destruction of the container destroys the elements,
 which cannot be done in constant time.
 \end{example}
diff --git a/source/algorithms.tex b/source/algorithms.tex
index ceeb6a3e..5fc728a3 100644
--- a/source/algorithms.tex
+++ b/source/algorithms.tex
@@ -5,7 +5,7 @@ [algorithms.general]
 
 \pnum
 This Clause describes components that \Cpp{} programs may use to perform
-algorithmic operations on containers\iref{containers} and other sequences.
+algorithmic operations on \link{containers}{containers} and other sequences.
 
 \pnum
 The following subclauses describe components for
@@ -7252,7 +7252,7 @@ [alg.merge]
 
 \pnum
 \remarks
-Stable\iref{algorithm.stable}.
+\link{Stable}{algorithm.stable}.
 \end{itemdescr}
 
 \begin{itemdecl}
diff --git a/source/numerics.tex b/source/numerics.tex
index b0a0a98a..18bc76e8 100644
--- a/source/numerics.tex
+++ b/source/numerics.tex
@@ -160,8 +160,8 @@ [cfenv.syn]
 \end{note}
 
 \pnum
-The floating-point environment has thread storage
-duration\iref{basic.stc.thread}. The initial state for a thread's floating-point
+The floating-point environment has \deflink{thread storage duration}{basic.stc.thread}.
+The initial state for a thread's floating-point
 environment is the state of the floating-point environment of the thread that constructs
 the corresponding \tcode{thread} object\iref{thread.thread.class}
 or \tcode{jthread} object\iref{thread.jthread.class}
@@ -191,7 +191,7 @@ [complex.numbers]
 The specializations
 \tcode{complex<float>},
 \tcode{complex<double>}, and
-\tcode{complex<long double>} are literal types\iref{basic.types}.
+\tcode{complex<long double>} are \deflinkx{literal types}{literal type}{basic.types}.
 
 \pnum
 If the result of a function is not mathematically defined or not in
@@ -1690,7 +1690,7 @@ [rand]
 \pnum
 \indextext{\idxcode{result_type}!entity characterization based on}%
 Each of the entities specified via this subclause
-has an associated arithmetic type\iref{basic.fundamental}
+has an associated \deflinkx{arithmetic type}{type!arithmetic}{basic.fundamental}
 identified as \tcode{result_type}.
 With \tcode{T} as the \tcode{result_type}
 thus associated with such an entity,
@@ -1920,21 +1920,21 @@ [rand.req.genl]
     is undefined unless the corresponding template argument
     is cv-unqualified and
     meets the requirements
-    of seed sequence\iref{rand.req.seedseq}.
+    of \link{seed sequence}{rand.req.seedseq}.
   \item
     that has a template type parameter
     named \tcode{URBG}
     is undefined unless the corresponding template argument
     is cv-unqualified and
     meets the requirements
-    of uniform random bit generator\iref{rand.req.urng}.
+    of \link{uniform random bit generator}{rand.req.urng}.
   \item
     that has a template type parameter
     named \tcode{Engine}
     is undefined unless the corresponding template argument
     is cv-unqualified and
     meets the requirements
-    of random number engine\iref{rand.req.eng}.
+    of \link{random number engine}{rand.req.eng}.
   \item
     that has a template type parameter
     named \tcode{RealType}
@@ -2059,7 +2059,7 @@ [rand.req.seedseq]
 \indextext{\idxcode{result_type}!seed sequence requirement}%
 \tcode{S::result_type}
   & \tcode{T}
-  & \tcode{T} is an unsigned integer type\iref{basic.fundamental}
+  & \tcode{T} is an \deflink{unsigned integer type}{basic.fundamental}
     of at least 32 bits.
   & compile-time
   \\ \rowsep
@@ -2230,7 +2230,7 @@ [rand.req.eng]
 \pnum
 A class \tcode{E}
 that meets the requirements
-of a uniform random bit generator\iref{rand.req.urng}
+of a \link{uniform random bit generator}{rand.req.urng}
 also meets the requirements
 of a \term{random number engine}
 if the expressions shown
@@ -2251,7 +2251,7 @@ [rand.req.eng]
     \tcode{s} is a value of \tcode{T};
   \item
     \tcode{q} is an lvalue
-    meeting the requirements of a seed sequence\iref{rand.req.seedseq};
+    meeting the requirements of a \link{seed sequence}{rand.req.seedseq};
   \item
     \tcode{z} is a value
     of type \tcode{unsigned long long};
@@ -2652,7 +2652,7 @@ [rand.req.dist]
   \item
     \tcode{g}, \tcode{g1}, and \tcode{g2} are lvalues of a type
     meeting the requirements
-    of a uniform random bit generator\iref{rand.req.urng};
+    of a \link{uniform random bit generator}{rand.req.urng};
   \item
     \tcode{os} is an lvalue of the type of some class template specialization
     \tcode{basic_ostream<charT,} \tcode{traits>};
@@ -2684,7 +2684,7 @@ [rand.req.dist]
 \indextext{\idxcode{result_type}!random number distribution requirement}%
 \tcode{D::result_type}
   & \tcode{T}
-  & \tcode{T} is an arithmetic type\iref{basic.fundamental}.
+  & \tcode{T} is an \deflinkx{arithmetic type}{type!arithmetic}{basic.fundamental}.
   & compile-time
   \\ \rowsep
 \tcode{D::param_type}
@@ -2903,7 +2903,7 @@ [rand.eng]
 Each type instantiated
 from a class template specified in this subclause~\ref{rand.eng}
 meets the requirements
-of a random number engine\iref{rand.req.eng} type.
+of a \link{random number engine}{rand.req.eng} type.
 
 \pnum
 Except where specified otherwise,
@@ -3064,10 +3064,11 @@ [rand.eng.lcong]
  otherwise sets the engine's state to $\tcode{s} \bmod m$.
 \end{itemdescr}
 
-\indexlibraryctor{linear_congruential_engine}%
+\begin{indexed}{\indexlibraryctor{linear_congruential_engine}}
 \begin{itemdecl}
 template<class Sseq> explicit linear_congruential_engine(Sseq& q);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -3223,10 +3224,11 @@ [rand.eng.mers]
 consists of the values of $X_{i - n}, \dotsc, X_{i - 1}$,
 in that order.
 
-\indexlibraryctor{mersenne_twister_engine}%
+\begin{indexed}{\indexlibraryctor{mersenne_twister_engine}}
 \begin{itemdecl}
 explicit mersenne_twister_engine(result_type value);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -3247,10 +3249,11 @@ [rand.eng.mers]
 \bigoh{n}.
 \end{itemdescr}
 
-\indexlibraryctor{mersenne_twister_engine}%
+\begin{indexed}{\indexlibraryctor{mersenne_twister_engine}}
 \begin{itemdecl}
 template<class Sseq> explicit mersenne_twister_engine(Sseq& q);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -3377,10 +3380,11 @@ [rand.eng.sub]
  $X_{i-r}, \dotsc, X_{i-1}$,
 in that order, followed by $c$.
 
-\indexlibraryctor{subtract_with_carry_engine}%
+\begin{indexed}{\indexlibraryctor{subtract_with_carry_engine}}
 \begin{itemdecl}
 explicit subtract_with_carry_engine(result_type value);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -3411,10 +3415,11 @@ [rand.eng.sub]
  of \tcode{e}.
 \end{itemdescr}
 
-\indexlibraryctor{subtract_with_carry_engine}%
+\begin{indexed}{\indexlibraryctor{subtract_with_carry_engine}}
 \begin{itemdecl}
 template<class Sseq> explicit subtract_with_carry_engine(Sseq& q);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -3450,7 +3455,7 @@ [rand.adapt.general]
 Each type instantiated
 from a class template specified in this subclause~\ref{rand.adapt}
 meets the requirements
-of a random number engine adaptor\iref{rand.req.adapt} type.
+of a \link{random number engine adaptor}{rand.req.adapt} type.
 
 \pnum
 Except where specified otherwise,
@@ -4497,7 +4502,7 @@ [rand.dist.general]
 Each type instantiated
 from a class template specified in this subclause~\ref{rand.dist}
 meets the requirements
-of a random number distribution\iref{rand.req.dist} type.
+of a \link{random number distribution}{rand.req.dist} type.
 
 \pnum
 Descriptions are provided in this subclause~\ref{rand.dist}
@@ -5027,10 +5032,11 @@ [rand.dist.bern.negbin]
 \end{codeblock}
 
 
-\indexlibraryctor{negative_binomial_distribution}%
+\begin{indexed}{\indexlibraryctor{negative_binomial_distribution}}
 \begin{itemdecl}
 explicit negative_binomial_distribution(IntType k, double p = 0.5);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -5056,10 +5062,11 @@ [rand.dist.bern.negbin]
  with which the object was constructed.
 \end{itemdescr}
 
-\indexlibrarymember{p}{negative_binomial_distribution}%
+\begin{indexed}{\indexlibrarymember{p}{negative_binomial_distribution}}
 \begin{itemdecl}
 double p() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -5149,10 +5156,11 @@ [rand.dist.pois.poisson]
 \tcode{mean} corresponds to the parameter of the distribution.
 \end{itemdescr}
 
-\indexlibrarymember{mean}{poisson_distribution}%
+\begin{indexed}{\indexlibrarymember{mean}{poisson_distribution}}
 \begin{itemdecl}
 double mean() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -5209,10 +5217,11 @@ [rand.dist.pois.exp]
 \end{codeblock}
 
 
-\indexlibraryctor{exponential_distribution}%
+\begin{indexed}{\indexlibraryctor{exponential_distribution}}
 \begin{itemdecl}
 explicit exponential_distribution(RealType lambda);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -5224,10 +5233,11 @@ [rand.dist.pois.exp]
 \tcode{lambda} corresponds to the parameter of the distribution.
 \end{itemdescr}
 
-\indexlibrarymember{lambda}{exponential_distribution}%
+\begin{indexed}{\indexlibrarymember{lambda}{exponential_distribution}}
 \begin{itemdecl}
 RealType lambda() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -5256,6 +5266,7 @@ [rand.dist.pois.gamma]
 
 \indexlibraryglobal{gamma_distribution}%
 \indexlibrarymember{result_type}{gamma_distribution}%
+\begin{indexed}{\indexlibrary{\idxcode{gamma_distribution}}}
 \begin{codeblock}
 template<class RealType = double>
   class gamma_distribution {
@@ -5285,12 +5296,13 @@ [rand.dist.pois.gamma]
     result_type max() const;
   };
 \end{codeblock}
+\end{indexed}
 
-
-\indexlibraryctor{gamma_distribution}%
+\begin{indexed}{\indexlibraryctor{gamma_distribution}}
 \begin{itemdecl}
 explicit gamma_distribution(RealType alpha, RealType beta = 1.0);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -5303,10 +5315,11 @@ [rand.dist.pois.gamma]
 correspond to the parameters of the distribution.
 \end{itemdescr}
 
-\indexlibrarymember{alpha}{gamma_distribution}%
+\begin{indexed}{\indexlibrarymember{alpha}{gamma_distribution}}
 \begin{itemdecl}
 RealType alpha() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -5315,10 +5328,11 @@ [rand.dist.pois.gamma]
  with which the object was constructed.
 \end{itemdescr}
 
-\indexlibrarymember{beta}{gamma_distribution}%
+\begin{indexed}{\indexlibrarymember{beta}{gamma_distribution}}
 \begin{itemdecl}
 RealType beta() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -5379,10 +5393,11 @@ [rand.dist.pois.weibull]
   };
 \end{codeblock}
 
-\indexlibraryctor{weibull_distribution}%
+\begin{indexed}{\indexlibraryctor{weibull_distribution}}
 \begin{itemdecl}
 explicit weibull_distribution(RealType a, RealType b = 1.0);
 \end{itemdecl}%
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -5395,10 +5410,11 @@ [rand.dist.pois.weibull]
 correspond to the respective parameters of the distribution.
 \end{itemdescr}
 
-\indexlibrarymember{a}{weibull_distribution}%
+\begin{indexed}{\indexlibrarymember{a}{weibull_distribution}}
 \begin{itemdecl}
 RealType a() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -5407,10 +5423,11 @@ [rand.dist.pois.weibull]
  with which the object was constructed.
 \end{itemdescr}
 
-\indexlibrarymember{b}{weibull_distribution}%
+\begin{indexed}{\indexlibrarymember{b}{weibull_distribution}}
 \begin{itemdecl}
 RealType b() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -5477,11 +5494,11 @@ [rand.dist.pois.extreme]
   };
 \end{codeblock}
 
-
-\indexlibraryctor{extreme_value_distribution}%
+\begin{indexed}{\indexlibraryctor{extreme_value_distribution}}
 \begin{itemdecl}
 explicit extreme_value_distribution(RealType a, RealType b = 1.0);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -5494,10 +5511,11 @@ [rand.dist.pois.extreme]
 correspond to the respective parameters of the distribution.
 \end{itemdescr}
 
-\indexlibrarymember{a}{extreme_value_distribution}%
+\begin{indexed}{\indexlibrarymember{a}{extreme_value_distribution}}
 \begin{itemdecl}
 RealType a() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -5506,10 +5524,11 @@ [rand.dist.pois.extreme]
  with which the object was constructed.
 \end{itemdescr}
 
-\indexlibrarymember{b}{extreme_value_distribution}%
+\begin{indexed}{\indexlibrarymember{b}{extreme_value_distribution}}
 \begin{itemdecl}
 RealType b() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -5597,11 +5616,11 @@ [rand.dist.norm.normal]
   };
 \end{codeblock}
 
-
-\indexlibraryctor{normal_distribution}%
+\begin{indexed}{\indexlibraryctor{normal_distribution}}
 \begin{itemdecl}
 explicit normal_distribution(RealType mean, RealType stddev = 1.0);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -5614,10 +5633,11 @@ [rand.dist.norm.normal]
 correspond to the respective parameters of the distribution.
 \end{itemdescr}
 
-\indexlibrarymember{mean}{normal_distribution}%
+\begin{indexed}{\indexlibrarymember{mean}{normal_distribution}}
 \begin{itemdecl}
 RealType mean() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -5626,10 +5646,11 @@ [rand.dist.norm.normal]
  with which the object was constructed.
 \end{itemdescr}
 
-\indexlibrarymember{stddev}{normal_distribution}%
+\begin{indexed}{\indexlibrarymember{stddev}{normal_distribution}}
 \begin{itemdecl}
 RealType stddev() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -5706,10 +5727,11 @@ [rand.dist.norm.lognormal]
 correspond to the respective parameters of the distribution.
 \end{itemdescr}
 
-\indexlibrarymember{m}{lognormal_distribution}%
+\begin{indexed}{\indexlibrarymember{m}{lognormal_distribution}}
 \begin{itemdecl}
 RealType m() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -5718,10 +5740,11 @@ [rand.dist.norm.lognormal]
  with which the object was constructed.
 \end{itemdescr}
 
-\indexlibrarymember{s}{lognormal_distribution}%
+\begin{indexed}{\indexlibrarymember{s}{lognormal_distribution}}
 \begin{itemdecl}
 RealType s() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -5778,11 +5801,11 @@ [rand.dist.norm.chisq]
   };
 \end{codeblock}
 
-
-\indexlibraryctor{chi_squared_distribution}%
+\begin{indexed}{\indexlibraryctor{chi_squared_distribution}}
 \begin{itemdecl}
 explicit chi_squared_distribution(RealType n);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -5794,10 +5817,11 @@ [rand.dist.norm.chisq]
 \tcode{n} corresponds to the parameter of the distribution.
 \end{itemdescr}
 
-\indexlibrarymember{n}{chi_squared_distribution}%
+\begin{indexed}{\indexlibrarymember{n}{chi_squared_distribution}}
 \begin{itemdecl}
 RealType n() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -5872,10 +5896,11 @@ [rand.dist.norm.cauchy]
 correspond to the respective parameters of the distribution.
 \end{itemdescr}
 
-\indexlibrarymember{a}{cauchy_distribution}%
+\begin{indexed}{\indexlibrarymember{a}{cauchy_distribution}}
 \begin{itemdecl}
 RealType a() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -5884,10 +5909,11 @@ [rand.dist.norm.cauchy]
  with which the object was constructed.
 \end{itemdescr}
 
-\indexlibrarymember{b}{cauchy_distribution}%
+\begin{indexed}{\indexlibrarymember{b}{cauchy_distribution}}
 \begin{itemdecl}
 RealType b() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -5949,11 +5975,11 @@ [rand.dist.norm.f]
   };
 \end{codeblock}
 
-
-\indexlibraryctor{fisher_f_distribution}%
+\begin{indexed}{\indexlibraryctor{fisher_f_distribution}}
 \begin{itemdecl}
 explicit fisher_f_distribution(RealType m, RealType n = 1);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -5966,10 +5992,11 @@ [rand.dist.norm.f]
 correspond to the respective parameters of the distribution.
 \end{itemdescr}
 
-\indexlibrarymember{m}{fisher_f_distribution}%
+\begin{indexed}{\indexlibrarymember{m}{fisher_f_distribution}}
 \begin{itemdecl}
 RealType m() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -5978,10 +6005,11 @@ [rand.dist.norm.f]
  with which the object was constructed.
 \end{itemdescr}
 
-\indexlibrarymember{n}{fisher_f_distribution}%
+\begin{indexed}{\indexlibrarymember{n}{fisher_f_distribution}}
 \begin{itemdecl}
 RealType n() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -6041,11 +6069,11 @@ [rand.dist.norm.t]
   };
 \end{codeblock}
 
-
-\indexlibraryctor{student_t_distribution}%
+\begin{indexed}{\indexlibraryctor{student_t_distribution}}
 \begin{itemdecl}
 explicit student_t_distribution(RealType n);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -6057,10 +6085,11 @@ [rand.dist.norm.t]
 \tcode{n} corresponds to the parameter of the distribution.
 \end{itemdescr}
 
-\indexlibrarymember{mean}{student_t_distribution}%
+\begin{indexed}{\indexlibrarymember{mean}{student_t_distribution}}
 \begin{itemdecl}
 RealType n() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -6147,10 +6176,11 @@ [rand.dist.samp.discrete]
   };
 \end{codeblock}
 
-\indexlibraryctor{discrete_distribution}
+\begin{indexed}{\indexlibraryctor{discrete_distribution}}
 \begin{itemdecl}
 discrete_distribution();
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -6951,8 +6981,9 @@ [valarray.syn]
 \begin{itemize}
 \item
 for every function taking a
-\tcode{const valarray<T>\&} other than \tcode{begin} and
-\tcode{end}\iref{valarray.range},
+\tcode{const valarray<T>\&} other than
+\liblinkx{\tcode{begin}}{begin!valarray}{valarray.range} and
+\liblinkx{\tcode{end}}{end!valarray}{valarray.range},
 identical functions taking the replacement types shall be added;
 \item
 for every function taking two
@@ -6977,7 +7008,7 @@ [valarray.syn]
 
 \pnum
 These library functions are permitted to throw a
-\tcode{bad_alloc}\iref{bad.alloc} exception if there are not sufficient resources available
+\link{\tcode{bad_alloc}}{bad.alloc} exception if there are not sufficient resources available
 to carry out the operation.
 Note that the exception is not mandated.
 
@@ -7131,7 +7162,7 @@ [valarray.cons]
 \pnum
 \effects
 Constructs a \tcode{valarray} that has length \tcode{n}.
-Each element of the array is value-initialized\iref{dcl.init}.
+Each element of the array is \deflinkx{value-initialized}{value-initialize}{dcl.init}.
 \end{itemdescr}
 
 \indexlibraryctor{valarray}%
@@ -7384,7 +7415,7 @@ [valarray.access]
 \pnum
 The reference returned by the subscript operator for an array shall
 be valid until the member function
-\tcode{resize(size_t, T)}\iref{valarray.members} is called for that array or until the lifetime of
+\liblinkx{\tcode{resize(size_t, T)}}{valarray!resize}{valarray.members} is called for that array or until the lifetime of
 that array ends, whichever happens first.
 \end{itemdescr}
 
@@ -7810,7 +7841,8 @@ [valarray.members]
 \pnum
 \begin{example}
 If the argument has the value -2,
-the first two elements of the result will be value-initialized\iref{dcl.init}; the third element of the result will be assigned the value
+the first two elements of the result will be
+\deflinkx{value-initialized}{value-initialize}{dcl.init}; the third element of the result will be assigned the value
 of the first element of the argument; etc.
 \end{example}
 \end{itemdescr}
@@ -7845,10 +7877,11 @@ [valarray.members]
 corresponding element of \tcode{*this}.
 \end{itemdescr}
 
-\indexlibrarymember{resize}{valarray}%
+\begin{indexed}{\indexlibrarymember{resize}{valarray}}
 \begin{itemdecl}
 void resize(size_t sz, T c = T());
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -8933,15 +8966,16 @@ [valarray.range]
 \pnum
 The iterators returned by \tcode{begin} and \tcode{end} for an array
 are guaranteed to be valid until the member function
-\tcode{resize(size_t, T)}\iref{valarray.members} is called for that
+\liblinkx{\tcode{resize(size_t, T)}}{valarray!resize}{valarray.members} is called for that
 array or until the lifetime of that array ends, whichever happens
 first.
 
-\indexlibrarymember{begin}{valarray}%
+\begin{indexed}{\indexlibrarymember{begin}{valarray}}
 \begin{itemdecl}
 template<class T> @\unspec{1}@ begin(valarray<T>& v);
 template<class T> @\unspec{2}@ begin(const valarray<T>& v);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -8949,11 +8983,12 @@ [valarray.range]
 An iterator referencing the first value in the array.
 \end{itemdescr}
 
-\indexlibrarymember{end}{valarray}%
+\begin{indexed}{\indexlibrarymember{end}{valarray}}
 \begin{itemdecl}
 template<class T> @\unspec{1}@ end(valarray<T>& v);
 template<class T> @\unspec{2}@ end(const valarray<T>& v);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -9719,11 +9754,11 @@ [cmath.syn]
 The contents and meaning of the header \libheader{cmath}
 are the same as the C standard library header \libheader{math.h},
 with the addition of
-a three-dimensional hypotenuse function~(\ref{c.math.hypot3}) and
+a \link{three-dimensional hypotenuse}{c.math.hypot3} function and
 the mathematical special functions described in \ref{sf.cmath}.
 \begin{note}
 Several functions have additional overloads in this document,
-but they have the same behavior as in the C standard library\iref{library.c}.
+but they have the same behavior as in the \link{C standard library}{library.c}.
 \end{note}
 
 \pnum
@@ -9734,7 +9769,7 @@ [cmath.syn]
   \item If any argument of arithmetic type
     corresponding to a \tcode{double} parameter
     has type \tcode{long double},
-    then all arguments of arithmetic type\iref{basic.fundamental}
+    then all arguments of \deflinkx{arithmetic type}{type!arithmetic}{basic.fundamental}
     corresponding to \tcode{double} parameters
     are effectively cast to \tcode{long double}.
   \item Otherwise, if any argument of arithmetic type
@@ -9790,7 +9825,7 @@ [c.math.abs]
 If \tcode{abs()} is called with an argument of type \tcode{X}
 for which \tcode{is_unsigned_v<X>} is \tcode{true} and
 if \tcode{X} cannot be converted to \tcode{int}
-by integral promotion\iref{conv.prom}, the program is ill-formed.
+by \link{integral promotion}{conv.prom}, the program is ill-formed.
 \begin{note}
 Arguments that can be promoted to \tcode{int} are permitted for compatibility with C.
 \end{note}
diff --git a/source/locales.tex b/source/locales.tex
index 4c34847d..13132373 100644
--- a/source/locales.tex
+++ b/source/locales.tex
@@ -271,7 +271,7 @@ [locale]
 object per thread is \impldef{whether locale object is global or per-thread}.
 Implementations should provide one global locale object per
 thread. If there is a single global locale object for the entire program,
-implementations are not required to avoid data races on it\iref{res.on.data.races}.
+implementations are not required to \link{avoid data races}{res.on.data.races} on it.
 
 \rSec3[locale.types]{Types}
 
@@ -1071,7 +1071,7 @@ [category.ctype]
 \pnum
 The type
 \tcode{mask}
-is a bitmask type\iref{bitmask.types}.
+is a \link{bitmask type}{bitmask.types}.
 
 \rSec3[locale.ctype]{Class template \tcode{ctype}}
 
@@ -1376,7 +1376,7 @@ [locale.ctype.virtuals]
 is intended to accept values derived from \grammarterm{character-literal}s for conversion
 to the locale's encoding.}
 The only characters for which unique transformations are required
-are those in the basic source character set\iref{lex.charset}.
+are those in the \deflinkx{basic source character set}{character set!basic source}{lex.charset}.
 
 For any named
 \tcode{ctype}
@@ -1420,7 +1420,8 @@ [locale.ctype.virtuals]
 \tcode{char}
 value or values.
 
-For any character \tcode{c} in the basic source character set\iref{lex.charset}
+For any character \tcode{c} in the
+\deflinkx{basic source character set}{character set!basic source}{lex.charset}
 the transformation is such that
 \begin{codeblock}
 do_widen(do_narrow(c, 0)) == c
@@ -1767,8 +1768,8 @@ [facet.ctype.char.virtuals]
 \pnum
 These functions are described identically as those members of the
 same name in the
-\tcode{ctype}
-class template\iref{locale.ctype.members}.
+\link{\tcode{ctype}
+class template}{locale.ctype.members}.
 
 \rSec3[locale.codecvt]{Class template \tcode{codecvt}}
 
@@ -3328,7 +3329,7 @@ [locale.collate]
 \tcode{collate<char>}
 and
 \tcode{collate<wchar_t>},
-apply lexicographic ordering\iref{alg.lex.comparison}.
+apply \link{lexicographic ordering}{alg.lex.comparison}.
 
 \pnum
 Each function compares a string of characters
@@ -3392,7 +3393,7 @@ [locale.collate.virtuals]
 and
 \tcode{collate<wchar_t>},
 implement
-a lexicographical comparison\iref{alg.lex.comparison}.
+a \link{lexicographical comparison}{alg.lex.comparison}.
 \end{itemdescr}
 
 \indexlibrarymember{collate}{do_transform}%
@@ -5001,7 +5002,7 @@ [clocale.syn]
 namespace std {
   struct lconv;
 
-  char* setlocale(int category, const char* locale);
+  char* @\libentity{setlocale}@(int category, const char* locale);
   lconv* localeconv();
 }
 
diff --git a/source/iostreams.tex b/source/iostreams.tex
index 974a95f0..0220f65e 100644
--- a/source/iostreams.tex
+++ b/source/iostreams.tex
@@ -430,7 +430,7 @@ [iostream.objects.overview]
 The objects are constructed and the associations are established at some
 time prior to or during the first time an object of class
 \tcode{ios_base::Init} is constructed, and in any case before the body
-of \tcode{main}\iref{basic.start.main} begins execution.\footnote{If it is possible for them to do so, implementations should
+of \link{\tcode{main}}{basic.start.main} begins execution.\footnote{If it is possible for them to do so, implementations should
 initialize the objects earlier than required.}
 The objects are not destroyed during program execution.\footnote{Constructors and destructors for objects with
 static storage duration can
@@ -461,10 +461,11 @@ [iostream.objects.overview]
 
 \rSec2[narrow.stream.objects]{Narrow stream objects}
 
-\indexlibraryglobal{cin}%
+\begin{indexed}{\indexlibraryglobal{cin}}
 \begin{itemdecl}
 istream cin;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -480,13 +481,14 @@ [narrow.stream.objects]
 returns
 \tcode{\&cout}.
 Its state is otherwise the same as required for
-\tcode{basic_ios<char>::init}\iref{basic.ios.cons}.
+\linkx{\tcode{basic_ios<char>::init}}{basic_ios!init}{basic.ios.cons}.
 \end{itemdescr}
 
-\indexlibraryglobal{cout}%
+\begin{indexed}{\indexlibraryglobal{cout}}
 \begin{itemdecl}
 ostream cout;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -495,10 +497,11 @@ [narrow.stream.objects]
 declared in \libheaderref{cstdio}.
 \end{itemdescr}
 
-\indexlibraryglobal{cerr}%
+\begin{indexed}{\indexlibraryglobal{cerr}}
 \begin{itemdecl}
 ostream cerr;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -513,13 +516,14 @@ [narrow.stream.objects]
 \tcode{cerr.flags() \& unitbuf}
 is nonzero and \tcode{cerr.tie()} returns \tcode{\&cout}.
 Its state is otherwise the same as required for
-\tcode{basic_ios<char>::init}\iref{basic.ios.cons}.
+\linkx{\tcode{basic_ios<char>::init}}{basic_ios!init}{basic.ios.cons}.
 \end{itemdescr}
 
-\indexlibraryglobal{clog}%
+\begin{indexed}{\indexlibraryglobal{clog}}
 \begin{itemdecl}
 ostream clog;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -531,10 +535,11 @@ [narrow.stream.objects]
 
 \rSec2[wide.stream.objects]{Wide stream objects}
 
-\indexlibraryglobal{wcin}%
+\begin{indexed}{\indexlibraryglobal{wcin}}
 \begin{itemdecl}
 wistream wcin;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -550,13 +555,14 @@ [wide.stream.objects]
 returns
 \tcode{\&wcout}.
 Its state is otherwise the same as required for
-\tcode{basic_ios<wchar_t>::init}\iref{basic.ios.cons}.
+\linkx{\tcode{basic_ios<wchar_t>::init}}{basic_ios!init}{basic.ios.cons}.
 \end{itemdescr}
 
-\indexlibraryglobal{wcout}%
+\begin{indexed}{\indexlibraryglobal{wcout}}
 \begin{itemdecl}
 wostream wcout;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -565,10 +571,11 @@ [wide.stream.objects]
 declared in \libheaderref{cstdio}.
 \end{itemdescr}
 
-\indexlibraryglobal{wcerr}%
+\begin{indexed}{\indexlibraryglobal{wcerr}}
 \begin{itemdecl}
 wostream wcerr;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -583,13 +590,14 @@ [wide.stream.objects]
 \tcode{wcerr.flags() \& unitbuf}
 is nonzero and \tcode{wcerr.tie()} returns \tcode{\&wcout}.
 Its state is otherwise the same as required for
-\tcode{basic_ios<wchar_t>::init}\iref{basic.ios.cons}.
+\linkx{\tcode{basic_ios<wchar_t>::init}}{basic_ios!init}{basic.ios.cons}.
 \end{itemdescr}
 
-\indexlibraryglobal{wclog}%
+\begin{indexed}{\indexlibraryglobal{wclog}}
 \begin{itemdecl}
 wostream wclog;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -673,10 +681,11 @@ [ios.syn]
 
 \rSec2[stream.types]{Types}
 
-\indexlibraryglobal{streamoff}%
+\begin{indexed}{\indexlibraryglobal{streamoff}}
 \begin{itemdecl}
 using streamoff = @\impdef@;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -684,10 +693,11 @@ [stream.types]
 sufficient size to represent the maximum possible file size for the operating system.\footnote{Typically \tcode{long long}.}
 \end{itemdescr}
 
-\indexlibraryglobal{streamsize}%
+\begin{indexed}{\indexlibraryglobal{streamsize}}
 \begin{itemdecl}
 using streamsize = @\impdef@;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -701,7 +711,7 @@ [stream.types]
 \end{itemdescr}
 
 \rSec2[ios.base]{Class \tcode{ios_base}}
-\indexlibraryglobal{ios_base}%
+\begin{indexed}{\indexlibraryglobal{ios_base}}
 \begin{codeblock}
 namespace std {
   class ios_base {
@@ -797,6 +807,7 @@ [ios.base]
   };
 }
 \end{codeblock}
+\end{indexed}
 
 \pnum
 \tcode{ios_base}
@@ -890,10 +901,11 @@ [ios.failure]
 iostream_category())}.
 \end{note}
 
-\indexlibraryctor{ios_base::failure}%
+\begin{indexed}{\indexlibraryctor{ios_base::failure}}
 \begin{itemdecl}
 explicit failure(const string& msg, const error_code& ec = io_errc::stream);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -1013,10 +1025,11 @@ [ios.iostate]
 
 \rSec4[ios.openmode]{Type \tcode{ios_base::openmode}}
 
-\indexlibrarymember{openmode}{ios_base}%
+\begin{indexed}{\indexlibrarymember{openmode}{ios_base}}
 \begin{itemdecl}
 using openmode = @\textit{T3}@;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -1043,10 +1056,11 @@ [ios.openmode]
 
 \rSec4[ios.seekdir]{Type \tcode{ios_base::seekdir}}
 
-\indexlibrarymember{seekdir}{ios_base}%
+\begin{indexed}{\indexlibrarymember{seekdir}{ios_base}}
 \begin{itemdecl}
 using seekdir = @\textit{T4}@;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -1116,10 +1130,11 @@ [ios.init]
 they have not already been constructed and initialized.
 \end{itemdescr}
 
-\indexlibrarydtor{ios_base::Init}%
+\begin{indexed}{\indexlibrarydtor{ios_base::Init}}
 \begin{itemdecl}
 ~Init();
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -1272,10 +1287,11 @@ [fmtflags.state]
 
 \rSec3[ios.base.locales]{Functions}
 
-\indexlibrarymember{imbue}{ios_base}%
+\begin{indexed}{\indexlibrarymember{imbue}{ios_base}}
 \begin{itemdecl}
 locale imbue(const locale& loc);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -1327,7 +1343,7 @@ [ios.members.static]
 \pnum
 \returns
 \tcode{true}
-if the previous state of the standard iostream objects\iref{iostream.objects}
+if the previous state of the \link{standard iostream objects}{iostream.objects}
 was synchronized and otherwise returns
 \tcode{false}.
 The first time it is called,
@@ -1392,8 +1408,8 @@ [ios.base.storage]
 
 \pnum
 \remarks
-Concurrent access to this function by multiple threads does not result in a data
-race\iref{intro.multithread}.
+Concurrent access to this function by multiple threads does not result in a
+\deflink{data race}{intro.multithread}.
 \end{itemdescr}
 
 \indexlibrarymember{iword}{ios_base}%
@@ -1840,10 +1856,11 @@ [basic.ios.cons]
 \tcode{rdbuf()}.
 \end{itemdescr}
 
-\indexlibrarymember{init}{basic_ios}%
+\begin{indexed}{\indexlibrarymember{init}{basic_ios}}
 \begin{itemdecl}
 void init(basic_streambuf<charT, traits>* sb);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -1956,12 +1973,12 @@ [basic.ios.members]
 \pnum
 \effects
 Calls
-\tcode{ios_base::imbue(loc)}\iref{ios.base.locales}
+\liblinkx{\tcode{ios_base::imbue}}{ios_base!imbue}{ios.base.locales}\tcode{(loc)}
 and
 if
 \tcode{rdbuf() != 0}
 then
-\tcode{rdbuf()->pubimbue(loc)}\iref{streambuf.locales}.
+\tcode{rdbuf()->}\liblinkx{\tcode{pubimbue}}{basic_streambuf!pubimbue}{streambuf.locales}\tcode{(loc)}.
 
 \pnum
 \returns
@@ -2329,10 +2346,11 @@ [fmtflags.manip]
 Each function specified in this subclause
 is a designated addressable function\iref{namespace.std}.
 
-\indexlibraryglobal{boolalpha}%
+\begin{indexed}{\indexlibraryglobal{boolalpha}}
 \begin{itemdecl}
 ios_base& boolalpha(ios_base& str);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2345,10 +2363,11 @@ [fmtflags.manip]
 \tcode{str}.
 \end{itemdescr}
 
-\indexlibraryglobal{noboolalpha}%
+\begin{indexed}{\indexlibraryglobal{noboolalpha}}
 \begin{itemdecl}
 ios_base& noboolalpha(ios_base& str);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2361,10 +2380,11 @@ [fmtflags.manip]
 \tcode{str}.
 \end{itemdescr}
 
-\indexlibraryglobal{showbase}%
+\begin{indexed}{\indexlibraryglobal{showbase}}
 \begin{itemdecl}
 ios_base& showbase(ios_base& str);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2377,10 +2397,11 @@ [fmtflags.manip]
 \tcode{str}.
 \end{itemdescr}
 
-\indexlibraryglobal{noshowbase}%
+\begin{indexed}{\indexlibraryglobal{noshowbase}}
 \begin{itemdecl}
 ios_base& noshowbase(ios_base& str);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2393,10 +2414,11 @@ [fmtflags.manip]
 \tcode{str}.
 \end{itemdescr}
 
-\indexlibraryglobal{showpoint}%
+\begin{indexed}{\indexlibraryglobal{showpoint}}
 \begin{itemdecl}
 ios_base& showpoint(ios_base& str);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2575,10 +2597,11 @@ [adjustfield.manip]
 \tcode{str}.
 \end{itemdescr}
 
-\indexlibraryglobal{left}%
+\begin{indexed}{\indexlibraryglobal{left}}
 \begin{itemdecl}
 ios_base& left(ios_base& str);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2591,10 +2614,11 @@ [adjustfield.manip]
 \tcode{str}.
 \end{itemdescr}
 
-\indexlibraryglobal{right}%
+\begin{indexed}{\indexlibraryglobal{right}}
 \begin{itemdecl}
 ios_base& right(ios_base& str);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2613,10 +2637,11 @@ [basefield.manip]
 Each function specified in this subclause
 is a designated addressable function\iref{namespace.std}.
 
-\indexlibraryglobal{dec}%
+\begin{indexed}{\indexlibraryglobal{dec}}
 \begin{itemdecl}
 ios_base& dec(ios_base& str);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2637,10 +2662,11 @@ [basefield.manip]
 \tcode{cout}.}.
 \end{itemdescr}
 
-\indexlibraryglobal{hex}%
+\begin{indexed}{\indexlibraryglobal{hex}}
 \begin{itemdecl}
 ios_base& hex(ios_base& str);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2653,10 +2679,11 @@ [basefield.manip]
 \tcode{str}.
 \end{itemdescr}
 
-\indexlibraryglobal{oct}%
+\begin{indexed}{\indexlibraryglobal{oct}}
 \begin{itemdecl}
 ios_base& oct(ios_base& str);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2675,10 +2702,11 @@ [floatfield.manip]
 Each function specified in this subclause
 is a designated addressable function\iref{namespace.std}.
 
-\indexlibraryglobal{fixed}%
+\begin{indexed}{\indexlibraryglobal{fixed}}
 \begin{itemdecl}
 ios_base& fixed(ios_base& str);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2691,10 +2719,11 @@ [floatfield.manip]
 \tcode{str}.
 \end{itemdescr}
 
-\indexlibraryglobal{scientific}%
+\begin{indexed}{\indexlibraryglobal{scientific}}
 \begin{itemdecl}
 ios_base& scientific(ios_base& str);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2707,10 +2736,11 @@ [floatfield.manip]
 \tcode{str}.
 \end{itemdescr}
 
-\indexlibraryglobal{hexfloat}%
+\begin{indexed}{\indexlibraryglobal{hexfloat}}
 \begin{itemdecl}
 ios_base& hexfloat(ios_base& str);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2749,10 +2779,11 @@ [floatfield.manip]
 
 \rSec2[error.reporting]{Error reporting}
 
-\indexlibrarymember{make_error_code}{io_errc}%
+\begin{indexed}{\indexlibrarymember{make_error_code}{io_errc}}
 \begin{itemdecl}
 error_code make_error_code(io_errc e) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2760,10 +2791,11 @@ [error.reporting]
 \tcode{error_code(static_cast<int>(e), iostream_category())}.
 \end{itemdescr}
 
-\indexlibrarymember{make_error_condition}{io_errc}%
+\begin{indexed}{\indexlibrarymember{make_error_condition}{io_errc}}
 \begin{itemdecl}
 error_condition make_error_condition(io_errc e) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2771,10 +2803,11 @@ [error.reporting]
 \tcode{error_condition(static_cast<int>(e), iostream_category())}.
 \end{itemdescr}
 
-\indexlibraryglobal{iostream_category}%
+\begin{indexed}{\indexlibraryglobal{iostream_category}}
 \begin{itemdecl}
 const error_category& iostream_category() noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -3093,10 +3126,11 @@ [streambuf.members]
 
 \rSec4[streambuf.locales]{Locales}
 
-\indexlibrarymember{pubimbue}{basic_streambuf}%
+\begin{indexed}{\indexlibrarymember{pubimbue}{basic_streambuf}}
 \begin{itemdecl}
 locale pubimbue(const locale& loc);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -3114,10 +3148,11 @@ [streambuf.locales]
 \tcode{getloc()}.
 \end{itemdescr}
 
-\indexlibrarymember{getloc}{basic_streambuf}%
+\begin{indexed}{\indexlibrarymember{getloc}{basic_streambuf}}
 \begin{itemdecl}
 locale getloc() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -3200,7 +3235,7 @@ [streambuf.pub.get]
 If a read position is available, returns
 \tcode{egptr() - gptr()}.
 Otherwise returns
-\tcode{showmanyc()}\iref{streambuf.virt.get}.
+\linkx{\tcode{showmanyc()}}{basic_streambuf!showmanyc}{streambuf.virt.get}.
 \end{itemdescr}
 
 \indexlibrarymember{snextc}{basic_streambuf}%
@@ -3617,11 +3652,12 @@ [streambuf.virt.buffer]
 
 \rSec4[streambuf.virt.get]{Get area}
 
-\indexlibrarymember{showmanyc}{basic_streambuf}%
+\begin{indexed}{\indexlibrarymember{showmanyc}{basic_streambuf}}
 \begin{itemdecl}
 streamsize showmanyc();@\footnote{\textrm{The morphemes of \tcode{showmanyc}\
 are ``es-how-many-see'', not ``show-manic''.}}@
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -4145,7 +4181,7 @@ [istream]
   template<class charT, class traits = char_traits<charT>>
   class basic_istream : virtual public basic_ios<charT, traits> {
   public:
-    // types (inherited from \tcode{basic_ios}\iref{ios})
+    // types (inherited from \link{\tcode{basic_ios}}{ios})
     using char_type   = charT;
     using int_type    = typename traits::int_type;
     using pos_type    = typename traits::pos_type;
@@ -4564,7 +4600,7 @@ [istream.formatted.arithmetic]
 \pnum
 As in the case of the inserters, these extractors depend on the
 locale's
-\tcode{num_get<>}\iref{locale.num.get} object to perform parsing the input
+\link{\tcode{num_get<>}}{locale.num.get} object to perform parsing the input
 stream data.
 These extractors behave as formatted input functions (as described in~\ref{istream.formatted.reqmts}).  After a sentry object is constructed, the
 conversion occurs as if performed by the following code fragment:
@@ -4697,7 +4733,7 @@ [istream.extractors]
 \effects
 Calls
 \tcode{pf(*this)}.\footnote{See, for example, the function signature
-\tcode{dec(ios_base\&)}\iref{basefield.manip}.}
+\liblinkx{\tcode{dec(ios_base\&)}}{dec}{basefield.manip}.}
 This extractor does not behave as a formatted input function
 (as described in~\ref{istream.formatted.reqmts}).
 
@@ -4799,7 +4835,7 @@ [istream.extractors]
 \begin{itemdescr}
 \pnum
 \effects
-Behaves as an unformatted input function\iref{istream.unformatted}.
+Behaves as an \link{unformatted input function}{istream.unformatted}.
 If \tcode{sb} is null, calls
 \tcode{setstate(fail\-bit)},
 which may throw
@@ -5193,7 +5229,7 @@ [istream.unformatted]
 Characters are extracted until any of the following occurs:
 \begin{itemize}
 \item
-\tcode{n != numeric_limits<streamsize>::max()}\iref{numeric.limits}
+\tcode{n != \deflinkx{numeric_limits<streamsize>::max()}{numeric_limits!max}{numeric.limits}}
 and
 \tcode{n} characters have been extracted so far
 \item
@@ -5518,21 +5554,22 @@ [istream.manip]
 specified in this subclause
 is a designated addressable function\iref{namespace.std}.
 
-\indexlibraryglobal{ws}%
+\begin{indexed}{\indexlibraryglobal{ws}}
 \begin{itemdecl}
 template<class charT, class traits>
   basic_istream<charT, traits>& ws(basic_istream<charT, traits>& is);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
 \effects
-Behaves as an unformatted input function\iref{istream.unformatted}, except that it does not count the number of characters extracted and
+Behaves as an \link{unformatted input function}{istream.unformatted}, except that it does not count the number of characters extracted and
 does not affect the value returned by subsequent calls to \tcode{is.gcount()}. After
 constructing a sentry object extracts characters as long as the next available
 character \tcode{c} is whitespace or until there are no more characters in the sequence.
 Whitespace characters are distinguished with the same criterion as used by
-\tcode{sentry::sentry}\iref{istream.sentry}.
+\link{\tcode{sentry::sentry}}{istream.sentry}.
 If
 \tcode{ws}
 stops extracting characters because there are no more available it sets
@@ -5623,7 +5660,7 @@ [iostream.cons]
 Initializes the base class subobjects with
 \tcode{basic_istream<charT, traits>(sb)}\iref{istream}
 and
-\tcode{basic_ostream<charT, traits>(sb)}\iref{ostream}.
+\link{\tcode{basic_ostream<charT, traits>(sb)}}{ostream}.
 
 \pnum
 \ensures
@@ -5699,7 +5736,7 @@ [ostream]
   template<class charT, class traits = char_traits<charT>>
   class basic_ostream : virtual public basic_ios<charT, traits> {
   public:
-    // types (inherited from \tcode{basic_ios}\iref{ios})
+    // types (inherited from \link{\tcode{basic_ios}}{ios})
     using char_type   = charT;
     using int_type    = typename traits::int_type;
     using pos_type    = typename traits::pos_type;
@@ -6360,7 +6397,7 @@ [ostream.inserters]
 \begin{itemdescr}
 \pnum
 \effects
-Behaves as an unformatted output function\iref{ostream.unformatted}.
+Behaves as an \link{unformatted output function}{ostream.unformatted}.
 After the sentry object is
 constructed, if
 \tcode{sb} is null calls
@@ -6417,7 +6454,7 @@ [ostream.inserters]
 \end{codeblock}
 where \tcode{s} is an
 \impldef{NTCTS in \tcode{basic_ostream<charT, traits>\& op\-er\-ator<<(nullptr_t)}}
-NTCTS\iref{defns.ntcts}.
+\link{NTCTS}{defns.ntcts}.
 \end{itemdescr}
 
 \rSec4[ostream.inserters.character]{Character inserter function templates}
@@ -6441,7 +6478,7 @@ [ostream.inserters.character]
 \begin{itemdescr}
 \pnum
 \effects
-Behaves as a formatted output function\iref{ostream.formatted.reqmts}
+Behaves as a \link{formatted output function}{ostream.formatted.reqmts}
 of \tcode{out}. Constructs a character sequence \tcode{seq}.
 If \tcode{c} has type
 \tcode{char}
@@ -6639,11 +6676,12 @@ [ostream.manip]
 specified in this subclause
 is a designated addressable function\iref{namespace.std}.
 
-\indexlibraryglobal{endl}%
+\begin{indexed}{\indexlibraryglobal{endl}}
 \begin{itemdecl}
 template<class charT, class traits>
   basic_ostream<charT, traits>& endl(basic_ostream<charT, traits>& os);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -7071,7 +7109,7 @@ [ext.manip]
 \pnum
 \effects
 The expression \tcode{in >> get_money(mon, intl)} described below
-behaves as a formatted input function\iref{istream.formatted.reqmts}.
+behaves as a \link{formatted input function}{istream.formatted.reqmts}.
 
 \pnum
 \returns
@@ -7116,7 +7154,7 @@ [ext.manip]
 An object of unspecified type such that if
 \tcode{out} is an object of type \tcode{basic_ostream<charT, traits>}
 then the expression \tcode{out << put_money(mon, intl)} behaves as a
-formatted output function\iref{ostream.formatted.reqmts} that calls
+\link{formatted output function}{ostream.formatted.reqmts} that calls
 \tcode{f(out, mon, intl)}, where the function \tcode{f} is defined as:
 
 \begin{codeblock}
@@ -7240,7 +7278,7 @@ [quoted.manip]
 \tcode{charT} and with member type \tcode{traits_type}, which in the second and third
 forms is the same as \tcode{traits}, then the expression
 \tcode{out << quoted(s, delim, escape)}
-behaves as a formatted output function\iref{ostream.formatted.reqmts}
+behaves as a \link{formatted output function}{ostream.formatted.reqmts}
 of \tcode{out}. This forms a character sequence \tcode{seq}, initially
 consisting of the following elements:
 \begin{itemize}
@@ -12212,7 +12250,7 @@ [fs.path.req]
 
 \pnum
 \begin{note}
-See path conversions\iref{fs.path.cvt}
+See \link{path conversions}{fs.path.cvt}
 for how the value types above and their encodings convert to
 \tcode{path::value_type} and its encoding.
 \end{note}
@@ -12819,7 +12857,7 @@ [fs.path.generic.obs]
 
 \pnum
 Generic format observer functions return strings formatted according to the
-generic pathname format\iref{fs.path.generic}.
+\link{generic pathname format}{fs.path.generic}.
 A single slash (\tcode{'/'}) character is used as
 the \grammarterm{directory-separator}.
 
@@ -13362,11 +13400,11 @@ [fs.path.itr]
 \indexlibrarymember{path}{iterator}%
 \pnum
 Path iterators iterate over the elements of the pathname
-in the generic format\iref{fs.path.generic}.
+in the \link{generic format}{fs.path.generic}.
 
 \pnum
 A \tcode{path::iterator} is a constant iterator meeting all the
-requirements of a bidirectional iterator\iref{bidirectional.iterators}
+requirements of a \link{bidirectional iterator}{bidirectional.iterators}
 except that,
 for dereferenceable iterators \tcode{a} and \tcode{b}
 of type \tcode{path::iterator}
@@ -14591,7 +14629,7 @@ [fs.class.directory.iterator]
 construction of a \tcode{directory_iterator} for the directory, it is
 unspecified whether or not subsequently incrementing the iterator will ever
 result in an iterator referencing the removed or added directory entry. See
-POSIX \tcode{readdir_r}.
+POSIX \weblink{\tcode{readdir_r}}{http://pubs.opengroup.org/onlinepubs/9699919799/functions/readdir.html}.
 \end{note}
 
 \rSec3[fs.dir.itr.members]{Members}
@@ -14683,7 +14721,7 @@ [fs.dir.itr.members]
 \pnum
 \effects
 As specified for the prefix increment operation of
-Input iterators\iref{input.iterators}.
+\link{Input iterators}{input.iterators}.
 
 \pnum
 \returns
@@ -14988,7 +15026,7 @@ [fs.rec.dir.itr.members]
 \pnum
 \effects
 As specified for the prefix increment operation of
-Input iterators\iref{input.iterators},
+\link{Input iterators}{input.iterators},
 except that:
 
 \begin{itemize}
@@ -15577,7 +15615,7 @@ [fs.op.create.dir.symlk]
 \begin{itemdescr}
 \pnum
 \effects
-Establishes the postcondition, as if by POSIX \tcode{symlink()}.
+Establishes the postcondition, as if by POSIX \weblink{\tcode{symlink()}}{http://pubs.opengroup.org/onlinepubs/9699919799/functions/symlink.html}.
 
 \pnum
 \ensures
@@ -15651,7 +15689,7 @@ [fs.op.create.symlink]
 \begin{itemdescr}
 \pnum
 \effects
-Establishes the postcondition, as if by POSIX \tcode{symlink()}.
+Establishes the postcondition, as if by POSIX \weblink{\tcode{symlink()}}{http://pubs.opengroup.org/onlinepubs/9699919799/functions/symlink.html}.
 
 \pnum
 \ensures
@@ -15684,7 +15722,7 @@ [fs.op.current.path]
 \returns
 The absolute path of the current working directory,
   whose pathname in the native format is
-  obtained as if by POSIX \tcode{getcwd()}.
+  obtained as if by POSIX \weblink{\tcode{getcwd()}}{http://pubs.opengroup.org/onlinepubs/9699919799/functions/getcwd.html}.
   The signature with argument \tcode{ec} returns \tcode{path()} if an
   error occurs.
 
@@ -15721,7 +15759,7 @@ [fs.op.current.path]
 \begin{itemdescr}
 \pnum
 \effects
-Establishes the postcondition, as if by POSIX \tcode{chdir()}.
+Establishes the postcondition, as if by POSIX \weblink{\tcode{chdir()}}{http://pubs.opengroup.org/onlinepubs/9699919799/functions/chdir.html}.
 
 \pnum
 \ensures
@@ -15832,7 +15870,7 @@ [fs.op.file.size]
 \item
   If \tcode{is_regular_file(p)}, the size in bytes of the file
   \tcode{p} resolves to, determined as if by the value of the POSIX \tcode{stat}
-  class member \tcode{st_size} obtained as if by POSIX \tcode{stat()}.
+  class member \tcode{st_size} obtained as if by POSIX \weblink{\tcode{stat()}}{http://pubs.opengroup.org/onlinepubs/9699919799/functions/stat.html}.
 \item
   Otherwise, the result is \impldef{result of \tcode{filesystem::file_size}}.
 \end{itemize}
@@ -16214,7 +16252,7 @@ [fs.op.last.write.time]
 \pnum
 \effects
 Sets the time of last data modification of the file
-  resolved to by \tcode{p} to \tcode{new_time}, as if by POSIX \tcode{futimens()}.
+  resolved to by \tcode{p} to \tcode{new_time}, as if by POSIX \weblink{\tcode{futimens()}}{http://pubs.opengroup.org/onlinepubs/9699919799/functions/futimens.html}.
 
 \pnum
 \throws
@@ -17092,8 +17130,8 @@ [cinttypes.syn]
 The header \libheader{cinttypes} includes the header \libheaderref{cstdint} instead
 of \libheader{stdint.h}, and
 \item
-if and only if the type \tcode{intmax_t} designates an extended integer
-type\iref{basic.fundamental}, the following function signatures are added:
+if and only if the type \tcode{intmax_t} designates an
+\deflink{extended integer type}{basic.fundamental}, the following function signatures are added:
 \begin{codeblock}
 intmax_t abs(intmax_t);
 imaxdiv_t div(intmax_t, intmax_t);
diff --git a/source/regex.tex b/source/regex.tex
index 4b1c53e3..446d1652 100644
--- a/source/regex.tex
+++ b/source/regex.tex
@@ -12,7 +12,7 @@ [re.general]
 
 \pnum
 The following subclauses describe a basic regular expression class template and its
-traits that can handle char-like\iref{strings.general} template arguments,
+traits that can handle \deflinkx{char-like}{char-like types}{strings.general} template arguments,
 two specializations of this class template that handle sequences of \tcode{char} and \tcode{wchar_t},
 a class template that holds the
 result of a regular expression match, a series of algorithms that allow a character
@@ -116,8 +116,8 @@ [re.req]
 type \tcode{charT}; \tcode{u} is an object of
 type \tcode{X}; \tcode{v} is an object of type \tcode{const
 X}; \tcode{p} is a value of type \tcode{const charT*}; \tcode{I1}
-and \tcode{I2} are input iterators\iref{input.iterators};
-\tcode{F1} and \tcode{F2} are forward iterators\iref{forward.iterators};
+and \tcode{I2} are \link{input iterators}{input.iterators};
+\tcode{F1} and \tcode{F2} are \link{forward iterators}{forward.iterators};
 \tcode{c} is a value of type \tcode{const charT};
 \tcode{s} is an object of type \tcode{X::string_type};
 \tcode{cs} is an object of type \tcode{const X::string_type};
@@ -151,7 +151,7 @@ [re.req]
   & A type that represents the locale used by the traits class. \indextext{locale}
  \\ \rowsep
 \tcode{X::char_class_type}
- & A bitmask type\iref{bitmask.types}.
+ & A \link{bitmask type}{bitmask.types}.
  & A bitmask type representing a particular character classification.
    \indextext{regular expression traits!\idxcode{char_class_type}}%
    \indextext{\idxcode{char_class_type}!regular expression traits}%
@@ -612,14 +612,14 @@ [re.synopt]
 %
 \tcode{awk} &
 Specifies that the grammar recognized by the regular expression engine
-shall be that used by the utility awk in POSIX.
+shall be that used by the utility \weblink{awk}{http://pubs.opengroup.org/onlinepubs/9699919799/utilities/awk.html} in POSIX.
 \indextext{\idxcode{awk}}%
 \indexlibrarymember{syntax_option_type}{awk}%
 \\ \rowsep
 %
 \tcode{grep} &
 Specifies that the grammar recognized by the regular expression engine
-shall be that used by the utility grep in POSIX.
+shall be that used by the utility \weblink{grep}{http://pubs.opengroup.org/onlinepubs/9699919799/utilities/grep.html} in POSIX.
 \indextext{\idxcode{grep}}%
 \indexlibrarymember{syntax_option_type}{grep}%
 \\ \rowsep
@@ -662,26 +662,26 @@ [re.matchflag]
 \begin{codeblock}
 namespace std::regex_constants {
   using match_flag_type = @\textit{T2}@;
-  inline constexpr match_flag_type match_default = {};
-  inline constexpr match_flag_type match_not_bol = @\unspec@;
-  inline constexpr match_flag_type match_not_eol = @\unspec@;
-  inline constexpr match_flag_type match_not_bow = @\unspec@;
-  inline constexpr match_flag_type match_not_eow = @\unspec@;
-  inline constexpr match_flag_type match_any = @\unspec@;
-  inline constexpr match_flag_type match_not_null = @\unspec@;
-  inline constexpr match_flag_type match_continuous = @\unspec@;
-  inline constexpr match_flag_type match_prev_avail = @\unspec@;
-  inline constexpr match_flag_type format_default = {};
-  inline constexpr match_flag_type format_sed = @\unspec@;
-  inline constexpr match_flag_type format_no_copy = @\unspec@;
-  inline constexpr match_flag_type format_first_only = @\unspec@;
+  inline constexpr match_flag_type @\libentity{match_default}@ = {};
+  inline constexpr match_flag_type @\libentity{match_not_bol}@ = @\unspec@;
+  inline constexpr match_flag_type @\libentity{match_not_eol}@ = @\unspec@;
+  inline constexpr match_flag_type @\libentity{match_not_bow}@ = @\unspec@;
+  inline constexpr match_flag_type @\libentity{match_not_eow}@ = @\unspec@;
+  inline constexpr match_flag_type @\libentity{match_any}@ = @\unspec@;
+  inline constexpr match_flag_type @\libentity{match_not_null}@ = @\unspec@;
+  inline constexpr match_flag_type @\libentity{match_continuous}@ = @\unspec@;
+  inline constexpr match_flag_type @\libentity{match_prev_avail}@ = @\unspec@;
+  inline constexpr match_flag_type @\libentity{format_default}@ = {};
+  inline constexpr match_flag_type @\libentity{format_sed}@ = @\unspec@;
+  inline constexpr match_flag_type @\libentity{format_no_copy}@ = @\unspec@;
+  inline constexpr match_flag_type @\libentity{format_first_only}@ = @\unspec@;
 }
 \end{codeblock}
 
 \pnum
 \indexlibraryglobal{match_flag_type}%
 The type \tcode{match_flag_type} is an
-\impldef{type of \tcode{regex_constants::match_flag_type}} bitmask type\iref{bitmask.types}.
+\impldef{type of \tcode{regex_constants::match_flag_type}} \link{bitmask type}{bitmask.types}.
 The constants of that type, except for \tcode{match_default} and
 \tcode{format_default}, are bitmask elements. The \tcode{match_default} and
 \tcode{format_default} constants are empty bitmasks.
@@ -743,7 +743,7 @@ [re.matchflag]
 \tcode{match_prev_avail} &
 \verb!--first! is a valid iterator position. When this flag is
 set the flags \tcode{match_not_bol} and \tcode{match_not_bow} shall be ignored by the
-regular expression algorithms\iref{re.alg} and iterators\iref{re.iter}.
+\link{regular expression algorithms}{re.alg} and \link{iterators}{re.iter}.
 \\ \rowsep
 %
 \indexlibraryglobal{format_default}%
@@ -751,7 +751,7 @@ [re.matchflag]
 When a regular expression match is to be replaced by a
 new string, the new string shall be constructed using the rules used by
 the ECMAScript replace function in ECMA-262,
-part 15.5.4.11 String.prototype.replace. In
+part 15.5.4.11 \weblink{String.prototype.replace}{https://tc39.github.io/ecma262/#sec-string.prototype.replace}. In
 addition, during search and replace operations all non-overlapping
 occurrences of the regular expression shall be located and replaced, and
 sections of the input that did not match the expression shall be copied
@@ -762,7 +762,7 @@ [re.matchflag]
 \tcode{format_sed} &
 When a regular expression match is to be replaced by a
 new string, the new string shall be constructed using the rules used by
-the sed utility in POSIX.
+the \weblink{sed}{http://pubs.opengroup.org/onlinepubs/9699919799/utilities/sed.html} utility in POSIX.
 \\ \rowsep
 %
 \indexlibraryglobal{format_no_copy}%
@@ -804,7 +804,7 @@ [re.err]
 \indexlibraryglobal{error_type}%
 \indexlibrarymember{regex_constants}{error_type}%
 The type \tcode{error_type} is an \impldef{type of
-\tcode{regex_constants::error_type}} enumerated type\iref{enumerated.types}.
+\tcode{regex_constants::error_type}} \link{enumerated type}{enumerated.types}.
 Values of type \tcode{error_type} represent the error
 conditions described in \tref{re.err}:
 
@@ -885,10 +885,11 @@ [re.badexp]
 The class \tcode{regex_error} defines the type of objects thrown as
 exceptions to report errors from the regular expression library.
 
-\indexlibraryctor{regex_error}%
+\begin{indexed}{\indexlibraryctor{regex_error}}
 \begin{itemdecl}
 regex_error(regex_constants::error_type ecode);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -1155,10 +1156,11 @@ [re.traits]
 \end{itemdescr}
 
 \indexlibraryglobal{locale}%
-\indexlibraryglobal{imbue}%
+\begin{indexed}{\indexlibraryglobal{imbue}}
 \begin{itemdecl}
 locale_type imbue(locale_type loc);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -1183,10 +1185,11 @@ [re.traits]
 \end{itemdescr}
 
 \indexlibraryglobal{locale}%
-\indexlibraryglobal{getloc}%
+\begin{indexed}{\indexlibraryglobal{getloc}}
 \begin{itemdecl}
 locale_type getloc() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -3150,12 +3153,13 @@ [re.regiter.cnstr]
 Constructs an end-of-sequence iterator.
 \end{itemdescr}
 
-\indexlibraryctor{regex_iterator}%
+\begin{indexed}{\indexlibraryctor{regex_iterator}}
 \begin{itemdecl}
 regex_iterator(BidirectionalIterator a, BidirectionalIterator b,
                const regex_type& re,
                regex_constants::match_flag_type m = regex_constants::match_default);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -3456,10 +3460,11 @@ [re.tokiter]
 
 \rSec3[re.tokiter.cnstr]{Constructors}
 
-\indexlibraryctor{regex_token_iterator}%
+\begin{indexed}{\indexlibraryctor{regex_token_iterator}}
 \begin{itemdecl}
 regex_token_iterator();
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
diff --git a/source/atomics.tex b/source/atomics.tex
index 45752b26..fa295701 100644
--- a/source/atomics.tex
+++ b/source/atomics.tex
@@ -560,17 +560,19 @@ [atomics.order]
 Implementations should make atomic stores visible to atomic loads within a reasonable
 amount of time.
 
-\indexlibraryglobal{kill_dependency}%
+\begin{indexed}{\indexlibraryglobal{kill_dependency}}
 \begin{itemdecl}
 template<class T>
   T kill_dependency(T y) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
 \effects
-The argument does not carry a dependency to the return
-value\iref{intro.multithread}.
+The argument does not
+\deflinkx{carry a dependency}{carries a dependency}{intro.multithread}
+to the return value.
 
 \pnum
 \returns
diff --git a/source/threads.tex b/source/threads.tex
index 782c3fd7..a8c8de6d 100644
--- a/source/threads.tex
+++ b/source/threads.tex
@@ -5,7 +5,7 @@ [thread.general]
 
 \pnum
 The following subclauses describe components to create and manage
-threads\iref{intro.multithread}, perform mutual exclusion, and communicate conditions
+\deflinkx{threads}{thread}{intro.multithread}, perform mutual exclusion, and communicate conditions
 and values
 between threads, as summarized in \tref{thread.summary}.
 
@@ -258,8 +258,8 @@ [thread.req.lockable.timed]
 A type \tcode{L} meets the \oldconcept{TimedLockable} requirements if it meets the \oldconcept{Lockable}
 requirements and the following expressions are well-formed and have the specified semantics
 (\tcode{m} denotes a value of type \tcode{L}, \tcode{rel_time} denotes a value of an
-instantiation of \tcode{duration}\iref{time.duration}, and \tcode{abs_time} denotes a value
-of an instantiation of \tcode{time_point}\iref{time.point}).
+instantiation of \link{\tcode{duration}}{time.duration}, and \tcode{abs_time} denotes a value
+of an instantiation of \link{\tcode{time_point}}{time.point}).
 
 \begin{itemdecl}
 m.try_lock_for(rel_time)
@@ -1960,7 +1960,7 @@ [thread.mutex.requirements.general]
 
 \pnum
 A mutex object facilitates protection against data races and allows safe synchronization of
-data between execution agents\iref{thread.req.lockable}.
+data between \deflinkx{execution agents}{execution agent}{thread.req.lockable}.
 An execution agent \term{owns} a mutex from the time it successfully calls one of the
 lock functions until it calls unlock. Mutexes can be either recursive or non-recursive, and can
 grant simultaneous ownership to one or many execution agents. Both
@@ -2002,7 +2002,7 @@ [thread.mutex.requirements.mutex]
 a single mutex appears to occur in a single total order.
 \begin{note}
 This
-can be viewed as the modification order\iref{intro.multithread} of the
+can be viewed as the \deflink{modification order}{intro.multithread} of the
 mutex.
 \end{note}
 \begin{note}
@@ -2090,7 +2090,7 @@ [thread.mutex.requirements.mutex]
 \pnum
 \sync
 If \tcode{try_lock()} returns \tcode{true}, prior \tcode{unlock()} operations
-on the same object \term{synchronize with}\iref{intro.multithread} this operation.
+on the same object \deflink{synchronize with}{intro.multithread} this operation.
 \begin{note}
 Since \tcode{lock()} does not synchronize with a failed subsequent
 \tcode{try_lock()}, the visibility rules are weak enough that little would be
@@ -2119,7 +2119,7 @@ [thread.mutex.requirements.mutex]
 
 \pnum
 \sync
-This operation synchronizes with\iref{intro.multithread} subsequent
+This operation \deflinkx{synchronizes with}{synchronize with}{intro.multithread} subsequent
 lock operations that obtain ownership on the same object.
 
 \pnum
@@ -2246,9 +2246,9 @@ [thread.timedmutex.requirements]
 meet the requirements set out below.
 In this description, \tcode{m} denotes an object of a mutex type,
 \tcode{rel_time} denotes an object of an
-instantiation of \tcode{duration}\iref{time.duration}, and \tcode{abs_time} denotes an
+instantiation of \link{\tcode{duration}}{time.duration}, and \tcode{abs_time} denotes an
 object of an
-instantiation of \tcode{time_point}\iref{time.point}.
+instantiation of \link{\tcode{time_point}}{time.point}.
 
 \pnum
 The timed mutex types meet the \oldconcept{TimedLockable}
@@ -2289,7 +2289,7 @@ [thread.timedmutex.requirements]
 \pnum
 \sync
 If \tcode{try_lock_for()} returns \tcode{true}, prior \tcode{unlock()} operations
-on the same object \term{synchronize with}\iref{intro.multithread} this operation.
+on the same object \deflink{synchronize with}{intro.multithread} this operation.
 
 \pnum
 \throws
@@ -2330,7 +2330,7 @@ [thread.timedmutex.requirements]
 \pnum
 \sync
 If \tcode{try_lock_until()} returns \tcode{true}, prior \tcode{unlock()}
-operations on the same object \term{synchronize with}\iref{intro.multithread}
+operations on the same object \deflink{synchronize with}{intro.multithread}
 this operation.
 
 \pnum
@@ -2532,7 +2532,7 @@ [thread.sharedmutex.requirements]
 
 \pnum
 \sync
-This operation synchronizes with\iref{intro.multithread} subsequent
+This operation \deflinkx{synchronizes with}{synchronize with}{intro.multithread} subsequent
 \tcode{lock()} operations that obtain ownership on the same object.
 
 \pnum
@@ -2566,7 +2566,7 @@ [thread.sharedmutex.requirements]
 \pnum
 \sync
 If \tcode{try_lock_shared()} returns \tcode{true}, prior \tcode{unlock()}
-operations on the same object synchronize with\iref{intro.multithread} this
+operations on the same object \deflink{synchronize with}{intro.multithread} this
 operation.
 
 \pnum
@@ -2633,9 +2633,9 @@ [thread.sharedtimedmutex.requirements]
 meet the requirements set out below. In this description,
 \tcode{m} denotes an object of a shared timed mutex type,
 \tcode{rel_type} denotes an object of an instantiation of
-\tcode{duration}\iref{time.duration}, and
+\link{\tcode{duration}}{time.duration}, and
 \tcode{abs_time} denotes an object of an instantiation of
-\tcode{time_point}\iref{time.point}.
+\link{\tcode{time_point}}{time.point}.
 
 \pnum
 The expression \tcode{m.try_lock_shared_for(rel_time)} is well-formed and
@@ -2840,7 +2840,7 @@ [thread.lock.guard]
 \pnum
 An object of type \tcode{lock_guard} controls the ownership of a lockable object
 within a scope. A \tcode{lock_guard} object maintains ownership of a lockable
-object throughout the \tcode{lock_guard} object's lifetime\iref{basic.life}.
+object throughout the \tcode{lock_guard} object's \deflink{lifetime}{basic.life}.
 The behavior of a program is undefined if the lockable object referenced by
 \tcode{pm} does not exist for the entire lifetime of the \tcode{lock_guard}
 object. The supplied \tcode{Mutex} type shall meet the \oldconcept{BasicLockable}
@@ -2919,7 +2919,7 @@ [thread.lock.scoped]
 \pnum
 An object of type \tcode{scoped_lock} controls the ownership of lockable objects
 within a scope. A \tcode{scoped_lock} object maintains ownership of lockable
-objects throughout the \tcode{scoped_lock} object's lifetime\iref{basic.life}.
+objects throughout the \tcode{scoped_lock} object's \deflink{lifetime}{basic.life}.
 The behavior of a program is undefined if the lockable objects referenced by
 \tcode{pm} do not exist for the entire lifetime of the \tcode{scoped_lock}
 object.
@@ -3953,10 +3953,11 @@ [thread.lock.shared.obs]
 
 \rSec2[thread.lock.algorithm]{Generic locking algorithms}
 
-\indexlibraryglobal{try_lock}%
+\begin{indexed}{\indexlibraryglobal{try_lock}}
 \begin{itemdecl}
 template<class L1, class L2, class... L3> int try_lock(L1&, L2&, L3&...);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -3982,10 +3983,11 @@ [thread.lock.algorithm]
 returned \tcode{false}.
 \end{itemdescr}
 
-\indexlibraryglobal{lock}%
+\begin{indexed}{\indexlibraryglobal{lock}}
 \begin{itemdecl}
 template<class L1, class L2, class... L3> void lock(L1&, L2&, L3&...);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -4085,7 +4087,7 @@ [thread.once.callonce]
 \pnum
 \sync
 For any given \tcode{once_flag}: all active executions occur in a total
-order; completion of an active execution synchronizes with\iref{intro.multithread}
+order; completion of an active execution \deflinkx{synchronizes with}{synchronize with}{intro.multithread}
 the start of the next one in this total order; and the returning execution
 synchronizes with the return from all passive executions.
 
@@ -5842,7 +5844,7 @@ [future.syn]
 \end{codeblock}
 
 \pnum
-The \tcode{enum} type \tcode{launch} is a bitmask type\iref{bitmask.types} with
+The \tcode{enum} type \tcode{launch} is a \link{bitmask type}{bitmask.types} with
 elements \tcode{launch::async} and \tcode{launch::deferred}.
 \begin{note}
 Implementations can provide bitmasks to specify restrictions on task
@@ -6035,22 +6037,21 @@ [futures.state]
 
 \pnum
 Calls to functions that successfully set the stored result of a shared
-state synchronize
-with\iref{intro.multithread} calls to functions
+state \deflink{synchronize with}{intro.multithread} calls to functions
 successfully detecting the ready state resulting from that setting.
 The storage of the result
 (whether normal or exceptional) into the shared state
-synchronizes with\iref{intro.multithread}
+\deflinkx{synchronizes with}{synchronize with}{intro.multithread}
 the successful return from a call to a waiting function on the shared state.
 
 \pnum
 Some functions (e.g., \tcode{promise::set_value_at_thread_exit}) delay making
 the shared state ready until the calling thread exits. The destruction of
-each of that thread's objects with thread storage duration\iref{basic.stc.thread}
+each of that thread's objects with \link{thread storage duration}{basic.stc.thread}
 is sequenced before making that shared state ready.
 
 \pnum
-Access to the result of the same shared state may conflict\iref{intro.multithread}.
+Access to the result of the same shared state may \deflink{conflict}{intro.multithread}.
 \begin{note}
 This explicitly specifies that the result of the shared state is
 visible in the objects that reference this state in the sense of data race
@@ -6385,8 +6386,8 @@ [futures.unique.future]
 do not share their shared state with other asynchronous return objects.
 A default-constructed \tcode{future} object has no
 shared state. A \tcode{future} object with shared state can be created by
-functions on asynchronous providers\iref{futures.state} or by the move constructor
-and shares its shared state with
+functions on \deflinkx{asynchronous providers}{asynchronous provider}{futures.state}
+or by the move constructor and shares its shared state with
 the original asynchronous provider. The result (value or exception) of
 a \tcode{future} object
 can be
@@ -6689,7 +6690,7 @@ [futures.shared.future]
 shared state can
 be created
 by conversion from a \tcode{future} object and shares its shared state with the
-original asynchronous provider\iref{futures.state} of the shared state.
+original \deflink{asynchronous provider}{futures.state} of the shared state.
 The result (value or exception) of a \tcode{shared_future} object
 can be set by
 calling a respective function on an
@@ -7133,7 +7134,7 @@ [futures.async]
 \begin{itemize}
 \item
 the invocation of \tcode{async}
-synchronizes with\iref{intro.multithread} the invocation of \tcode{f}.
+\deflinkx{synchronizes with}{synchronize with}{intro.multithread} the invocation of \tcode{f}.
 \begin{note}
 This statement applies even when the corresponding \tcode{future} object is moved to
 another thread.
@@ -7158,7 +7159,7 @@ [futures.async]
 out\iref{thread.thread.member};
 \item
 the associated thread completion
-synchronizes with\iref{intro.multithread}
+\deflinkx{synchronizes with}{synchronize with}{intro.multithread}
 the return from
 the first function
 that successfully detects the ready status of the shared state or
diff --git a/source/grammar.tex b/source/grammar.tex
index a4da2357..417094f7 100644
--- a/source/grammar.tex
+++ b/source/grammar.tex
@@ -17,10 +17,10 @@ [gram.key]
 \pnum
 \indextext{keyword}%
 New context-dependent keywords are introduced into a program by
-\tcode{typedef}\iref{dcl.typedef},
-\tcode{namespace}\iref{namespace.def},
-class\iref{class}, enumeration\iref{dcl.enum}, and
-\tcode{template}\iref{temp}
+\link{\tcode{typedef}}{dcl.typedef},
+\link{\tcode{namespace}}{namespace.def},
+\link{class}{class}, \link{enumeration}{dcl.enum}, and
+\link{\tcode{template}}{temp}
 declarations.
 
 \begin{ncbnf}
diff --git a/source/limits.tex b/source/limits.tex
index 985f17a3..a1985553 100644
--- a/source/limits.tex
+++ b/source/limits.tex
@@ -129,6 +129,6 @@
 \item%
 Handlers per try block\iref{except.handle} [256].
 \item%
-Number of placeholders\iref{func.bind.place} [10].
+Number of \link{placeholders}{func.bind.place} [10].
 
 \end{itemize}
diff --git a/source/compatibility.tex b/source/compatibility.tex
index df12f0de..965fb408 100644
--- a/source/compatibility.tex
+++ b/source/compatibility.tex
@@ -1125,8 +1125,8 @@ [diff.cpp11.expr]
 A conditional expression with a throw expression as its second or third
 operand keeps the type and value category of the other operand.
 \rationale
-Formerly mandated conversions (lvalue-to-rvalue\iref{conv.lval},
-array-to-pointer\iref{conv.array}, and function-to-pointer\iref{conv.func}
+Formerly mandated conversions (\link{lvalue-to-rvalue}{conv.lval},
+\link{array-to-pointer}{conv.array}, and \link{function-to-pointer}{conv.func}
 standard conversions), especially the creation of the temporary due to
 lvalue-to-rvalue conversion, were considered gratuitous and surprising.
 \effect
@@ -2676,7 +2676,7 @@ [diff.char16]
 The types \tcode{char16_t} and \tcode{char32_t}
 are distinct types rather than typedefs to existing integral types.
 The tokens \tcode{char16_t} and \tcode{char32_t}
-are keywords in this International Standard\iref{lex.key}.
+are \link{keywords}{lex.key} in this International Standard.
 They do not appear as macro or type names defined in
 \libheaderref{cuchar}.
 
@@ -2686,7 +2686,7 @@ [diff.wchar.t]
 The type \tcode{wchar_t} is a distinct type rather than a typedef to an
 existing integral type.
 The token \tcode{wchar_t}
-is a keyword in this International Standard\iref{lex.key}.
+is a \link{keyword}{lex.key} in this International Standard.
 It does not appear as a macro or type name defined in any of
 \libheaderref{cstddef},
 \libheaderref{cstdlib},
@@ -2716,8 +2716,8 @@ [diff.header.iso646.h]
 \tcode{xor},
 and
 \tcode{xor_eq}
-are keywords in this International
-Standard\iref{lex.key},
+are \link{keywords}{lex.key} in this International
+Standard,
 and are not introduced as macros
 by \libdeprheaderref{iso646.h}.
 
@@ -2735,7 +2735,7 @@ [diff.header.stdbool.h]
 
 \pnum
 The tokens \tcode{bool}, \tcode{true}, and \tcode{false}
-are keywords in this International Standard\iref{lex.key},
+are \link{keywords}{lex.key} in this International Standard,
 and are not introduced as macros
 by \libdeprheaderref{stdbool.h}.
 
diff --git a/source/future.tex b/source/future.tex
index 294144cc..37de488e 100644
--- a/source/future.tex
+++ b/source/future.tex
@@ -14,7 +14,7 @@
 Normative for the current edition of this International Standard,
 but having been identified as a candidate for removal from future revisions.
 An implementation may declare library names and entities described in this Clause with the
-\tcode{deprecated} attribute\iref{dcl.attr.deprecated}.
+\link{\tcode{deprecated} attribute}{dcl.attr.deprecated}.
 
 \rSec1[depr.arith.conv.enum]{Arithmetic conversion on enumerations}
 
@@ -194,11 +194,11 @@ [depr.local]
 \rSec1[depr.impldec]{Implicit declaration of copy functions}
 
 \pnum
-The implicit definition of a copy constructor\iref{class.copy.ctor}
+The implicit definition of a \link{copy constructor}{class.copy.ctor}
 as defaulted is deprecated if the class has
 a user-declared copy assignment operator or
-a user-declared destructor\iref{class.dtor}.
-The implicit definition of a copy assignment operator\iref{class.copy.assign}
+a user-declared \link{destructor}{class.dtor}.
+The implicit definition of a \link{copy assignment operator}{class.copy.assign}
 as defaulted is deprecated if the class has
 a user-declared copy constructor or
 a user-declared destructor.
-- 
2.17.1


From 556d793e0e2c1e9f1afbc7f10240365e3ce1d892 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Sun, 26 Feb 2017 13:04:04 +0100
Subject: [PATCH 08/20] Remove some index entries that cause unnecessary
 duplicate ids.

---
 source/templates.tex | 5 +++--
 source/lib-intro.tex | 2 +-
 2 files changed, 4 insertions(+), 3 deletions(-)

diff --git a/source/templates.tex b/source/templates.tex
index f5eb85f5..830f14b1 100644
--- a/source/templates.tex
+++ b/source/templates.tex
@@ -4890,7 +4890,8 @@ [temp.dep]
 Inside a template, some constructs have semantics which may differ from one
 instantiation to another.
 Such a construct
-\defnx{depends}{name!dependent}
+%\defnx{depends}{name!dependent} <--- same index key as 28 lines down
+depends
 on the template parameters.
 In particular, types and expressions may depend on the type
 and/or
@@ -8415,7 +8416,7 @@ [temp.deduct.partial]
 \pnum
 \indextext{at least as specialized as|see{more specialized}}%
 Function template \tcode{F}
-is \defnx{at least as specialized as}{more specialized}
+is \textit{at least as specialized as}
 function template \tcode{G} if,
 for each pair of types used to determine the ordering,
 the type from \tcode{F}
diff --git a/source/lib-intro.tex b/source/lib-intro.tex
index a28ded2d..1ded08a2 100644
--- a/source/lib-intro.tex
+++ b/source/lib-intro.tex
@@ -710,7 +710,7 @@ [structure.see.also]
 of other standards\iref{intro.refs}.
 
 \rSec2[conventions]{Other conventions}
-\indextext{conventions}%
+%\indextext{conventions}%
 
 \pnum
 This subclause describes several editorial conventions used to describe the contents
-- 
2.17.1


From 1eabfa5886ca7bd290f217f96cdd0830736012e4 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Sun, 26 Feb 2017 13:11:19 +0100
Subject: [PATCH 09/20] [temp.class.order] Merge \defn with index entry.

---
 source/templates.tex | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/source/templates.tex b/source/templates.tex
index 830f14b1..a808a8c1 100644
--- a/source/templates.tex
+++ b/source/templates.tex
@@ -3455,9 +3455,8 @@ [temp.class.spec.match]
 \rSec3[temp.class.order]{Partial ordering of class template specializations}
 
 \pnum
-\indextext{more specialized!class template}%
 For two class template partial specializations,
-the first is \defn{more specialized} than the second if, given the following
+the first is \defnx{more specialized}{more specialized!class template} than the second if, given the following
 rewrite to two function templates, the first function template is more
 specialized than the second according to the \link{ordering rules for function
 templates}{temp.func.order}:
-- 
2.17.1


From 033b407f6a60b29ad21d9cbea9d97d42fb488ed7 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Tue, 1 Aug 2017 14:38:23 +0200
Subject: [PATCH 10/20] Fix dubious \defnx that has see{} in it, and remove
 range index entry with the same key.

---
 source/templates.tex | 5 ++---
 source/iostreams.tex | 2 +-
 2 files changed, 3 insertions(+), 4 deletions(-)

diff --git a/source/templates.tex b/source/templates.tex
index a808a8c1..79a1eac5 100644
--- a/source/templates.tex
+++ b/source/templates.tex
@@ -1842,7 +1842,6 @@ [temp.constr.decl]
 \end{example}
 
 \rSec2[temp.constr.normal]{Constraint normalization}
-\indextext{constraint!normalization|(}%
 
 \pnum
 The \defnx{normal form}{normal form!constraint} of an \grammarterm{expression} \tcode{E} is
@@ -1898,10 +1897,11 @@ [temp.constr.normal]
 \end{itemize}
 
 \pnum
+\indextext{normalization|see{constraint, normalization}}%
 The process of obtaining the normal form of a
 \grammarterm{constraint-expression}
 is called
-\defnx{normalization}{normalization!constraint|see{constraint, normalization}}.
+\defnx{normalization}{constraint!normalization}.
 \begin{note}
 Normalization of \grammarterm{constraint-expression}{s}
 is performed
@@ -1931,7 +1931,6 @@ [temp.constr.normal]
 The associated constraints of \#3 are
 \tcode{requires (T x) \{ ++x; \}} (with mapping $\tcode{T} \mapsto \tcode{U}$).
 \end{example}
-\indextext{constraint!normalization|)}
 
 \rSec2[temp.constr.order]{Partial ordering by constraints}
 \indextext{subsume|see{constraint, subsumption}}
diff --git a/source/iostreams.tex b/source/iostreams.tex
index 0220f65e..9870272a 100644
--- a/source/iostreams.tex
+++ b/source/iostreams.tex
@@ -12049,7 +12049,7 @@ [fs.path.generic]
 
 \pnum
 \indextext{path!normalization|(}%
-\defnx{Normalization}{normalization!path|see{path, normalization}} of a generic format pathname means:
+\defnx{Normalization}{normalization!path} of a generic format pathname means:
 
 \begin{enumerate}
 \item If the path is empty, stop.
-- 
2.17.1


From 93b6a3725f1f01eec4279e401441a579e6bfacae Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Wed, 7 Nov 2018 01:56:12 +0100
Subject: [PATCH 11/20] Reuse \defnx in \defnadj.

---
 source/macros.tex | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/source/macros.tex b/source/macros.tex
index fdf8ad6a..0d97eee1 100644
--- a/source/macros.tex
+++ b/source/macros.tex
@@ -227,10 +227,10 @@ [temp.arg.type]
 \newcommand{\defnx}[2]{\indexdefn{#2}\textit{#1}}
 % Compound defined term with 'see' for primary term.
 % Usage: \defnadj{trivial}{class}
-\newcommand{\defnadj}[2]{\indextext{#1 #2|see{#2, #1}}\indexdefn{#2!#1}\textit{#1 #2}}
+\newcommand{\defnadj}[2]{\indextext{#1 #2|see{#2, #1}}\defnx{#1 #2}{#2!#1}}
 % Compound defined term with a different form for the primary noun.
 % Usage: \defnadjx{scalar}{types}{type}
-\newcommand{\defnadjx}[3]{\indextext{#1 #3|see{#3, #1}}\indexdefn{#3!#1}\textit{#1 #2}}
+\newcommand{\defnadjx}[3]{\indextext{#1 #3|see{#3, #1}}\defnx{#1 #2}{#3!#1}}
 
 %%--------------------------------------------------
 %% allow line break if needed for justification
-- 
2.17.1


From e09dc14d695b8e288f80166b50287662f2b5661d Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Sun, 11 Nov 2018 02:27:17 +0100
Subject: [PATCH 12/20] Replace more non-codeblocks with outputblocks.

---
 source/support.tex   |  8 ++++----
 source/iostreams.tex | 12 ++++++------
 source/regex.tex     |  4 ++--
 3 files changed, 12 insertions(+), 12 deletions(-)

diff --git a/source/support.tex b/source/support.tex
index 5fe57eb9..3f24e183 100644
--- a/source/support.tex
+++ b/source/support.tex
@@ -1766,18 +1766,18 @@ [cstdint.syn]
 
 \pnum
 The header also defines numerous macros of the form:
-\begin{codeblock}
+\begin{outputblock}
   INT_[FAST LEAST]{8 16 32 64}_MIN
   [U]INT_[FAST LEAST]{8 16 32 64}_MAX
   INT{MAX PTR}_MIN
   [U]INT{MAX PTR}_MAX
   {PTRDIFF SIG_ATOMIC WCHAR WINT}{_MAX _MIN}
   SIZE_MAX
-\end{codeblock}
+\end{outputblock}
 plus function macros of the form:
-\begin{codeblock}
+\begin{outputblock}
   [U]INT{8 16 32 64 MAX}_C
-\end{codeblock}
+\end{outputblock}
 
 \pnum
 The header defines all types and macros the same as
diff --git a/source/iostreams.tex b/source/iostreams.tex
index 9870272a..c34287f3 100644
--- a/source/iostreams.tex
+++ b/source/iostreams.tex
@@ -15370,16 +15370,16 @@ [fs.op.copy]
 \pnum
 \begin{example}
 Given this directory structure:
-\begin{codeblock}
+\begin{outputblock}
 /dir1
   file1
   file2
   dir2
     file3
-\end{codeblock}
+\end{outputblock}
 
 Calling \tcode{copy("/dir1", "/dir3")} would result in:
-\begin{codeblock}
+\begin{outputblock}
 /dir1
   file1
   file2
@@ -15388,10 +15388,10 @@ [fs.op.copy]
 /dir3
   file1
   file2
-\end{codeblock}
+\end{outputblock}
 
 Alternatively, calling \tcode{copy("/dir1", "/dir3", copy_options::recursive)} would result in:
-\begin{codeblock}
+\begin{outputblock}
 /dir1
   file1
   file2
@@ -15402,7 +15402,7 @@ [fs.op.copy]
   file2
   dir2
     file3
-\end{codeblock}
+\end{outputblock}
 \end{example}
 \end{itemdescr}
 
diff --git a/source/regex.tex b/source/regex.tex
index 446d1652..00d5cbb8 100644
--- a/source/regex.tex
+++ b/source/regex.tex
@@ -3697,7 +3697,7 @@ [re.grammar]
 \tcode{upper}, \tcode{xdigit}, \tcode{d}, \tcode{s}, \tcode{w}.
 In addition the following expressions shall be equivalent:
 
-\begin{codeblock}
+\begin{outputblock}
 \d and [[:digit:]]
 
 \D and [^[:digit:]]
@@ -3709,7 +3709,7 @@ [re.grammar]
 \w and [_[:alnum:]]
 
 \W and [^_[:alnum:]]
-\end{codeblock}
+\end{outputblock}
 
 \pnum
 \indexlibrary{regular expression traits!\idxcode{lookup_collatename}}%
-- 
2.17.1


From 08772bdd97198f00c4e05ffdf4928036fade34c1 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Sun, 11 Nov 2018 02:48:33 +0100
Subject: [PATCH 13/20] Introduce and use \noncxxtcode alternative to \tcode
 for non-C++ code.

---
 source/macros.tex     |  4 +-
 source/lex.tex        | 96 +++++++++++++++++++++----------------------
 source/exceptions.tex |  4 +-
 3 files changed, 53 insertions(+), 51 deletions(-)

diff --git a/source/macros.tex b/source/macros.tex
index 0d97eee1..e2b4a743 100644
--- a/source/macros.tex
+++ b/source/macros.tex
@@ -357,6 +357,8 @@ [temp.arg.type]
 %% Produces 9 output characters.
 \newcommand{\commentellip}{\tcode{/* ...\ */}}
 
+\newcommand{\noncxxtcode}[1]{\tcode{#1}}
+
 %% Concepts
 \newcommand{\oldconceptname}[1]{Cpp17#1}
 \newcommand{\oldconcept}[1]{\textit{\oldconceptname{#1}}}
@@ -379,7 +381,7 @@ [temp.arg.type]
 \newcommand{\defexposconcept}[1]{\ecname{#1}\indexconcept{\idxexposconcept{#1}|idxbfpage}}
 
 %% Ranges
-\newcommand{\Range}[4]{\tcode{#1#3,\penalty2000{} #4#2}}
+\newcommand{\Range}[4]{\noncxxtcode{#1}\tcode{#3,\penalty2000{} #4}\noncxxtcode{#2}}
 \newcommand{\crange}[2]{\Range{[}{]}{#1}{#2}}
 \newcommand{\brange}[2]{\Range{(}{]}{#1}{#2}}
 \newcommand{\orange}[2]{\Range{(}{)}{#1}{#2}}
diff --git a/source/lex.tex b/source/lex.tex
index 203d37a1..b19505f2 100644
--- a/source/lex.tex
+++ b/source/lex.tex
@@ -649,61 +649,61 @@ [lex.name]
 \begin{floattable}{Ranges of characters allowed}{lex.name.allowed}
 {lllll}
 \topline
-\tcode{00A8} &
-\tcode{00AA} &
-\tcode{00AD} &
-\tcode{00AF} &
-\tcode{00B2-00B5} \\
-\tcode{00B7-00BA} &
-\tcode{00BC-00BE} &
-\tcode{00C0-00D6} &
-\tcode{00D8-00F6} &
-\tcode{00F8-00FF} \\
-\tcode{0100-167F} &
-\tcode{1681-180D} &
-\tcode{180F-1FFF} &&\\
-\tcode{200B-200D} &
-\tcode{202A-202E} &
-\tcode{203F-2040} &
-\tcode{2054} &
-\tcode{2060-206F} \\
-\tcode{2070-218F} &
-\tcode{2460-24FF} &
-\tcode{2776-2793} &
-\tcode{2C00-2DFF} &
-\tcode{2E80-2FFF} \\
-\tcode{3004-3007} &
-\tcode{3021-302F} &
-\tcode{3031-D7FF} && \\
-\tcode{F900-FD3D} &
-\tcode{FD40-FDCF} &
-\tcode{FDF0-FE44} &
-\tcode{FE47-FFFD} & \\
-\tcode{10000-1FFFD} &
-\tcode{20000-2FFFD} &
-\tcode{30000-3FFFD} &
-\tcode{40000-4FFFD} &
-\tcode{50000-5FFFD} \\
-\tcode{60000-6FFFD} &
-\tcode{70000-7FFFD} &
-\tcode{80000-8FFFD} &
-\tcode{90000-9FFFD} &
-\tcode{A0000-AFFFD} \\
-\tcode{B0000-BFFFD} &
-\tcode{C0000-CFFFD} &
-\tcode{D0000-DFFFD} &
-\tcode{E0000-EFFFD} &
+\noncxxtcode{00A8} &
+\noncxxtcode{00AA} &
+\noncxxtcode{00AD} &
+\noncxxtcode{00AF} &
+\noncxxtcode{00B2-00B5} \\
+\noncxxtcode{00B7-00BA} &
+\noncxxtcode{00BC-00BE} &
+\noncxxtcode{00C0-00D6} &
+\noncxxtcode{00D8-00F6} &
+\noncxxtcode{00F8-00FF} \\
+\noncxxtcode{0100-167F} &
+\noncxxtcode{1681-180D} &
+\noncxxtcode{180F-1FFF} &&\\
+\noncxxtcode{200B-200D} &
+\noncxxtcode{202A-202E} &
+\noncxxtcode{203F-2040} &
+\noncxxtcode{2054} &
+\noncxxtcode{2060-206F} \\
+\noncxxtcode{2070-218F} &
+\noncxxtcode{2460-24FF} &
+\noncxxtcode{2776-2793} &
+\noncxxtcode{2C00-2DFF} &
+\noncxxtcode{2E80-2FFF} \\
+\noncxxtcode{3004-3007} &
+\noncxxtcode{3021-302F} &
+\noncxxtcode{3031-D7FF} && \\
+\noncxxtcode{F900-FD3D} &
+\noncxxtcode{FD40-FDCF} &
+\noncxxtcode{FDF0-FE44} &
+\noncxxtcode{FE47-FFFD} & \\
+\noncxxtcode{10000-1FFFD} &
+\noncxxtcode{20000-2FFFD} &
+\noncxxtcode{30000-3FFFD} &
+\noncxxtcode{40000-4FFFD} &
+\noncxxtcode{50000-5FFFD} \\
+\noncxxtcode{60000-6FFFD} &
+\noncxxtcode{70000-7FFFD} &
+\noncxxtcode{80000-8FFFD} &
+\noncxxtcode{90000-9FFFD} &
+\noncxxtcode{A0000-AFFFD} \\
+\noncxxtcode{B0000-BFFFD} &
+\noncxxtcode{C0000-CFFFD} &
+\noncxxtcode{D0000-DFFFD} &
+\noncxxtcode{E0000-EFFFD} &
 \\
 \end{floattable}
 
 \begin{floattable}{Ranges of characters disallowed initially (combining characters)}{lex.name.disallowed}
 {llll}
 \topline
-\tcode{0300-036F} &
+\noncxxtcode{0300-036F} &
 % FIXME: Unicode v7 adds 1AB0-1AFF
-\tcode{1DC0-1DFF} &
-\tcode{20D0-20FF} &
-\tcode{FE20-FE2F} \\
+\noncxxtcode{1DC0-1DFF} &
+\noncxxtcode{20D0-20FF} &
+\noncxxtcode{FE20-FE2F} \\
 \end{floattable}
 
 \pnum
diff --git a/source/exceptions.tex b/source/exceptions.tex
index 3af4f117..eb68b35c 100644
--- a/source/exceptions.tex
+++ b/source/exceptions.tex
@@ -135,11 +135,11 @@ [except.pre]
 Any exception thrown while destroying
 \tcode{t2}
 will result in executing
-\tcode{handler 2};
+\noncxxtcode{handler 2};
 any exception thrown while destroying
 \tcode{t1}
 will result in executing
-\tcode{handler 1}.
+\noncxxtcode{handler 1}.
 \end{example}
 
 \pnum
-- 
2.17.1


From 9c36433891210b260f96fb3201f4732cebea8c41 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Sun, 11 Nov 2018 02:56:38 +0100
Subject: [PATCH 14/20] Remove weird extra curlies after \placeholder.

Given
   "\placeholder{x}{"}
the closing quote appears at a different level than the opening quote.
As a result, the highlighting code doesn't recognize it as a string literal.
---
 source/lex.tex | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/source/lex.tex b/source/lex.tex
index b19505f2..ff67c806 100644
--- a/source/lex.tex
+++ b/source/lex.tex
@@ -1915,7 +1915,7 @@ [lex.ext]
 If \placeholder{S} contains a raw literal operator,
 the literal \placeholder{L} is treated as a call of the form
 \begin{codeblock}
-operator "" @\placeholder{X}@(@"\placeholder{n}{"}@)
+operator "" @\placeholder{X}@(@"\placeholder{n}"@)
 \end{codeblock}
 Otherwise (\placeholder{S} contains a numeric literal operator template),
 \placeholder{L} is treated as a call of the form
@@ -1941,7 +1941,7 @@ [lex.ext]
 If \placeholder{S} contains a raw literal operator,
 the \grammarterm{literal} \placeholder{L} is treated as a call of the form
 \begin{codeblock}
-operator "" @\placeholder{X}@(@"\placeholder{f}{"}@)
+operator "" @\placeholder{X}@(@"\placeholder{f}"@)
 \end{codeblock}
 Otherwise (\placeholder{S} contains a numeric literal operator template),
 \placeholder{L} is treated as a call of the form
-- 
2.17.1


From 610e72ce94cad3b36c389027b32314ae5e03d708 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Sun, 11 Nov 2018 03:31:07 +0100
Subject: [PATCH 15/20] Simplify \xname.

This helps the cxxdraft-htmlgen syntax highlighting code recognize __has_include and __has_cpp_attribute.
---
 source/macros.tex | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/source/macros.tex b/source/macros.tex
index e2b4a743..fb633889 100644
--- a/source/macros.tex
+++ b/source/macros.tex
@@ -349,7 +349,7 @@ [temp.arg.type]
 %% Double underscore
 \newcommand{\ungap}{\kern.5pt}
 \newcommand{\unun}{\textunderscore\ungap\textunderscore}
-\newcommand{\xname}[1]{\tcode{\unun\ungap#1}}
+\newcommand{\xname}[1]{\tcode{__#1}}
 \newcommand{\mname}[1]{\tcode{\unun\ungap#1\ungap\unun}}
 
 %% An elided code fragment, /* ... */, that is formatted as code.
-- 
2.17.1


From 6f510a27dfeeacf1b2d2f1611ab224a918eccb65 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Sun, 11 Nov 2018 15:23:33 +0100
Subject: [PATCH 16/20] Use \textnormal{..} and \textit{..} instead of
 \normalfont and \itshape.

The stateful ones are harder to handle.
---
 source/basic.tex | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/source/basic.tex b/source/basic.tex
index eb44d8db..41d0dc1c 100644
--- a/source/basic.tex
+++ b/source/basic.tex
@@ -258,10 +258,10 @@ [basic.def]
   C() : s() { }
   C(const C& x): s(x.s) { }
   C(C&& x): s(static_cast<std::string&&>(x.s)) { }
-      @\rlap{\normalfont\itshape //}@    : s(std::move(x.s)) { }
+      @\rlap{\textnormal{\textit{//}}}@    : s(std::move(x.s)) { }
   C& operator=(const C& x) { s = x.s; return *this; }
   C& operator=(C&& x) { s = static_cast<std::string&&>(x.s); return *this; }
-      @\rlap{\normalfont\itshape //}@                { s = std::move(x.s); return *this; }
+      @\rlap{\textnormal{\textit{//}}}@                { s = std::move(x.s); return *this; }
   ~C() { }
 };
 \end{codeblock}
-- 
2.17.1


From 067884073573e57b869d7ae265dc0210f7788cd3 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Sat, 17 Nov 2018 21:11:41 +0100
Subject: [PATCH 17/20] Replace a \term with a \defn.

---
 source/utilities.tex | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/source/utilities.tex b/source/utilities.tex
index 53829d07..7826cfc8 100644
--- a/source/utilities.tex
+++ b/source/utilities.tex
@@ -15894,7 +15894,7 @@ [meta.rqmts]
 be \oldconcept{DefaultConstructible}, \oldconcept{CopyConstructible},
 and publicly and unambiguously derived, directly or
 indirectly, from
-its \term{base characteristic}, which is a specialization
+its \defn{base characteristic}, which is a specialization
 of the template
 \linkx{\tcode{integral_constant}}{\idxcode{integral_constant}}{meta.help}, with
 the arguments to the template \tcode{integral_constant} determined by the
-- 
2.17.1


From 1d34eee404c60487e21cb5fa78ce2d2579526f13 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Wed, 13 Mar 2019 21:04:43 +0100
Subject: [PATCH 18/20] [temp.deduct.call] Make sure that when math superscript
 is suffixed to \texttt, the \texttt itself is included in the formula passed
 to MathJax.

Otherwise cxxdraft-htmlgen passes a lone math superscript to MathJax and then applies our own \texttt styling to the result, which produces
a different result from letting MathJax render and style the whole thing.
---
 source/templates.tex | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/source/templates.tex b/source/templates.tex
index 79a1eac5..2eb0d968 100644
--- a/source/templates.tex
+++ b/source/templates.tex
@@ -7825,7 +7825,7 @@ [temp.deduct.call]
 \tcode{A})
 as described below.
 If removing references and cv-qualifiers from \tcode{P} gives
-\tcode{std::initializer_list<P$^{\prime}$>}
+$\tcode{std::initializer_list<P}^{\prime}\tcode{>}$
 or $\tcode{P}'\tcode{[N]}$
 for some $\tcode{P}'$ and \tcode{N} and the
 argument is a non-empty initializer list\iref{dcl.init.list}, then deduction is
-- 
2.17.1


From 04de17887ee802f25d671ff306dae57f0fc26758 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Mon, 5 Aug 2019 14:31:01 +0200
Subject: [PATCH 19/20] Move some macros to macros.tex.

---
 source/macros.tex    | 6 ++++++
 source/utilities.tex | 6 ------
 2 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/source/macros.tex b/source/macros.tex
index fb633889..d5c54c9d 100644
--- a/source/macros.tex
+++ b/source/macros.tex
@@ -638,6 +638,12 @@ [temp.arg.type]
 \newenvironment{defnote}{\addtocounter{termnote}{1}\noteintro{Note \thetermnote{} to entry}}{\noteoutro{note}\space}
 
 
+% FIXME: For now, keep the format grammar productions out of the index, since
+% they conflict with the main grammar.
+% Consider renaming these en masse (to fmt-* ?) to avoid this problem.
+\newcommand{\fmtnontermdef}[1]{{\BnfNontermshape#1\itcorr}\textnormal{:}}
+\newcommand{\fmtgrammarterm}[1]{\gterm{#1}}
+
 %%-------------------------------------------------
 %% cxxdraft-htmlgen macros
 
diff --git a/source/utilities.tex b/source/utilities.tex
index 7826cfc8..92bbb07d 100644
--- a/source/utilities.tex
+++ b/source/utilities.tex
@@ -19270,12 +19270,6 @@ [format.string]
 
 \rSec3[format.string.general]{In general}
 
-% FIXME: For now, keep the format grammar productions out of the index, since
-% they conflict with the main grammar.
-% Consider renaming these en masse (to fmt-* ?) to avoid this problem.
-\newcommand{\fmtnontermdef}[1]{{\BnfNontermshape#1\itcorr}\textnormal{:}}
-\newcommand{\fmtgrammarterm}[1]{\gterm{#1}}
-
 \pnum
 A \defn{format string} for arguments \tcode{args} is
 a (possibly empty) sequence of
-- 
2.17.1


From 272fb799f173aa03e6d318f25fdf9b67d41f6efd Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Sun, 31 May 2020 23:23:45 +0200
Subject: [PATCH 20/20] Remove more inappropriate paragraph breaks.

---
 source/expressions.tex | 1 -
 source/templates.tex   | 5 -----
 2 files changed, 6 deletions(-)

diff --git a/source/expressions.tex b/source/expressions.tex
index e05a4c91..cbda131e 100644
--- a/source/expressions.tex
+++ b/source/expressions.tex
@@ -437,7 +437,6 @@ [expr.context]
 if and only if
 the expression is a glvalue of volatile-qualified type and it is one of the
 following:
-
 \begin{itemize}
 \item \tcode{(} \grammarterm{expression} \tcode{)}, where
 \grammarterm{expression} is one of these expressions,
diff --git a/source/templates.tex b/source/templates.tex
index 2eb0d968..8bdfc7c0 100644
--- a/source/templates.tex
+++ b/source/templates.tex
@@ -5420,7 +5420,6 @@ [temp.dep.expr]
 or
 \grammarterm{new-type-id}
 is dependent, even if any subexpression is type-dependent:
-
 \begin{ncsimplebnf}
 simple-type-specifier \terminal{(} \opt{expression-list} \terminal{)}\br
 \opt{\terminal{::}} \keyword{new} \opt{new-placement} new-type-id \opt{new-initializer}\br
@@ -5435,7 +5434,6 @@ [temp.dep.expr]
 \pnum
 Expressions of the following forms are never type-dependent (because the type
 of the expression cannot be dependent):
-
 \begin{ncsimplebnf}
 literal\br
 \keyword{sizeof} unary-expression\br
@@ -5529,7 +5527,6 @@ [temp.dep.constexpr]
 is type-dependent or the
 \grammarterm{type-id}
 is dependent:
-
 \begin{ncsimplebnf}
 \keyword{sizeof} unary-expression\br
 \keyword{sizeof} \terminal{(} type-id \terminal{)}\br
@@ -5554,7 +5551,6 @@ [temp.dep.constexpr]
 or
 \grammarterm{cast-expression}
 is value-dependent:
-
 \begin{ncsimplebnf}
 simple-type-specifier \terminal{(} \opt{expression-list} \terminal{)}\br
 \keyword{static_cast} \terminal{<} type-id \terminal{>} \terminal{(} expression \terminal{)}\br
@@ -5565,7 +5561,6 @@ [temp.dep.constexpr]
 
 \pnum
 Expressions of the following form are value-dependent:
-
 \begin{ncsimplebnf}
 \keyword{sizeof} \terminal{...} \terminal{(} identifier \terminal{)}\br
 fold-expression
-- 
2.17.1

